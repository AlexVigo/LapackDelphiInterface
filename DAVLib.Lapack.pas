{----------------------------------------------------}
{ Delphi interface to the Lapack 3.+ library        }
{ All types are sypported:                           }
{ Single, Double, Complex Single, Complex Double     }
{ July 19, 2021                                      }
{ Modified by Alex Vigo                              }
{ Based on original fortan files                     }
{----------------------------------------------------}

{----------------------------------------------------}
{ Delphi interface to the Lapack library             }
{ Lapack version 3.9.1                               }
{ See Lapack documentation for more details          }
{ Last modified 19/07/21                             }
{ Generated by Alex Vigo (dev.alexvigo@gmail.com)    }
{----------------------------------------------------}

unit DAVLib.Lapack;



interface

uses
  DAVLib.ComplexType, System.SysUtils;

const
  LibDllPath = 'liblapack.dll';

type
  TLFunc<T> = reference to function (Arg: T):Boolean;
  TLFunc<T1, T2> = reference to function (Arg1: T1; Arg2: T2):Boolean;
  TLFunc<T1, T2, T3> = reference to function (Arg1: T1; Arg2, Arg3: T3): Boolean;

//File generated by Lapack2PasHeaders
//File name cbbcsd
procedure cbbcsd_(const {in}jobu1: PChar{}; const {in}jobu2: PChar{}; const {in}jobv1t: PChar{}; const {in}jobv2t: PChar{}; const {in}trans: PChar{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}theta: PSingle{ dimension (q)}; const {inout}phi: PSingle{ dimension (q-1)}; const {inout}u1: PSComplex{ dimension (ldu1p)}; const {in}ldu1: PInteger{}; const {inout}u2: PSComplex{ dimension (ldu2m-p)}; const {in}ldu2: PInteger{}; const {inout}v1t: PSComplex{ dimension (ldv1tq)}; const {in}ldv1t: PInteger{}; const {inout}v2t: PSComplex{ dimension (ldv2tm-q)}; const {in}ldv2t: PInteger{}; const {out}b11d: PSingle{ dimension (q)}; const {out}b11e: PSingle{ dimension (q-1)}; const {out}b12d: PSingle{ dimension (q)}; const {out}b12e: PSingle{ dimension (q-1)}; const {out}b21d: PSingle{ dimension (q)}; const {out}b21e: PSingle{ dimension (q-1)}; const {out}b22d: PSingle{ dimension (q)}; const {out}b22e: PSingle{ dimension (q-1)}; const {out}rwork: PSingle{ dimension (max(1lrwork))}; const {in}lrwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cbdsqr
procedure cbdsqr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ncvt: PInteger{}; const {in}nru: PInteger{}; const {in}ncc: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n-1)}; const {inout}vt: PSComplex{ dimension (ldvt ncvt)}; const {in}ldvt: PInteger{}; const {inout}u: PSComplex{ dimension (ldu n)}; const {in}ldu: PInteger{}; const {inout}c: PSComplex{ dimension (ldc ncc)}; const {in}ldc: PInteger{}; const {out}rwork: PSingle{ dimension (4*n)}; const {out}info: PInteger{}); stdcall;



//file name cgbbrd
procedure cgbbrd_(const {in}vect: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}ncc: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {inout}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}d: PSingle{ dimension (min(mn))}; const {out}e: PSingle{ dimension (min(mn)-1)}; const {out}q: PSComplex{ dimension (ldqm)}; const {in}ldq: PInteger{}; const {out}pt: PSComplex{ dimension (ldptn)}; const {in}ldpt: PInteger{}; const {inout}c: PSComplex{ dimension (ldcncc)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension (max(mn))}; const {out}rwork: PSingle{ dimension (max(mn))}; const {out}info: PInteger{}); stdcall;



//file name cgbcon
procedure cgbcon_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cgbequ
procedure cgbequ_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}r: PSingle{ dimension (m)}; const {out}c: PSingle{ dimension (n)}; const {out}rowcnd: PSingle{}; const {out}colcnd: PSingle{}; const {out}amax: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name cgbequb
procedure cgbequb_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}r: PSingle{ dimension (m)}; const {out}c: PSingle{ dimension (n)}; const {out}rowcnd: PSingle{}; const {out}colcnd: PSingle{}; const {out}amax: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name cgbrfs
procedure cgbrfs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PSComplex{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cgbrfsx
procedure cgbrfsx_(const {in}trans: PChar{*1}; const {in}equed: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PSComplex{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}r: PSingle{ dimension (n)}; const {inout}c: PSingle{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}berr: PSingle{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PSingle{ dimension nparams}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name cgbsv
procedure cgbsv_(const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgbsvx
procedure cgbsvx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}afb: PSComplex{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}r: PSingle{ dimension (n)}; const {inout}c: PSingle{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cgbsvxx
procedure cgbsvxx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}afb: PSComplex{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}r: PSingle{ dimension (n)}; const {inout}c: PSingle{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}rpvgrw: PSingle{}; const {out}berr: PSingle{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PSingle{ dimension nparams}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name cgbtf2
procedure cgbtf2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {inout}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name cgbtrf
procedure cgbtrf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {inout}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name cgbtrs
procedure cgbtrs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgebak
procedure cgebak_(const {in}job: PChar{*1}; const {in}side: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {in}scale: PSingle{ dimension (n)}; const {in}m: PInteger{}; const {inout}v: PSComplex{ dimension (ldvm)}; const {in}ldv: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgebal
procedure cgebal_(const {in}job: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ilo: PInteger{}; const {out}ihi: PInteger{}; const {out}scale: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cgebd2
procedure cgebd2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PSingle{ dimension (min(mn))}; const {out}e: PSingle{ dimension (min(mn)-1)}; const {out}tauq: PSComplex{ dimension (min(mn))}; const {out}taup: PSComplex{ dimension (min(mn))}; const {out}work: PSComplex{ dimension (max(mn))}; const {out}info: PInteger{}); stdcall;



//file name cgebrd
procedure cgebrd_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PSingle{ dimension (min(mn))}; const {out}e: PSingle{ dimension (min(mn)-1)}; const {out}tauq: PSComplex{ dimension (min(mn))}; const {out}taup: PSComplex{ dimension (min(mn))}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgecon
procedure cgecon_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name cgeequ
procedure cgeequ_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}r: PSingle{ dimension (m)}; const {out}c: PSingle{ dimension (n)}; const {out}rowcnd: PSingle{}; const {out}colcnd: PSingle{}; const {out}amax: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name cgeequb
procedure cgeequb_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}r: PSingle{ dimension (m)}; const {out}c: PSingle{ dimension (n)}; const {out}rowcnd: PSingle{}; const {out}colcnd: PSingle{}; const {out}amax: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name cgees
procedure cgees_(const {in}jobvs: PChar{*1}; const {in}sort: PChar{*1}; const {in}select: TLFunc<PSComplex>{ of one PSComplex}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}sdim: PInteger{}; const {out}w: PSComplex{ dimension (n)}; const {out}vs: PSComplex{ dimension (ldvsn)}; const {in}ldvs: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (n)}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cgeesx
procedure cgeesx_(const {in}jobvs: PChar{*1}; const {in}sort: PChar{*1}; const {in}select: TLFunc<PSComplex>{ of one PSComplex}; const {in}sense: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}sdim: PInteger{}; const {out}w: PSComplex{ dimension (n)}; const {out}vs: PSComplex{ dimension (ldvsn)}; const {in}ldvs: PInteger{}; const {out}rconde: PSingle{}; const {out}rcondv: PSingle{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (n)}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cgeev
procedure cgeev_(const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}w: PSComplex{ dimension (n)}; const {out}vl: PSComplex{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PSComplex{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name cgeevx
procedure cgeevx_(const {in}balanc: PChar{*1}; const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}sense: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}w: PSComplex{ dimension (n)}; const {out}vl: PSComplex{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PSComplex{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}ilo: PInteger{}; const {out}ihi: PInteger{}; const {out}scale: PSingle{ dimension (n)}; const {out}abnrm: PSingle{}; const {out}rconde: PSingle{ dimension (n)}; const {out}rcondv: PSingle{ dimension (n)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name cgehd2
procedure cgehd2_(const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSComplex{ dimension (n-1)}; const {out}work: PSComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cgehrd
procedure cgehrd_(const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSComplex{ dimension (n-1)}; const {out}work: PSComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgejsv
procedure cgejsv_(const {in}joba: PChar{*1}; const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}jobr: PChar{*1}; const {in}jobt: PChar{*1}; const {in}jobp: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}sva: PSingle{ dimension (n)}; const {out}u: PSComplex{ dimension ( ldu n ) or ( ldu m )}; const {in}ldu: PInteger{}; const {out}v: PSComplex{ dimension ( ldv n )}; const {in}ldv: PInteger{}; const {out}cwork: PSComplex{ dimension (max(2lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (max(7lwork))}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ of dimension at least 4 that further depends}; const {out}info: PInteger{}); stdcall;



//file name cgelq
procedure cgelq_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSComplex{ dimension (max(5tsize))}; const {in}tsize: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgelq2
procedure cgelq2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSComplex{ dimension (min(mn))}; const {out}work: PSComplex{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name cgelqf
procedure cgelqf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSComplex{ dimension (min(mn))}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgelqt
procedure cgelqt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSComplex{ dimension (ldtmin(mn))}; const {in}ldt: PInteger{}; const {out}work: PSComplex{ dimension (mb*n)}; const {out}info: PInteger{}); stdcall;



//file name cgelqt3
procedure cgelqt3_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgels
procedure cgels_(const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgelsd
procedure cgelsd_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}s: PSingle{ dimension (min(mn))}; const {in}rcond: PSingle{}; const {out}rank: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (max(1lrwork))}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {out}info: PInteger{});stdcall;



//file name cgelss
procedure cgelss_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}s: PSingle{ dimension (min(mn))}; const {in}rcond: PSingle{}; const {out}rank: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (5*min(mn))}; const {out}info: PInteger{}); stdcall;



//file name cgelsy
procedure cgelsy_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}jpvt: PInteger{ dimension (n)}; const {in}rcond: PSingle{}; const {out}rank: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name cgemlq
procedure cgemlq_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSComplex{ dimension}; const {in}lda: PInteger{}; const {in}t: PSComplex{ dimension (max(5tsize))}; const {in}tsize: PInteger{}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgemlqt
procedure cgemlqt_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}mb: PInteger{}; const {in}v: PSComplex{ dimension}; const {in}ldv: PInteger{}; const {in}t: PSComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ the dimension of}; const {out}info: PInteger{}); stdcall;



//file name cgemqr
procedure cgemqr_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSComplex{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}t: PSComplex{ dimension (max(5tsize))}; const {in}tsize: PInteger{}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgemqrt
procedure cgemqrt_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}nb: PInteger{}; const {in}v: PSComplex{ dimension (ldvk)}; const {in}ldv: PInteger{}; const {in}t: PSComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ the dimension of work is}; const {out}info: PInteger{}); stdcall;



//file name cgeql2
procedure cgeql2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSComplex{ dimension (min(mn))}; const {out}work: PSComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cgeqlf
procedure cgeqlf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSComplex{ dimension (min(mn))}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgeqp3
procedure cgeqp3_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}jpvt: PInteger{ dimension (n)}; const {out}tau: PSComplex{ dimension (min(mn))}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name cgeqr
procedure cgeqr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSComplex{ dimension (max(5tsize))}; const {in}tsize: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgeqr2
procedure cgeqr2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSComplex{ dimension (min(mn))}; const {out}work: PSComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cgeqr2p
procedure cgeqr2p_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSComplex{ dimension (min(mn))}; const {out}work: PSComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cgeqrf
procedure cgeqrf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSComplex{ dimension (min(mn))}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgeqrfp
procedure cgeqrfp_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSComplex{ dimension (min(mn))}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgeqrt
procedure cgeqrt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSComplex{ dimension (ldtmin(mn))}; const {in}ldt: PInteger{}; const {out}work: PSComplex{ dimension (nb*n)}; const {out}info: PInteger{}); stdcall;



//file name cgeqrt2
procedure cgeqrt2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgeqrt3
procedure cgeqrt3_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgerfs
procedure cgerfs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cgerfsx
procedure cgerfsx_(const {in}trans: PChar{*1}; const {in}equed: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}r: PSingle{ dimension (n)}; const {in}c: PSingle{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}berr: PSingle{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PSingle{ dimension nparams}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name cgerq2
procedure cgerq2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSComplex{ dimension (min(mn))}; const {out}work: PSComplex{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name cgerqf
procedure cgerqf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSComplex{ dimension (min(mn))}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgesc2
procedure cgesc2_(const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}rhs: PSComplex{ dimension n}; const {in}ipiv: PInteger{ dimension (n)}; const {in}jpiv: PInteger{ dimension (n)}; const {out}scale: PSingle{}); stdcall;



//file name cgesdd
procedure cgesdd_(const {in}jobz: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PSingle{ dimension (min(mn))}; const {out}u: PSComplex{ dimension (lduucol)}; const {in}ldu: PInteger{}; const {out}vt: PSComplex{ dimension (ldvtn)}; const {in}ldvt: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (max(1lrwork))}; const {out}iwork: PInteger{ dimension (8*min(mn))}; const {out}info: PInteger{}); stdcall;



//file name cgesv
procedure cgesv_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgesvd
procedure cgesvd_(const {in}jobu: PChar{*1}; const {in}jobvt: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PSingle{ dimension (min(mn))}; const {out}u: PSComplex{ dimension (lduucol)}; const {in}ldu: PInteger{}; const {out}vt: PSComplex{ dimension (ldvtn)}; const {in}ldvt: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (5*min(mn))}; const {out}info: PInteger{}); stdcall;



//file name cgesvdq
procedure cgesvdq_(const {in}joba: PChar{*1}; const {in}jobp: PChar{*1}; const {in}jobr: PChar{*1}; const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ of dimensions lda x n}; const {in}lda: PInteger{}; const {out}s: PSingle{ of dimension n}; const {out}u: PSComplex{ dimension}; const {in}ldu: PInteger{}; const {out}v: PSComplex{ dimension}; const {in}ldv: PInteger{}; const {out}numrank: PInteger{}; const {out}iwork: PInteger{ dimension (max(1 liwork))}; const {in}liwork: PInteger{}; const {out}cwork: PSComplex{ dimension (max(2 lcwork)) used as a workspace}; const {inout}lcwork: PInteger{}; const {out}rwork: PSingle{ dimension (max(1 lrwork))}; const {in}lrwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgesvdx
procedure cgesvdx_(const {in}jobu: PChar{*1}; const {in}jobvt: PChar{*1}; const {in}range: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {out}ns: PInteger{}; const {out}s: PSingle{ dimension (min(mn))}; const {out}u: PSComplex{ dimension (lduucol)}; const {in}ldu: PInteger{}; const {out}vt: PSComplex{ dimension (ldvtn)}; const {in}ldvt: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (max(1lrwork))}; const {out}iwork: PInteger{ dimension (12*min(mn))}; const {out}info: PInteger{}); stdcall;



//file name cgesvj
procedure cgesvj_(const {in}joba: PChar{*1}; const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}sva: PSingle{ dimension (n)}; const {in}mv: PInteger{}; const {inout}v: PSComplex{ dimension (ldvn)}; const {in}ldv: PInteger{}; const {inout}cwork: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {inout}rwork: PSingle{ dimension (max(6lrwork))}; const {in}lrwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgesvx
procedure cgesvx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}r: PSingle{ dimension (n)}; const {inout}c: PSingle{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name cgesvxx
procedure cgesvxx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}r: PSingle{ dimension (n)}; const {inout}c: PSingle{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}rpvgrw: PSingle{}; const {out}berr: PSingle{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PSingle{ dimension nparams}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name cgetc2
procedure cgetc2_(const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}jpiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cgetf2
procedure cgetf2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name cgetrf
procedure cgetrf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name cgetrf2
procedure cgetrf2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name cgetri
procedure cgetri_(const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgetrs
procedure cgetrs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgetsls
procedure cgetsls_(const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgetsqrhrt
procedure cgetsqrhrt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb1: PInteger{}; const {in}nb1: PInteger{}; const {in}nb2: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSComplex{ dimension (ldtn))}; const {in}ldt: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cggbak
procedure cggbak_(const {in}job: PChar{*1}; const {in}side: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {in}lscale: PSingle{ dimension (n)}; const {in}rscale: PSingle{ dimension (n)}; const {in}m: PInteger{}; const {inout}v: PSComplex{ dimension (ldvm)}; const {in}ldv: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cggbal
procedure cggbal_(const {in}job: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}ilo: PInteger{}; const {out}ihi: PInteger{}; const {out}lscale: PSingle{ dimension (n)}; const {out}rscale: PSingle{ dimension (n)}; const {out}work: PSingle{ dimension (lwork)}; const {out}info: PInteger{}); stdcall;



//file name cgges
procedure cgges_(const {in}jobvsl: PChar{*1}; const {in}jobvsr: PChar{*1}; const {in}sort: PChar{*1}; const {in}selctg: TLFunc<PSComplex, PSComplex>{ of two PSComplex{ arguments}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}sdim: PInteger{}; const {out}alpha: PSComplex{ dimension (n)}; const {out}beta: PSComplex{ dimension (n)}; const {out}vsl: PSComplex{ dimension (ldvsln)}; const {in}ldvsl: PInteger{}; const {out}vsr: PSComplex{ dimension (ldvsrn)}; const {in}ldvsr: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (8*n)}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cgges3
procedure cgges3_(const {in}jobvsl: PChar{*1}; const {in}jobvsr: PChar{*1}; const {in}sort: PChar{*1}; const {in}selctg: TLFunc<PSComplex, PSComplex>{ of two PSComplex{ arguments}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}sdim: PInteger{}; const {out}alpha: PSComplex{ dimension (n)}; const {out}beta: PSComplex{ dimension (n)}; const {out}vsl: PSComplex{ dimension (ldvsln)}; const {in}ldvsl: PInteger{}; const {out}vsr: PSComplex{ dimension (ldvsrn)}; const {in}ldvsr: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (8*n)}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cggesx
procedure cggesx_(const {in}jobvsl: PChar{*1}; const {in}jobvsr: PChar{*1}; const {in}sort: PChar{*1}; const {in}selctg: TLFunc<PSComplex,PSComplex>{ of two PSComplex{ arguments}; const {in}sense: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}sdim: PInteger{}; const {out}alpha: PSComplex{ dimension (n)}; const {out}beta: PSComplex{ dimension (n)}; const {out}vsl: PSComplex{ dimension (ldvsln)}; const {in}ldvsl: PInteger{}; const {out}vsr: PSComplex{ dimension (ldvsrn)}; const {in}ldvsr: PInteger{}; const {out}rconde: PSingle{ dimension ( 2 )}; const {out}rcondv: PSingle{ dimension ( 2 )}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension ( 8*n )}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cggev
procedure cggev_(const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}alpha: PSComplex{ dimension (n)}; const {out}beta: PSComplex{ dimension (n)}; const {out}vl: PSComplex{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PSComplex{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (8*n)}; const {out}info: PInteger{}); stdcall;



//file name cggev3
procedure cggev3_(const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}alpha: PSComplex{ dimension (n)}; const {out}beta: PSComplex{ dimension (n)}; const {out}vl: PSComplex{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PSComplex{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (8*n)}; const {out}info: PInteger{}); stdcall;



//file name cggevx
procedure cggevx_(const {in}balanc: PChar{*1}; const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}sense: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}alpha: PSComplex{ dimension (n)}; const {out}beta: PSComplex{ dimension (n)}; const {out}vl: PSComplex{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PSComplex{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}ilo: PInteger{}; const {out}ihi: PInteger{}; const {out}lscale: PSingle{ dimension (n)}; const {out}rscale: PSingle{ dimension (n)}; const {out}abnrm: PSingle{}; const {out}bbnrm: PSingle{}; const {out}rconde: PSingle{ dimension (n)}; const {out}rcondv: PSingle{ dimension (n)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (lrwork)}; const {out}iwork: PInteger{ dimension (n+2)}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cggglm
procedure cggglm_(const {in}n: PInteger{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {inout}a: PSComplex{ dimension (ldam)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbp)}; const {in}ldb: PInteger{}; const {inout}d: PSComplex{ dimension (n)}; const {out}x: PSComplex{ dimension (m)}; const {out}y: PSComplex{ dimension (p)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgghd3
procedure cgghd3_(const {in}compq: PChar{*1}; const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {inout}q: PSComplex{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {inout}z: PSComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgghrd
procedure cgghrd_(const {in}compq: PChar{*1}; const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {inout}q: PSComplex{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {inout}z: PSComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgglse
procedure cgglse_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}p: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {inout}c: PSComplex{ dimension (m)}; const {inout}d: PSComplex{ dimension (p)}; const {out}x: PSComplex{ dimension (n)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cggqrf
procedure cggqrf_(const {in}n: PInteger{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {inout}a: PSComplex{ dimension (ldam)}; const {in}lda: PInteger{}; const {out}taua: PSComplex{ dimension (min(nm))}; const {inout}b: PSComplex{ dimension (ldbp)}; const {in}ldb: PInteger{}; const {out}taub: PSComplex{ dimension (min(np))}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cggrqf
procedure cggrqf_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}taua: PSComplex{ dimension (min(mn))}; const {inout}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}taub: PSComplex{ dimension (min(pn))}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cggsvd3
procedure cggsvd3_(const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}jobq: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}p: PInteger{}; const {out}k: PInteger{}; const {out}l: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}alpha: PSingle{ dimension (n)}; const {out}beta: PSingle{ dimension (n)}; const {out}u: PSComplex{ dimension (ldum)}; const {in}ldu: PInteger{}; const {out}v: PSComplex{ dimension (ldvp)}; const {in}ldv: PInteger{}; const {out}q: PSComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (2*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cggsvp3
procedure cggsvp3_(const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}jobq: PChar{*1}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {in}tola: PSingle{}; const {in}tolb: PSingle{}; const {out}k: PInteger{}; const {out}l: PInteger{}; const {out}u: PSComplex{ dimension (ldum)}; const {in}ldu: PInteger{}; const {out}v: PSComplex{ dimension (ldvp)}; const {in}ldv: PInteger{}; const {out}q: PSComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}iwork: PInteger{ dimension (n)}; const {out}rwork: PSingle{ dimension (2*n)}; const {out}tau: PSComplex{ dimension (n)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgsvj0
procedure cgsvj0_(const {in}jobv: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}d: PSComplex{ dimension (n)}; const {inout}sva: PSingle{ dimension (n)}; const {in}mv: PInteger{}; const {inout}v: PSComplex{ dimension (ldvn)}; const {in}ldv: PInteger{}; const {in}eps: PSingle{}; const {in}sfmin: PSingle{}; const {in}tol: PSingle{}; const {in}nsweep: PInteger{}; const {out}work: PSComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgsvj1
procedure cgsvj1_(const {in}jobv: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}n1: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}d: PSComplex{ dimension (n)}; const {inout}sva: PSingle{ dimension (n)}; const {in}mv: PInteger{}; const {inout}v: PSComplex{ dimension (ldvn)}; const {in}ldv: PInteger{}; const {in}eps: PSingle{}; const {in}sfmin: PSingle{}; const {in}tol: PSingle{}; const {in}nsweep: PInteger{}; const {out}work: PSComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgtcon
procedure cgtcon_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}dl: PSComplex{ dimension (n-1)}; const {in}d: PSComplex{ dimension (n)}; const {in}du: PSComplex{ dimension (n-1)}; const {in}du2: PSComplex{ dimension (n-2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name cgtrfs
procedure cgtrfs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}dl: PSComplex{ dimension (n-1)}; const {in}d: PSComplex{ dimension (n)}; const {in}du: PSComplex{ dimension (n-1)}; const {in}dlf: PSComplex{ dimension (n-1)}; const {in}df: PSComplex{ dimension (n)}; const {in}duf: PSComplex{ dimension (n-1)}; const {in}du2: PSComplex{ dimension (n-2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cgtsv
procedure cgtsv_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}dl: PSComplex{ dimension (n-1)}; const {inout}d: PSComplex{ dimension (n)}; const {inout}du: PSComplex{ dimension (n-1)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgtsvx
procedure cgtsvx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}dl: PSComplex{ dimension (n-1)}; const {in}d: PSComplex{ dimension (n)}; const {in}du: PSComplex{ dimension (n-1)}; const {inout}dlf: PSComplex{ dimension (n-1)}; const {inout}df: PSComplex{ dimension (n)}; const {inout}duf: PSComplex{ dimension (n-1)}; const {inout}du2: PSComplex{ dimension (n-2)}; const {inout}ipiv: PInteger{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cgttrf
procedure cgttrf_(const {in}n: PInteger{}; const {inout}dl: PSComplex{ dimension (n-1)}; const {inout}d: PSComplex{ dimension (n)}; const {inout}du: PSComplex{ dimension (n-1)}; const {out}du2: PSComplex{ dimension (n-2)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cgttrs
procedure cgttrs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}dl: PSComplex{ dimension (n-1)}; const {in}d: PSComplex{ dimension (n)}; const {in}du: PSComplex{ dimension (n-1)}; const {in}du2: PSComplex{ dimension (n-2)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cgtts2
procedure cgtts2_(const {in}itrans: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}dl: PSComplex{ dimension (n-1)}; const {in}d: PSComplex{ dimension (n)}; const {in}du: PSComplex{ dimension (n-1)}; const {in}du2: PSComplex{ dimension (n-2)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}); stdcall;



//file name chb2st_kernels
procedure chb2st_kernels_(const {in}uplo: PChar{*1}; const {in}wantz: PBoolean{ which indicate if eigenvalue are requested or both}; const {in}ttype: PInteger{}; const {in}st: PInteger{}; const {in}ed: PInteger{}; const {in}sweep: PInteger{}; const {in}n: PInteger{ the order of the matrix a}; const {in}nb: PInteger{ the size of the band}; const {in}ib: PInteger{}; const {inout}a: PSComplex{ a pointer to the matrix a}; const {in}lda: PInteger{ the leading dimension of the matrix a}; const {out}v: PSComplex{ dimension 2*n if eigenvalues only are}; const {out}tau: PSComplex{ dimension (2*n)}; const {in}ldvt: PInteger{}; const {out}work: PSComplex{ workspace of size nb});  stdcall;



//file name chbev
procedure chbev_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSComplex{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (n)}; const {out}rwork: PSingle{ dimension (max(13*n-2))}; const {out}info: PInteger{}); stdcall;



//file name chbev_2stage
procedure chbev_2stage_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSComplex{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension lwork}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (max(13*n-2))}; const {out}info: PInteger{}); stdcall;



//file name chbevd
procedure chbevd_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSComplex{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chbevd_2stage
procedure chbevd_2stage_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSComplex{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chbevx
procedure chbevx_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSComplex{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}q: PSComplex{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (n)}; const {out}rwork: PSingle{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name chbevx_2stage
procedure chbevx_2stage_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSComplex{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}q: PSComplex{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name chbgst
procedure chbgst_(const {in}vect: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ka: PInteger{}; const {in}kb: PInteger{}; const {inout}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}bb: PSComplex{ dimension (ldbbn)}; const {in}ldbb: PInteger{}; const {out}x: PSComplex{ dimension (ldxn)}; const {in}ldx: PInteger{}; const {out}work: PSComplex{ dimension (n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name chbgv
procedure chbgv_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ka: PInteger{}; const {in}kb: PInteger{}; const {inout}ab: PSComplex{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {inout}bb: PSComplex{ dimension (ldbb n)}; const {in}ldbb: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (n)}; const {out}rwork: PSingle{ dimension (3*n)}; const {out}info: PInteger{}); stdcall;



//file name chbgvd
procedure chbgvd_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ka: PInteger{}; const {in}kb: PInteger{}; const {inout}ab: PSComplex{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {inout}bb: PSComplex{ dimension (ldbb n)}; const {in}ldbb: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (max(1lrwork))}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chbgvx
procedure chbgvx_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ka: PInteger{}; const {in}kb: PInteger{}; const {inout}ab: PSComplex{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {inout}bb: PSComplex{ dimension (ldbb n)}; const {in}ldbb: PInteger{}; const {out}q: PSComplex{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (n)}; const {out}rwork: PSingle{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name chbtrd
procedure chbtrd_(const {in}vect: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}d: PSingle{ dimension (n)}; const {out}e: PSingle{ dimension (n-1)}; const {inout}q: PSComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}work: PSComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name checon
procedure checon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name checon_3
procedure checon_3_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PSComplex{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name checon_rook
procedure checon_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name cheequb
procedure cheequb_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PSingle{ dimension (n)}; const {out}scond: PSingle{}; const {out}amax: PSingle{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name cheev
procedure cheev_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (max(1 3*n-2))}; const {out}info: PInteger{}); stdcall;



//file name cheev_2stage
procedure cheev_2stage_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (max(1 3*n-2))}; const {out}info: PInteger{}); stdcall;



//file name cheevd
procedure cheevd_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cheevd_2stage
procedure cheevd_2stage_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cheevr
procedure cheevr_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (max(1lrwork))}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cheevr_2stage
procedure cheevr_2stage_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (max(1lrwork))}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cheevx
procedure cheevx_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cheevx_2stage
procedure cheevx_2stage_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name chegs2
procedure chegs2_(const {in}itype: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chegst
procedure chegst_(const {in}itype: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chegv
procedure chegv_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (max(1 3*n-2))}; const {out}info: PInteger{}); stdcall;



//file name chegv_2stage
procedure chegv_2stage_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (max(1 3*n-2))}; const {out}info: PInteger{}); stdcall;



//file name chegvd
procedure chegvd_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (max(1lrwork))}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chegvx
procedure chegvx_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cherfs
procedure cherfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cherfsx
procedure cherfsx_(const {in}uplo: PChar{*1}; const {in}equed: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}s: PSingle{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}berr: PSingle{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PSingle{ dimension nparams}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name chesv
procedure chesv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chesv_aa
procedure chesv_aa_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chesv_aa_2stage
procedure chesv_aa_2stage_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tb: PSComplex{ dimension (ltb)}; const {in}ltb: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}ipiv2: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{ workspace of size lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chesv_rk
procedure chesv_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PSComplex{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{ dimension ( max(1lwork) )}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chesv_rook
procedure chesv_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chesvx
procedure chesvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name chesvxx
procedure chesvxx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}s: PSingle{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}rpvgrw: PSingle{}; const {out}berr: PSingle{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PSingle{ dimension nparams}; const {out}work: PSComplex{ dimension (5*n)}; const {out}rwork: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name cheswapr
procedure cheswapr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}i1: PInteger{}; const {in}i2: PInteger{}); stdcall;



//file name chetd2
procedure chetd2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PSingle{ dimension (n)}; const {out}e: PSingle{ dimension (n-1)}; const {out}tau: PSComplex{ dimension (n-1)}; const {out}info: PInteger{}); stdcall;



//file name chetf2
procedure chetf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name chetf2_rk
procedure chetf2_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PSComplex{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name chetf2_rook
procedure chetf2_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name chetrd
procedure chetrd_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PSingle{ dimension (n)}; const {out}e: PSingle{ dimension (n-1)}; const {out}tau: PSComplex{ dimension (n-1)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chetrd_2stage
procedure chetrd_2stage_(const {in}vect: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PSingle{ dimension (n)}; const {out}e: PSingle{ dimension (n-1)}; const {out}tau: PSComplex{ dimension (n-kd)}; const {out}hous2: PSComplex{ dimension (lhous2)}; const {in}lhous2: PInteger{}; const {out}work: PSComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chetrd_hb2st
procedure chetrd_hb2st_(const {in}stage1: PChar{*1}; const {in}vect: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}d: PSingle{ dimension (n)}; const {out}e: PSingle{ dimension (n-1)}; const {out}hous: PSComplex{ dimension lhous that}; const {in}lhous: PInteger{}; const {out}work: PSComplex{ dimension lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chetrd_he2hb
procedure chetrd_he2hb_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}tau: PSComplex{ dimension (n-kd)}; const {out}work: PSComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chetrf
procedure chetrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chetrf_aa
procedure chetrf_aa_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chetrf_aa_2stage
procedure chetrf_aa_2stage_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tb: PSComplex{ dimension (ltb)}; const {in}ltb: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}ipiv2: PInteger{ dimension (n)}; const {out}work: PSComplex{ workspace of size lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chetrf_rk
procedure chetrf_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PSComplex{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension ( max(1lwork) )}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chetrf_rook
procedure chetrf_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chetri
procedure chetri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name chetri_3
procedure chetri_3_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PSComplex{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (n+nb+1)*(nb+3)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chetri_3x
procedure chetri_3x_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PSComplex{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (n+nb+1nb+3)}; const {in}nb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chetri_rook
procedure chetri_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name chetri2
procedure chetri2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (n+nb+1)*(nb+3)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chetri2x
procedure chetri2x_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (n+nb+1nb+3)}; const {in}nb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chetrs
procedure chetrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chetrs_3
procedure chetrs_3_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PSComplex{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chetrs_aa
procedure chetrs_aa_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chetrs_aa_2stage
procedure chetrs_aa_2stage_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tb: PSComplex{ dimension (ltb)}; const {in}ltb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}ipiv2: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chetrs_rook
procedure chetrs_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chetrs2
procedure chetrs2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name chfrk
procedure chfrk_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}alpha: PSingle{}; const {in}a: PSComplex{ dimension (ldaka)}; const {in}lda: PInteger{}; const {in}beta: PSingle{}; const {inout}c: PSComplex{ dimension (n*(n+1)/2)}); stdcall;



//file name chgeqz
procedure chgeqz_(const {in}job: PChar{*1}; const {in}compq: PChar{*1}; const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PSComplex{ dimension (ldh n)}; const {in}ldh: PInteger{}; const {inout}t: PSComplex{ dimension (ldt n)}; const {in}ldt: PInteger{}; const {out}alpha: PSComplex{ dimension (n)}; const {out}beta: PSComplex{ dimension (n)}; const {inout}q: PSComplex{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {inout}z: PSComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name chla_transtype
function chla_transtype_( ):Char{*1}; stdcall;



//file name chpcon
procedure chpcon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name chpev
procedure chpev_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (max(1 2*n-1))}; const {out}rwork: PSingle{ dimension (max(1 3*n-2))}; const {out}info: PInteger{}); stdcall;



//file name chpevd
procedure chpevd_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (max(1lrwork))}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chpevx
procedure chpevx_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name chpgst
procedure chpgst_(const {in}itype: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {in}bp: PSComplex{ dimension (n*(n+1)/2)}; const {out}info: PInteger{}); stdcall;



//file name chpgv
procedure chpgv_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {inout}bp: PSComplex{ dimension (n*(n+1)/2)}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (max(1 2*n-1))}; const {out}rwork: PSingle{ dimension (max(1 3*n-2))}; const {out}info: PInteger{}); stdcall;



//file name chpgvd
procedure chpgvd_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {inout}bp: PSComplex{ dimension (n*(n+1)/2)}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (max(1lrwork))}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chpgvx
procedure chpgvx_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {inout}bp: PSComplex{ dimension (n*(n+1)/2)}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name chprfs
procedure chprfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {in}afp: PSComplex{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name chpsv
procedure chpsv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chpsvx
procedure chpsvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {inout}afp: PSComplex{ dimension (n*(n+1)/2)}; const {inout}ipiv: PInteger{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name chptrd
procedure chptrd_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {out}d: PSingle{ dimension (n)}; const {out}e: PSingle{ dimension (n-1)}; const {out}tau: PSComplex{ dimension (n-1)}; const {out}info: PInteger{}); stdcall;



//file name chptrf
procedure chptrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name chptri
procedure chptri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name chptrs
procedure chptrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name chsein
procedure chsein_(const {in}side: PChar{*1}; const {in}eigsrc: PChar{*1}; const {in}initv: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}h: PSComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {inout}w: PSComplex{ dimension (n)}; const {inout}vl: PSComplex{ dimension (ldvlmm)}; const {in}ldvl: PInteger{}; const {inout}vr: PSComplex{ dimension (ldvrmm)}; const {in}ldvr: PInteger{}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PSComplex{ dimension (n*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}ifaill: PInteger{ dimension (mm)}; const {out}ifailr: PInteger{ dimension (mm)}; const {out}info: PInteger{}); stdcall;



//file name chseqr
procedure chseqr_(const {in}job: PChar{*1}; const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PSComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {out}w: PSComplex{ dimension (n)}; const {inout}z: PSComplex{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cla_gbamv
procedure cla_gbamv_(const {in}trans: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}alpha: PSingle{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}x: PSComplex{ dimension}; const {in}incx: PInteger{}; const {in}beta: PSingle{}; const {inout}y: PSingle{ dimension}; const {in}incy: PInteger{}); stdcall;



//file name cla_gbrcond_c
function cla_gbrcond_c_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PSComplex{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}c: PSingle{ dimension (n)}; const {in}capply: PBoolean{}; const {out}info: PInteger{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}):Single{}; stdcall;



//file name cla_gbrcond_x
function cla_gbrcond_x_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PSComplex{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}x: PSComplex{ dimension (n)}; const {out}info: PInteger{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}):Single{}; stdcall;



//file name cla_gbrfsx_extended
procedure cla_gbrfsx_extended_ (const {in}prec_type: PInteger{}; const {in}trans_type: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PSComplex{ dimension (ldafn)}; const {in}ldafb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}colequ: PBoolean{}; const {in}c: PSingle{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}y: PSComplex{ dimension (ldynrhs)}; const {in}ldy: PInteger{}; const {out}berr_out: PSingle{ dimension (nrhs)}; const {in}n_norms: PInteger{}; const {inout}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {inout}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}res: PSComplex{ dimension (n)}; const {in}ayb: PSingle{ dimension (n)}; const {in}dy: PSComplex{ dimension (n)}; const {in}y_tail: PSComplex{ dimension (n)}; const {in}rcond: PSingle{}; const {in}ithresh: PInteger{}; const {in}rthresh: PSingle{}; const {in}dz_ub: PSingle{}; const {in}ignore_cwise: PBoolean{}; const {out}info: PInteger{}); stdcall;



//file name cla_gbrpvgrw
function cla_gbrpvgrw_(const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ncols: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PSComplex{ dimension (ldafbn)}; const {in}ldafb: PInteger{}):Single{}; stdcall;



//file name cla_geamv
procedure cla_geamv_ (const {in}trans: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}alpha: PSingle{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}x: PSComplex{ dimension}; const {in}incx: PInteger{}; const {in}beta: PSingle{}; const {inout}y: PSingle{ dimension}; const {in}incy: PInteger{});  stdcall;



//file name cla_gercond_c
function cla_gercond_c_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}c: PSingle{ dimension (n)}; const {in}capply: PBoolean{}; const {out}info: PInteger{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}):Single{}; stdcall;



//file name cla_gercond_x
function cla_gercond_x_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}x: PSComplex{ dimension (n)}; const {out}info: PInteger{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}):Single{}; stdcall;



//file name cla_gerfsx_extended
procedure cla_gerfsx_extended_(const {in}prec_type: PInteger{}; const {in}trans_type: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}colequ: PBoolean{}; const {in}c: PSingle{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}y: PSComplex{ dimension (ldynrhs)}; const {in}ldy: PInteger{}; const {out}berr_out: PSingle{ dimension (nrhs)}; const {in}n_norms: PInteger{}; const {inout}errs_n: PSingle{ dimension (nrhs n_err_bnds)}; const {inout}errs_c: PSingle{ dimension (nrhs n_err_bnds)}; const {in}res: PSComplex{ dimension (n)}; const {in}ayb: PSingle{ dimension (n)}; const {in}dy: PSComplex{ dimension (n)}; const {in}y_tail: PSComplex{ dimension (n)}; const {in}rcond: PSingle{}; const {in}ithresh: PInteger{}; const {in}rthresh: PSingle{}; const {in}dz_ub: PSingle{}; const {in}ignore_cwise: PBoolean{}; const {out}info: PInteger{}); stdcall;



//file name cla_gerpvgrw
function cla_gerpvgrw_(const {in}n: PInteger{}; const {in}ncols: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}):Single{}; stdcall;



//file name cla_heamv
procedure cla_heamv_(const {in}uplo: PInteger{}; const {in}n: PInteger{}; const {in}alpha: PSingle{ }; const {in}a: PSComplex{ dimension ( lda n )}; const {in}lda: PInteger{}; const {in}x: PSComplex{ dimension}; const {in}incx: PInteger{}; const {in}beta: PSingle{ }; const {inout}y: PSingle{ dimension}; const {in}incy: PInteger{}); stdcall;



//file name cla_hercond_c
function cla_hercond_c_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}c: PSingle{ dimension (n)}; const {in}capply: PBoolean{}; const {out}info: PInteger{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}):Single{}; stdcall;



//file name cla_hercond_x
function cla_hercond_x_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}x: PSComplex{ dimension (n)}; const {out}info: PInteger{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}):Single{}; stdcall;



//file name cla_herfsx_extended
procedure cla_herfsx_extended_(const {in}prec_type: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}colequ: PBoolean{}; const {in}c: PSingle{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}y: PSComplex{ dimension (ldynrhs)}; const {in}ldy: PInteger{}; const {out}berr_out: PSingle{ dimension (nrhs)}; const {in}n_norms: PInteger{}; const {inout}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {inout}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}res: PSComplex{ dimension (n)}; const {in}ayb: PSingle{ dimension (n)}; const {in}dy: PSComplex{ dimension (n)}; const {in}y_tail: PSComplex{ dimension (n)}; const {in}rcond: PSingle{}; const {in}ithresh: PInteger{}; const {in}rthresh: PSingle{}; const {in}dz_ub: PSingle{}; const {in}ignore_cwise: PBoolean{}; const {out}info: PInteger{}); stdcall;



//file name cla_herpvgrw
function cla_herpvgrw_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}info: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSingle{ dimension (2*n)}):Single{}; stdcall;



//file name cla_lin_berr
procedure cla_lin_berr_ (const {in}n: PInteger{}; const {in}nz: PInteger{}; const {in}nrhs: PInteger{}; const {in}res: PSComplex{ dimension (nnrhs)}; const {in}ayb: PSingle{ dimension (n nrhs)}; const {out}berr: PSingle{ dimension (nrhs)});  stdcall;



//file name cla_porcond_c
function cla_porcond_c_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}c: PSingle{ dimension (n)}; const {in}capply: PBoolean{}; const {out}info: PInteger{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}):Single{}; stdcall;



//file name cla_porcond_x
function cla_porcond_x_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}x: PSComplex{ dimension (n)}; const {out}info: PInteger{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}):Single{}; stdcall;



//file name cla_porfsx_extended
procedure cla_porfsx_extended_(const {in}prec_type: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}colequ: PBoolean{}; const {in}c: PSingle{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}y: PSComplex{ dimension (ldynrhs)}; const {in}ldy: PInteger{}; const {out}berr_out: PSingle{ dimension (nrhs)}; const {in}n_norms: PInteger{}; const {inout}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {inout}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}res: PSComplex{ dimension (n)}; const {in}ayb: PSingle{ dimension (n)}; const {in}dy: PSComplex{ dimension (n)}; const {in}y_tail: PSComplex{ dimension (n)}; const {in}rcond: PSingle{}; const {in}ithresh: PInteger{}; const {in}rthresh: PSingle{}; const {in}dz_ub: PSingle{}; const {in}ignore_cwise: PBoolean{}; const {out}info: PInteger{}); stdcall;



//file name cla_porpvgrw
function cla_porpvgrw_(const {in}uplo: PChar{*1}; const {in}ncols: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {out}work: PSingle{ dimension (2*n)}):Single{}; stdcall;



//file name cla_syamv
procedure cla_syamv_(const {in}uplo: PInteger{}; const {in}n: PInteger{}; const {in}alpha: PSingle{ }; const {in}a: PSComplex{ dimension ( lda n )}; const {in}lda: PInteger{}; const {in}x: PSComplex{ dimension}; const {in}incx: PInteger{}; const {in}beta: PSingle{ }; const {inout}y: PSingle{ dimension}; const {in}incy: PInteger{}); stdcall;



//file name cla_syrcond_c
function cla_syrcond_c_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}c: PSingle{ dimension (n)}; const {in}capply: PBoolean{}; const {out}info: PInteger{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}):Single{}; stdcall;



//file name cla_syrcond_x
function cla_syrcond_x_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}x: PSComplex{ dimension (n)}; const {out}info: PInteger{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}):Single{}; stdcall;



//file name cla_syrfsx_extended
procedure cla_syrfsx_extended_(const {in}prec_type: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}colequ: PBoolean{}; const {in}c: PSingle{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}y: PSComplex{ dimension (ldynrhs)}; const {in}ldy: PInteger{}; const {out}berr_out: PSingle{ dimension (nrhs)}; const {in}n_norms: PInteger{}; const {inout}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {inout}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}res: PSComplex{ dimension (n)}; const {in}ayb: PSingle{ dimension (n)}; const {in}dy: PSComplex{ dimension (n)}; const {in}y_tail: PSComplex{ dimension (n)}; const {in}rcond: PSingle{}; const {in}ithresh: PInteger{}; const {in}rthresh: PSingle{}; const {in}dz_ub: PSingle{}; const {in}ignore_cwise: PBoolean{}; const {out}info: PInteger{}); stdcall;



//file name cla_syrpvgrw
function cla_syrpvgrw_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}info: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSingle{ dimension (2*n)}):Single{};stdcall;



//file name cla_wwaddw
procedure cla_wwaddw_(const {in}n: PInteger{}; const {inout}x: PSComplex{ dimension (n)}; const {inout}y: PSComplex{ dimension (n)}; const {in}w: PSComplex{ dimension (n)}); stdcall;



//file name clabrd
procedure clabrd_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PSingle{ dimension (nb)}; const {out}e: PSingle{ dimension (nb)}; const {out}tauq: PSComplex{ dimension (nb)}; const {out}taup: PSComplex{ dimension (nb)}; const {out}x: PSComplex{ dimension (ldxnb)}; const {in}ldx: PInteger{}; const {out}y: PSComplex{ dimension (ldynb)}; const {in}ldy: PInteger{}); stdcall;



//file name clacgv
procedure clacgv_(const {in}n: PInteger{}; const {inout}x: PSComplex{ dimension}; const {in}incx: PInteger{}); stdcall;



//file name clacn2
procedure clacn2_(const {in}n: PInteger{}; const {out}v: PSComplex{ dimension (n)}; const {inout}x: PSComplex{ dimension (n)}; const {inout}est: PSingle{}; const {inout}kase: PInteger{}; const {inout}isave: PInteger{ dimension (3)}); stdcall;



//file name clacon
procedure clacon_(const {in}n: PInteger{}; const {out}v: PSComplex{ dimension (n)}; const {inout}x: PSComplex{ dimension (n)}; const {inout}est: PSingle{}; const {inout}kase: PInteger{}); stdcall;



//file name clacp2
procedure clacp2_(const {in}uplo: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}); stdcall;



//file name clacpy
procedure clacpy_(const {in}uplo: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}); stdcall;



//file name clacrm
procedure clacrm_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {in}b: PSingle{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}c: PSComplex{ dimension (ldc n)}; const {in}ldc: PInteger{}; const {out}rwork: PSingle{ dimension (2*m*n)}); stdcall;



//file name clacrt
procedure clacrt_(const {in}n: PInteger{}; const {inout}cx: PSComplex{ dimension (n)}; const {in}incx: PInteger{}; const {inout}cy: PSComplex{ dimension (n)}; const {in}incy: PInteger{}; const {in}c: PSComplex{}; const {in}s: PSComplex{}); stdcall;



//file name cladiv
function cladiv_(const {in}x: PSComplex{}; const {in}y: PSComplex{}):PSComplex{}; stdcall;



//file name claed0
procedure claed0_(const {in}qsiz: PInteger{}; const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n-1)}; const {inout}q: PSComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}iwork: PInteger{}; const {out}rwork: PSingle{}; const {out}qstore: PSComplex{ dimension (ldqs n)}; const {in}ldqs: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name claed7
procedure claed7_(const {in}n: PInteger{}; const {in}cutpnt: PInteger{}; const {in}qsiz: PInteger{}; const {in}tlvls: PInteger{}; const {in}curlvl: PInteger{}; const {in}curpbm: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}q: PSComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {in}rho: PSingle{}; const {out}indxq: PInteger{ dimension (n)}; const {out}iwork: PInteger{ dimension (4*n)}; const {out}rwork: PSingle{}; const {out}work: PSComplex{ dimension (qsiz*n)}; const {inout}qstore: PSingle{ dimension (n2+1)}; const {inout}qptr: PInteger{ dimension (n+2)}; const {in}prmptr: PInteger{ dimension (n lg n)}; const {in}perm: PInteger{ dimension (n lg n)}; const {in}givptr: PInteger{ dimension (n lg n)}; const {in}givcol: PInteger{ dimension (2 n lg n)}; const {in}givnum: PSingle{ dimension (2 n lg n)}; const {out}info: PInteger{}); stdcall;



//file name claed8
procedure claed8_(const {out}k: PInteger{}; const {in}n: PInteger{}; const {in}qsiz: PInteger{}; const {inout}q: PSComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}rho: PSingle{}; const {in}cutpnt: PInteger{}; const {in}z: PSingle{ dimension (n)}; const {out}dlamda: PSingle{ dimension (n)}; const {out}q2: PSComplex{ dimension (ldq2n)}; const {in}ldq2: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}indxp: PInteger{ dimension (n)}; const {out}indx: PInteger{ dimension (n)}; const {in}indxq: PInteger{ dimension (n)}; const {out}perm: PInteger{ dimension (n)}; const {out}givptr: PInteger{}; const {out}givcol: PInteger{ dimension (2 n)}; const {out}givnum: PSingle{ dimension (2 n)}; const {out}info: PInteger{}); stdcall;



//file name claein
procedure claein_(const {in}rightv: PBoolean{}; const {in}noinit: PBoolean{}; const {in}n: PInteger{}; const {in}h: PSComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}w: PSComplex{}; const {inout}v: PSComplex{ dimension (n)}; const {out}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}rwork: PSingle{ dimension (n)}; const {in}eps3: PSingle{}; const {in}smlnum: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name claesy
procedure claesy_(const {in}a: PSComplex{}; const {in}b: PSComplex{}; const {in}c: PSComplex{}; const {out}rt1: PSComplex{}; const {out}rt2: PSComplex{}; const {out}evscal: PSComplex{}; const {out}cs1: PSComplex{}; const {out}sn1: PSComplex{}); stdcall;



//file name claev2
procedure claev2_(const {in}a: PSComplex{}; const {in}b: PSComplex{}; const {in}c: PSComplex{}; const {out}rt1: PSingle{}; const {out}rt2: PSingle{}; const {out}cs1: PSingle{}; const {out}sn1: PSComplex{}); stdcall;



//file name clag2z
procedure clag2z_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}sa: PSComplex{ dimension (ldsan)}; const {in}ldsa: PInteger{}; const {out}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name clags2
procedure clags2_(const {in}upper: PBoolean{}; const {in}a1: PSingle{}; const {in}a2: PSComplex{}; const {in}a3: PSingle{}; const {in}b1: PSingle{}; const {in}b2: PSComplex{}; const {in}b3: PSingle{}; const {out}csu: PSingle{}; const {out}snu: PSComplex{}; const {out}csv: PSingle{}; const {out}snv: PSComplex{}; const {out}csq: PSingle{}; const {out}snq: PSComplex{}); stdcall;



//file name clagtm
procedure clagtm_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}alpha: PSingle{}; const {in}dl: PSComplex{ dimension (n-1)}; const {in}d: PSComplex{ dimension (n)}; const {in}du: PSComplex{ dimension (n-1)}; const {in}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {in}beta: PSingle{}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}); stdcall;



//file name clahef
procedure clahef_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}w: PSComplex{ dimension (ldwnb)}; const {in}ldw: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name clahef_aa
procedure clahef_aa_(const {in}uplo: PChar{*1}; const {in}j1: PInteger{}; const {in}m: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSComplex{ dimension (ldam) for}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}h: PSComplex{ workspace dimension (ldhnb)}; const {in}ldh: PInteger{}; const {out}work: PSComplex{ workspace dimension (m)}); stdcall;



//file name clahef_rk
procedure clahef_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PSComplex{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}w: PSComplex{ dimension (ldwnb)}; const {in}ldw: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name clahef_rook
procedure clahef_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}w: PSComplex{ dimension (ldwnb)}; const {in}ldw: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name clahqr
procedure clahqr_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PSComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {out}w: PSComplex{ dimension (n)}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PSComplex{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name clahr2
procedure clahr2_(const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSComplex{ dimension (ldan-k+1)}; const {in}lda: PInteger{}; const {out}tau: PSComplex{ dimension (nb)}; const {out}t: PSComplex{ dimension (ldtnb)}; const {in}ldt: PInteger{}; const {out}y: PSComplex{ dimension (ldynb)}; const {in}ldy: PInteger{}); stdcall;



//file name claic1
procedure claic1_(const {in}job: PInteger{}; const {in}j: PInteger{}; const {in}x: PSComplex{ dimension (j)}; const {in}sest: PSingle{}; const {in}w: PSComplex{ dimension (j)}; const {in}gamma: PSComplex{}; const {out}sestpr: PSingle{}; const {out}s: PSComplex{}; const {out}c: PSComplex{}); stdcall;



//file name clals0
procedure clals0_(const {in}icompq: PInteger{}; const {in}nl: PInteger{}; const {in}nr: PInteger{}; const {in}sqre: PInteger{}; const {in}nrhs: PInteger{}; const {inout}b: PSComplex{ dimension ( ldb nrhs )}; const {in}ldb: PInteger{}; const {out}bx: PSComplex{ dimension ( ldbx nrhs )}; const {in}ldbx: PInteger{}; const {in}perm: PInteger{ dimension ( n )}; const {in}givptr: PInteger{}; const {in}givcol: PInteger{ dimension ( ldgcol 2 )}; const {in}ldgcol: PInteger{}; const {in}givnum: PSingle{ dimension ( ldgnum 2 )}; const {in}ldgnum: PInteger{}; const {in}poles: PSingle{ dimension ( ldgnum 2 )}; const {in}difl: PSingle{ dimension ( k )}; const {in}difr: PSingle{ dimension ( ldgnum 2 )}; const {in}z: PSingle{ dimension ( k )}; const {in}k: PInteger{}; const {in}c: PSingle{}; const {in}s: PSingle{}; const {out}rwork: PSingle{ dimension}; const {out}info: PInteger{}); stdcall;



//file name clalsa
procedure clalsa_(const {in}icompq: PInteger{}; const {in}smlsiz: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}b: PSComplex{ dimension ( ldb nrhs )}; const {in}ldb: PInteger{}; const {out}bx: PSComplex{ dimension ( ldbx nrhs )}; const {in}ldbx: PInteger{}; const {in}u: PSingle{ dimension ( ldu smlsiz )}; const {in}ldu: PInteger{ ldu =n}; const {in}vt: PSingle{ dimension ( ldu smlsiz+1 )}; const {in}k: PInteger{ dimension ( n )}; const {in}difl: PSingle{ dimension ( ldu nlvl )}; const {in}difr: PSingle{ dimension ( ldu 2 * nlvl )}; const {in}z: PSingle{ dimension ( ldu nlvl )}; const {in}poles: PSingle{ dimension ( ldu 2 * nlvl )}; const {in}givptr: PInteger{ dimension ( n )}; const {in}givcol: PInteger{ dimension ( ldgcol 2 * nlvl )}; const {in}ldgcol: PInteger{ ldgcol =n}; const {in}perm: PInteger{ dimension ( ldgcol nlvl )}; const {in}givnum: PSingle{ dimension ( ldu 2 * nlvl )}; const {in}c: PSingle{ dimension ( n )}; const {in}s: PSingle{ dimension ( n )}; const {out}rwork: PSingle{ dimension at least}; const {out}iwork: PInteger{ dimension (3*n)}; const {out}info: PInteger{}); stdcall;



//file name clalsd
procedure clalsd_(const {in}uplo: PChar{*1}; const {in}smlsiz: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n-1)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {in}rcond: PSingle{}; const {out}rank: PInteger{}; const {out}work: PSComplex{ dimension (n * nrhs)}; const {out}rwork: PSingle{ dimension at least}; const {out}iwork: PInteger{ dimension (3*n*nlvl + 11*n)}; const {out}info: PInteger{}); stdcall;



//file name clamswlq
procedure clamswlq_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {in}a: PSComplex{ dimension}; const {in}lda: PInteger{}; const {in}t: PSComplex{ dimension}; const {in}ldt: PInteger{}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name clamtsqr
procedure clamtsqr_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {in}a: PSComplex{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}t: PSComplex{ dimension}; const {in}ldt: PInteger{}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name clangb
function clangb_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name clange
function clange_(const {in}norm: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name clangt
function clangt_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}dl: PSComplex{ dimension (n-1)}; const {in}d: PSComplex{ dimension (n)}; const {in}du: PSComplex{ dimension (n-1)}):Single{}; stdcall;



//file name clanhb
function clanhb_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name clanhe
function clanhe_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name clanhf
function clanhf_(const {in}norm: PChar{}; const {in}transr: PChar{}; const {in}uplo: PChar{}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension ( n*(n+1)/2 );}; const {out}work: PSingle{ dimension (lwork)}):Single{}; stdcall;



//file name clanhp
function clanhp_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name clanhs
function clanhs_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name clanht
function clanht_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}e: PSComplex{ dimension (n-1)}):Single{}; stdcall;



//file name clansb
function clansb_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name clansp
function clansp_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name clansy
function clansy_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name clantb
function clantb_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name clantp
function clantp_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name clantr
function clantr_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name clapll
procedure clapll_(const {in}n: PInteger{}; const {inout}x: PSComplex{ dimension (1+(n-1)*incx)}; const {in}incx: PInteger{}; const {inout}y: PSComplex{ dimension (1+(n-1)*incy)}; const {in}incy: PInteger{}; const {out}ssmin: PSingle{}); stdcall;



//file name clapmr
procedure clapmr_(const {in}forwrd: PBoolean{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}x: PSComplex{ dimension (ldxn)}; const {in}ldx: PInteger{}; const {inout}k: PInteger{ dimension (m)}); stdcall;



//file name clapmt
procedure clapmt_(const {in}forwrd: PBoolean{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}x: PSComplex{ dimension (ldxn)}; const {in}ldx: PInteger{}; const {inout}k: PInteger{ dimension (n)}); stdcall;



//file name claqgb
procedure claqgb_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {inout}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}r: PSingle{ dimension (m)}; const {in}c: PSingle{ dimension (n)}; const {in}rowcnd: PSingle{}; const {in}colcnd: PSingle{}; const {in}amax: PSingle{}; const {out}equed: PChar{*1}); stdcall;



//file name claqge
procedure claqge_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}r: PSingle{ dimension (m)}; const {in}c: PSingle{ dimension (n)}; const {in}rowcnd: PSingle{}; const {in}colcnd: PSingle{}; const {in}amax: PSingle{}; const {out}equed: PChar{*1}); stdcall;



//file name claqhb
procedure claqhb_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}s: PSingle{ dimension (n)}; const {in}scond: PSingle{}; const {in}amax: PSingle{}; const {out}equed: PChar{*1}); stdcall;



//file name claqhe
procedure claqhe_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}s: PSingle{ dimension (n)}; const {in}scond: PSingle{}; const {in}amax: PSingle{}; const {out}equed: PChar{*1}); stdcall;



//file name claqhp
procedure claqhp_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {in}s: PSingle{ dimension (n)}; const {in}scond: PSingle{}; const {in}amax: PSingle{}; const {out}equed: PChar{*1}); stdcall;



//file name claqp2
procedure claqp2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}offset: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}jpvt: PInteger{ dimension (n)}; const {out}tau: PSComplex{ dimension (min(mn))}; const {inout}vn1: PSingle{ dimension (n)}; const {inout}vn2: PSingle{ dimension (n)}; const {out}work: PSComplex{ dimension (n)}); stdcall;



//file name claqps
procedure claqps_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}offset: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}jpvt: PInteger{ dimension (n)}; const {out}tau: PSComplex{ dimension (kb)}; const {inout}vn1: PSingle{ dimension (n)}; const {inout}vn2: PSingle{ dimension (n)}; const {inout}auxv: PSComplex{ dimension (nb)}; const {inout}f: PSComplex{ dimension (ldfnb)}; const {in}ldf: PInteger{}); stdcall;



//file name claqr0
procedure claqr0_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PSComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {out}w: PSComplex{ dimension (n)}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PSComplex{ dimension (ldzihi)}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name claqr1
procedure claqr1_(const {in}n: PInteger{}; const {in}h: PSComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}s1: PSComplex{}; const {in}s2: PSComplex{}; const {out}v: PSComplex{ dimension (n)}); stdcall;



//file name claqr2
procedure claqr2_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ktop: PInteger{}; const {in}kbot: PInteger{}; const {in}nw: PInteger{}; const {inout}h: PSComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PSComplex{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}ns: PInteger{}; const {out}nd: PInteger{}; const {out}sh: PSComplex{ dimension (kbot)}; const {out}v: PSComplex{ dimension (ldvnw)}; const {in}ldv: PInteger{}; const {in}nh: PInteger{}; const {out}t: PSComplex{ dimension (ldtnw)}; const {in}ldt: PInteger{}; const {in}nv: PInteger{}; const {out}wv: PSComplex{ dimension (ldwvnw)}; const {in}ldwv: PInteger{}; const {out}work: PSComplex{ dimension (lwork)}; const {in}lwork: PInteger{}); stdcall;



//file name claqr3
procedure claqr3_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ktop: PInteger{}; const {in}kbot: PInteger{}; const {in}nw: PInteger{}; const {inout}h: PSComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PSComplex{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}ns: PInteger{}; const {out}nd: PInteger{}; const {out}sh: PSComplex{ dimension (kbot)}; const {out}v: PSComplex{ dimension (ldvnw)}; const {in}ldv: PInteger{}; const {in}nh: PInteger{}; const {out}t: PSComplex{ dimension (ldtnw)}; const {in}ldt: PInteger{}; const {in}nv: PInteger{}; const {out}wv: PSComplex{ dimension (ldwvnw)}; const {in}ldwv: PInteger{}; const {out}work: PSComplex{ dimension (lwork)}; const {in}lwork: PInteger{}); stdcall;



//file name claqr4
procedure claqr4_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PSComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {out}w: PSComplex{ dimension (n)}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PSComplex{ dimension (ldzihi)}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name claqr5
procedure claqr5_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}kacc22: PInteger{ with value 0 1 or 2}; const {in}n: PInteger{}; const {in}ktop: PInteger{}; const {in}kbot: PInteger{}; const {in}nshfts: PInteger{}; const {inout}s: PSComplex{ dimension (nshfts)}; const {inout}h: PSComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PSComplex{ dimension (ldzihiz)}; const {in}ldz: PInteger{}; const {out}v: PSComplex{ dimension (ldvnshfts/2)}; const {in}ldv: PInteger{}; const {out}u: PSComplex{ dimension (ldu2*nshfts)}; const {in}ldu: PInteger{}; const {in}nv: PInteger{}; const {out}wv: PSComplex{ dimension (ldwv2*nshfts)}; const {in}ldwv: PInteger{}; const {in}nh: PInteger{}; const {out}wh: PSComplex{ dimension (ldwhnh)}; const {in}ldwh: PInteger{}); stdcall;



//file name claqsb
procedure claqsb_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}s: PSingle{ dimension (n)}; const {in}scond: PSingle{}; const {in}amax: PSingle{}; const {out}equed: PChar{*1}); stdcall;



//file name claqsp
procedure claqsp_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {in}s: PSingle{ dimension (n)}; const {in}scond: PSingle{}; const {in}amax: PSingle{}; const {out}equed: PChar{*1}); stdcall;



//file name claqsy
procedure claqsy_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}s: PSingle{ dimension (n)}; const {in}scond: PSingle{}; const {in}amax: PSingle{}; const {out}equed: PChar{*1}); stdcall;



//file name clar1v
procedure clar1v_(const {in}n: PInteger{}; const {in}b1: PInteger{}; const {in}bn: PInteger{}; const {in}lambda: PSingle{}; const {in}l: PSingle{ dimension (n-1)}; const {in}d: PSingle{ dimension (n)}; const {in}ld: PSingle{ dimension (n-1)}; const {in}lld: PSingle{ dimension (n-1)}; const {in}pivmin: PSingle{}; const {in}gaptol: PSingle{}; const {inout}z: PSComplex{ dimension (n)}; const {in}wantnc: PBoolean{}; const {out}negcnt: PInteger{}; const {out}ztz: PSingle{}; const {out}mingma: PSingle{}; const {inout}r: PInteger{}; const {out}isuppz: PInteger{ dimension (2)}; const {out}nrminv: PSingle{}; const {out}resid: PSingle{}; const {out}rqcorr: PSingle{}; const {out}work: PSingle{ dimension (4*n)}); stdcall;



//file name clar2v
procedure clar2v_(const {in}n: PInteger{}; const {inout}x: PSComplex{ dimension (1+(n-1)*incx)}; const {inout}y: PSComplex{ dimension (1+(n-1)*incx)}; const {inout}z: PSComplex{ dimension (1+(n-1)*incx)}; const {in}incx: PInteger{}; const {in}c: PSingle{ dimension (1+(n-1)*incc)}; const {in}s: PSComplex{ dimension (1+(n-1)*incc)}; const {in}incc: PInteger{}); stdcall;



//file name clarcm
procedure clarcm_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (lda m)}; const {in}lda: PInteger{}; const {in}b: PSComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}c: PSComplex{ dimension (ldc n)}; const {in}ldc: PInteger{}; const {out}rwork: PSingle{ dimension (2*m*n)}); stdcall;



//file name clarf
procedure clarf_(const {in}side: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}v: PSComplex{ dimension}; const {in}incv: PInteger{}; const {in}tau: PSComplex{}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension}); stdcall;



//file name clarfb
procedure clarfb_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}v: PSComplex{ dimension}; const {in}ldv: PInteger{}; const {in}t: PSComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension (ldworkk)}; const {in}ldwork: PInteger{}); stdcall;



//file name clarfb_gett
procedure clarfb_gett_(const {in}ident: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}t: PSComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{}; const {in}ldwork: PInteger{}); stdcall;



//file name clarfg
procedure clarfg_(const {in}n: PInteger{}; const {inout}alpha: PSComplex{}; const {inout}x: PSComplex{ dimension}; const {in}incx: PInteger{}; const {out}tau: PSComplex{}); stdcall;



//file name clarfgp
procedure clarfgp_(const {in}n: PInteger{}; const {inout}alpha: PSComplex{}; const {inout}x: PSComplex{ dimension}; const {in}incx: PInteger{}; const {out}tau: PSComplex{}); stdcall;



//file name clarft
procedure clarft_(const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}v: PSComplex{ dimension}; const {in}ldv: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {out}t: PSComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}); stdcall;



//file name clarfx
procedure clarfx_(const {in}side: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}v: PSComplex{ dimension (m) if side = 'l'}; const {in}tau: PSComplex{}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension (n) if side = 'l'}); stdcall;



//file name clarfy
procedure clarfy_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}v: PSComplex{ dimension}; const {in}incv: PInteger{}; const {in}tau: PSComplex{}; const {inout}c: PSComplex{ dimension (ldc n)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension (n)}); stdcall;



//file name clargv
procedure clargv_(const {in}n: PInteger{}; const {inout}x: PSComplex{ dimension (1+(n-1)*incx)}; const {in}incx: PInteger{}; const {inout}y: PSComplex{ dimension (1+(n-1)*incy)}; const {in}incy: PInteger{}; const {out}c: PSingle{ dimension (1+(n-1)*incc)}; const {in}incc: PInteger{}); stdcall;



//file name clarnv
procedure clarnv_(const {in}idist: PInteger{}; const {inout}iseed: PInteger{ dimension (4)}; const {in}n: PInteger{}; const {out}x: PSComplex{ dimension (n)}); stdcall;



//file name clarrv
procedure clarrv_(const {in}n: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {inout}d: PSingle{ dimension (n)}; const {inout}l: PSingle{ dimension (n)}; const {in}pivmin: PSingle{}; const {in}isplit: PInteger{ dimension (n)}; const {in}m: PInteger{}; const {in}dol: PInteger{}; const {in}dou: PInteger{}; const {in}minrgp: PSingle{}; const {in}rtol1: PSingle{}; const {in}rtol2: PSingle{}; const {inout}w: PSingle{ dimension (n)}; const {inout}werr: PSingle{ dimension (n)}; const {inout}wgap: PSingle{ dimension (n)}; const {in}iblock: PInteger{ dimension (n)}; const {in}indexw: PInteger{ dimension (n)}; const {in}gers: PSingle{ dimension (2*n)}; const {out}z: PSComplex{ dimension (ldz max(1m) )}; const {in}ldz: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {out}work: PSingle{ dimension (12*n)}; const {out}iwork: PInteger{ dimension (7*n)}; const {out}info: PInteger{}); stdcall;



//file name clarscl2
procedure clarscl2_ (const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}d: PSingle{ length m}; const {inout}x: PSComplex{ dimension (ldxn)}; const {in}ldx: PInteger{});  stdcall;



//file name clartg
procedure clartg_(const {in}f: PSComplex{}; const {in}g: PSComplex{}; const {out}cs: PSingle{}; const {out}sn: PSComplex{}; const {out}r: PSComplex{}); stdcall;



//file name clartv
procedure clartv_(const {in}n: PInteger{}; const {inout}x: PSComplex{ dimension (1+(n-1)*incx)}; const {in}incx: PInteger{}; const {inout}y: PSComplex{ dimension (1+(n-1)*incy)}; const {in}incy: PInteger{}; const {in}c: PSingle{ dimension (1+(n-1)*incc)}; const {in}s: PSComplex{ dimension (1+(n-1)*incc)}; const {in}incc: PInteger{}); stdcall;



//file name clarz
procedure clarz_(const {in}side: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {in}v: PSComplex{ dimension (1+(l-1)*abs(incv))}; const {in}incv: PInteger{}; const {in}tau: PSComplex{}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension}); stdcall;



//file name clarzb
procedure clarzb_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}v: PSComplex{ dimension (ldvnv)}; const {in}ldv: PInteger{}; const {in}t: PSComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension (ldworkk)}; const {in}ldwork: PInteger{}); stdcall;



//file name clarzt
procedure clarzt_(const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}v: PSComplex{ dimension}; const {in}ldv: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {out}t: PSComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}); stdcall;



//file name clascl
procedure clascl_(const {in}_type: PChar{*1}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}cfrom: PSingle{}; const {in}cto: PSingle{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name clascl2
procedure clascl2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}d: PSingle{ length m}; const {inout}x: PSComplex{ dimension (ldxn)}; const {in}ldx: PInteger{});  stdcall;



//file name claset
procedure claset_(const {in}uplo: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}alpha: PSComplex{}; const {in}beta: PSComplex{}; const {out}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}); stdcall;



//file name clasr
procedure clasr_(const {in}side: PChar{*1}; const {in}pivot: PChar{*1}; const {in}direct: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}c: PSingle{ dimension}; const {in}s: PSingle{ dimension}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}); stdcall;



//file name classq
procedure classq_(const {in}n: PInteger{}; const {in}x: PSComplex{ dimension (1+(n-1)*incx)}; const {in}incx: PInteger{}; const {inout}scale: PSingle{}; const {inout}sumsq: PSingle{}); stdcall;



//file name claswlq
procedure claswlq_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSComplex{}; const {in}ldt: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name claswp
procedure claswp_(const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}k1: PInteger{}; const {in}k2: PInteger{}; const {in}ipiv: PInteger{ dimension (k1+(k2-k1)*abs(incx))}; const {in}incx: PInteger{}); stdcall;



//file name clasyf
procedure clasyf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}w: PSComplex{ dimension (ldwnb)}; const {in}ldw: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name clasyf_aa
procedure clasyf_aa_(const {in}uplo: PChar{*1}; const {in}j1: PInteger{}; const {in}m: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSComplex{ dimension (ldam) for}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (m)}; const {inout}h: PSComplex{ workspace dimension (ldhnb)}; const {in}ldh: PInteger{}; const {out}work: PSComplex{ workspace dimension (m)}); stdcall;



//file name clasyf_rk
procedure clasyf_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PSComplex{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}w: PSComplex{ dimension (ldwnb)}; const {in}ldw: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name clasyf_rook
procedure clasyf_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}w: PSComplex{ dimension (ldwnb)}; const {in}ldw: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name clatbs
procedure clatbs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}normin: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}x: PSComplex{ dimension (n)}; const {out}scale: PSingle{}; const {inout}cnorm: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name clatdf
procedure clatdf_(const {in}ijob: PInteger{}; const {in}n: PInteger{}; const {in}z: PSComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {inout}rhs: PSComplex{ dimension (n)}; const {inout}rdsum: PSingle{}; const {inout}rdscal: PSingle{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}jpiv: PInteger{ dimension (n)}); stdcall;



//file name clatps
procedure clatps_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}normin: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {inout}x: PSComplex{ dimension (n)}; const {out}scale: PSingle{}; const {inout}cnorm: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name clatrd
procedure clatrd_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PSingle{ dimension (n-1)}; const {out}tau: PSComplex{ dimension (n-1)}; const {out}w: PSComplex{ dimension (ldwnb)}; const {in}ldw: PInteger{}); stdcall;



//file name clatrs
procedure clatrs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}normin: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}x: PSComplex{ dimension (n)}; const {out}scale: PSingle{}; const {inout}cnorm: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name clatrz
procedure clatrz_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSComplex{ dimension (m)}; const {out}work: PSComplex{ dimension (m)}); stdcall;



//file name clatsqr
procedure clatsqr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSComplex{}; const {in}ldt: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name claunhr_col_getrfnp
procedure claunhr_col_getrfnp_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PSComplex{ dimension min(mn)}; const {out}info: PInteger{}); stdcall;



//file name claunhr_col_getrfnp2
procedure claunhr_col_getrfnp2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PSComplex{ dimension min(mn)}; const {out}info: PInteger{}); stdcall;



//file name clauu2
procedure clauu2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name clauum
procedure clauum_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cpbcon
procedure cpbcon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cpbequ
procedure cpbequ_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}s: PSingle{ dimension (n)}; const {out}scond: PSingle{}; const {out}amax: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name cpbrfs
procedure cpbrfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PSComplex{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cpbstf
procedure cpbstf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cpbsv
procedure cpbsv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cpbsvx
procedure cpbsvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}afb: PSComplex{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {inout}equed: PChar{*1}; const {inout}s: PSingle{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cpbtf2
procedure cpbtf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cpbtrf
procedure cpbtrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cpbtrs
procedure cpbtrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cpftrf
procedure cpftrf_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension ( n*(n+1)/2 );}; const {out}info: PInteger{}); stdcall;



//file name cpftri
procedure cpftri_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension ( n*(n+1)/2 );}; const {out}info: PInteger{}); stdcall;



//file name cpftrs
procedure cpftrs_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension ( n*(n+1)/2 );}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cpocon
procedure cpocon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cpoequ
procedure cpoequ_(const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PSingle{ dimension (n)}; const {out}scond: PSingle{}; const {out}amax: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name cpoequb
procedure cpoequb_(const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PSingle{ dimension (n)}; const {out}scond: PSingle{}; const {out}amax: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name cporfs
procedure cporfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cporfsx
procedure cporfsx_(const {in}uplo: PChar{*1}; const {in}equed: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}s: PSingle{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}berr: PSingle{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PSingle{ dimension nparams}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name cposv
procedure cposv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cposvx
procedure cposvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}equed: PChar{*1}; const {inout}s: PSingle{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cposvxx
procedure cposvxx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}equed: PChar{*1}; const {inout}s: PSingle{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}rpvgrw: PSingle{}; const {out}berr: PSingle{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PSingle{ dimension nparams}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name cpotf2
procedure cpotf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cpotrf
procedure cpotrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cpotrf2
procedure cpotrf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cpotri
procedure cpotri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cpotrs
procedure cpotrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cppcon
procedure cppcon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cppequ
procedure cppequ_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {out}s: PSingle{ dimension (n)}; const {out}scond: PSingle{}; const {out}amax: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name cpprfs
procedure cpprfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {in}afp: PSComplex{ dimension (n*(n+1)/2)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cppsv
procedure cppsv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cppsvx
procedure cppsvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {inout}afp: PSComplex{ dimension (n*(n+1)/2)}; const {inout}equed: PChar{*1}; const {inout}s: PSingle{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cpptrf
procedure cpptrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {out}info: PInteger{}); stdcall;



//file name cpptri
procedure cpptri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {out}info: PInteger{}); stdcall;



//file name cpptrs
procedure cpptrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cpstf2
procedure cpstf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {out}piv: PInteger{ dimension (n)}; const {out}rank: PInteger{}; const {in}tol: PSingle{}; const {in}lda: PInteger{}; const {out}work: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name cpstrf
procedure cpstrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}piv: PInteger{ dimension (n)}; const {out}rank: PInteger{}; const {in}tol: PSingle{}; const {out}work: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name cptcon
procedure cptcon_(const {in}n: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}e: PSComplex{ dimension (n-1)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cpteqr
procedure cpteqr_(const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n-1)}; const {inout}z: PSComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (4*n)}; const {out}info: PInteger{}); stdcall;



//file name cptrfs
procedure cptrfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}e: PSComplex{ dimension (n-1)}; const {in}df: PSingle{ dimension (n)}; const {in}ef: PSComplex{ dimension (n-1)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cptsv
procedure cptsv_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSComplex{ dimension (n-1)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cptsvx
procedure cptsvx_(const {in}fact: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}e: PSComplex{ dimension (n-1)}; const {inout}df: PSingle{ dimension (n)}; const {inout}ef: PSComplex{ dimension (n-1)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cpttrf
procedure cpttrf_(const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSComplex{ dimension (n-1)}; const {out}info: PInteger{}); stdcall;



//file name cpttrs
procedure cpttrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}e: PSComplex{ dimension (n-1)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cptts2
procedure cptts2_(const {in}iuplo: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}e: PSComplex{ dimension (n-1)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}); stdcall;



//file name crot
procedure crot_(const {in}n: PInteger{}; const {inout}cx: PSComplex{ dimension (n)}; const {in}incx: PInteger{}; const {inout}cy: PSComplex{ dimension (n)}; const {in}incy: PInteger{}; const {in}c: PSingle{}; const {in}s: PSComplex{}); stdcall;



//file name cspcon
procedure cspcon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name cspmv
procedure cspmv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}alpha: PSComplex{}; const {in}ap: PSComplex{ dimension at least}; const {in}x: PSComplex{ dimension at least}; const {in}incx: PInteger{}; const {in}beta: PSComplex{}; const {inout}y: PSComplex{ dimension at least}; const {in}incy: PInteger{}); stdcall;



//file name cspr
procedure cspr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}alpha: PSComplex{}; const {in}x: PSComplex{ dimension at least}; const {in}incx: PInteger{}; const {inout}ap: PSComplex{ dimension at least}); stdcall;



//file name csprfs
procedure csprfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {in}afp: PSComplex{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cspsv
procedure cspsv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cspsvx
procedure cspsvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {inout}afp: PSComplex{ dimension (n*(n+1)/2)}; const {inout}ipiv: PInteger{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name csptrf
procedure csptrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name csptri
procedure csptri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name csptrs
procedure csptrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csrscl
procedure csrscl_(const {in}n: PInteger{}; const {in}sa: PSingle{}; const {inout}sx: PSComplex{ dimension}; const {in}incx: PInteger{}); stdcall;



//file name cstedc
procedure cstedc_(const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n-1)}; const {inout}z: PSComplex{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (max(1lrwork))}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cstegr
procedure cstegr_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n)}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz max(1m) )}; const {in}ldz: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (liwork)}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cstein
procedure cstein_(const {in}n: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}e: PSingle{ dimension (n-1)}; const {in}m: PInteger{}; const {in}w: PSingle{ dimension (n)}; const {in}iblock: PInteger{ dimension (n)}; const {in}isplit: PInteger{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz m)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (5*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}ifail: PInteger{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name cstemr
procedure cstemr_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n)}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSComplex{ dimension (ldz max(1m) )}; const {in}ldz: PInteger{}; const {in}nzc: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {inout}tryrac: PBoolean{}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (liwork)}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csteqr
procedure csteqr_(const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n-1)}; const {inout}z: PSComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (max(12*n-2))}; const {out}info: PInteger{}); stdcall;



//file name csycon
procedure csycon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name csycon_3
procedure csycon_3_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PSComplex{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name csycon_rook
procedure csycon_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name csyconv
procedure csyconv_(const {in}uplo: PChar{*1}; const {in}way: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}e: PSComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name csyconvf
procedure csyconvf_(const {in}uplo: PChar{*1}; const {in}way: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}e: PSComplex{ dimension (n)}; const {inout}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name csyconvf_rook
procedure csyconvf_rook_(const {in}uplo: PChar{*1}; const {in}way: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}e: PSComplex{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name csyequb
procedure csyequb_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PSingle{ dimension (n)}; const {out}scond: PSingle{}; const {out}amax: PSingle{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name csymv
procedure csymv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}alpha: PSComplex{}; const {in}a: PSComplex{ dimension ( lda n )}; const {in}lda: PInteger{}; const {in}x: PSComplex{ dimension at least}; const {in}incx: PInteger{}; const {in}beta: PSComplex{}; const {inout}y: PSComplex{ dimension at least}; const {in}incy: PInteger{}); stdcall;



//file name csyr
procedure csyr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}alpha: PSComplex{}; const {in}x: PSComplex{ dimension at least}; const {in}incx: PInteger{}; const {inout}a: PSComplex{ dimension ( lda n )}; const {in}lda: PInteger{}); stdcall;



//file name csyrfs
procedure csyrfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name csyrfsx
procedure csyrfsx_(const {in}uplo: PChar{*1}; const {in}equed: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}s: PSingle{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}berr: PSingle{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PSingle{ dimension nparams}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name csysv
procedure csysv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csysv_aa
procedure csysv_aa_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csysv_aa_2stage
procedure csysv_aa_2stage_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tb: PSComplex{ dimension (ltb)}; const {in}ltb: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}ipiv2: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{ workspace of size lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csysv_rk
procedure csysv_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PSComplex{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{ dimension ( max(1lwork) )}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csysv_rook
procedure csysv_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csysvx
procedure csysvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name csysvxx
procedure csysvxx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PSComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}s: PSingle{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}rpvgrw: PSingle{}; const {out}berr: PSingle{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PSingle{ dimension nparams}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name csyswapr
procedure csyswapr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}i1: PInteger{}; const {in}i2: PInteger{}); stdcall;



//file name csytf2
procedure csytf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name csytf2_rk
procedure csytf2_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PSComplex{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name csytf2_rook
procedure csytf2_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name csytrf
procedure csytrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csytrf_aa
procedure csytrf_aa_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csytrf_aa_2stage
procedure csytrf_aa_2stage_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tb: PSComplex{ dimension (ltb)}; const {in}ltb: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}ipiv2: PInteger{ dimension (n)}; const {out}work: PSComplex{ workspace of size lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csytrf_rk
procedure csytrf_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PSComplex{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension ( max(1lwork) )}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csytrf_rook
procedure csytrf_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csytri
procedure csytri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name csytri_3
procedure csytri_3_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PSComplex{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (n+nb+1)*(nb+3)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csytri_3x
procedure csytri_3x_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PSComplex{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (n+nb+1nb+3)}; const {in}nb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csytri_rook
procedure csytri_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name csytri2
procedure csytri2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (n+nb+1)*(nb+3)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csytri2x
procedure csytri2x_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSComplex{ dimension (n+nb+1nb+3)}; const {in}nb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csytrs
procedure csytrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csytrs_3
procedure csytrs_3_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PSComplex{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csytrs_aa
procedure csytrs_aa_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csytrs_aa_2stage
procedure csytrs_aa_2stage_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tb: PSComplex{ dimension (ltb)}; const {in}ltb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}ipiv2: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csytrs_rook
procedure csytrs_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name csytrs2
procedure csytrs2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ctbcon
procedure ctbcon_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}rcond: PSingle{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ctbrfs
procedure ctbrfs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {in}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ctbtrs
procedure ctbtrs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PSComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ctfsm
procedure ctfsm_(const {in}transr: PChar{*1}; const {in}side: PChar{*1}; const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}alpha: PSComplex{}; const {in}a: PSComplex{ dimension (n*(n+1)/2)}; const {inout}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}); stdcall;



//file name ctftri
procedure ctftri_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension ( n*(n+1)/2 );}; const {out}info: PInteger{}); stdcall;



//file name ctfttp
procedure ctfttp_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}arf: PSComplex{ dimension ( n*(n+1)/2 )}; const {out}ap: PSComplex{ dimension ( n*(n+1)/2 )}; const {out}info: PInteger{}); stdcall;



//file name ctfttr
procedure ctfttr_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}arf: PSComplex{ dimension ( n*(n+1)/2 )}; const {out}a: PSComplex{ dimension ( lda n )}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ctgevc
procedure ctgevc_(const {in}side: PChar{*1}; const {in}howmny: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}s: PSComplex{ dimension (ldsn)}; const {in}lds: PInteger{}; const {in}p: PSComplex{ dimension (ldpn)}; const {in}ldp: PInteger{}; const {inout}vl: PSComplex{ dimension (ldvlmm)}; const {in}ldvl: PInteger{}; const {inout}vr: PSComplex{ dimension (ldvrmm)}; const {in}ldvr: PInteger{}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name ctgex2
procedure ctgex2_(const {in}wantq: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {inout}q: PSComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {inout}z: PSComplex{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {in}j1: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ctgexc
procedure ctgexc_(const {in}wantq: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {inout}q: PSComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {inout}z: PSComplex{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {in}ifst: PInteger{}; const {inout}ilst: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ctgsen
procedure ctgsen_(const {in}ijob: PInteger{}; const {in}wantq: PBoolean{}; const {in}wantz: PBoolean{}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension(ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension(ldbn)}; const {in}ldb: PInteger{}; const {out}alpha: PSComplex{ dimension (n)}; const {out}beta: PSComplex{ dimension (n)}; const {inout}q: PSComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {inout}z: PSComplex{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}m: PInteger{}; const {out}pl: PSingle{}; const {out}pr: PSingle{}; const {out}dif: PSingle{ dimension (2)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ctgsja
procedure ctgsja_(const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}jobq: PChar{*1}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {in}tola: PSingle{}; const {in}tolb: PSingle{}; const {out}alpha: PSingle{ dimension (n)}; const {out}beta: PSingle{ dimension (n)}; const {inout}u: PSComplex{ dimension (ldum)}; const {in}ldu: PInteger{}; const {inout}v: PSComplex{ dimension (ldvp)}; const {in}ldv: PInteger{}; const {inout}q: PSComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}ncycle: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ctgsna
procedure ctgsna_(const {in}job: PChar{*1}; const {in}howmny: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {in}vl: PSComplex{ dimension (ldvlm)}; const {in}ldvl: PInteger{}; const {in}vr: PSComplex{ dimension (ldvrm)}; const {in}ldvr: PInteger{}; const {out}s: PSingle{ dimension (mm)}; const {out}dif: PSingle{ dimension (mm)}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (n+2)}; const {out}info: PInteger{}); stdcall;



//file name ctgsy2
procedure ctgsy2_(const {in}trans: PChar{*1}; const {in}ijob: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (lda m)}; const {in}lda: PInteger{}; const {in}b: PSComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {inout}c: PSComplex{ dimension (ldc n)}; const {in}ldc: PInteger{}; const {in}d: PSComplex{ dimension (ldd m)}; const {in}ldd: PInteger{}; const {in}e: PSComplex{ dimension (lde n)}; const {in}lde: PInteger{}; const {inout}f: PSComplex{ dimension (ldf n)}; const {in}ldf: PInteger{}; const {out}scale: PSingle{}; const {inout}rdsum: PSingle{}; const {inout}rdscal: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name ctgsyl
procedure ctgsyl_(const {in}trans: PChar{*1}; const {in}ijob: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (lda m)}; const {in}lda: PInteger{}; const {in}b: PSComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {inout}c: PSComplex{ dimension (ldc n)}; const {in}ldc: PInteger{}; const {in}d: PSComplex{ dimension (ldd m)}; const {in}ldd: PInteger{}; const {in}e: PSComplex{ dimension (lde n)}; const {in}lde: PInteger{}; const {inout}f: PSComplex{ dimension (ldf n)}; const {in}ldf: PInteger{}; const {out}dif: PSingle{}; const {out}scale: PSingle{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (m+n+2)}; const {out}info: PInteger{}); stdcall;



//file name ctpcon
procedure ctpcon_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {out}rcond: PSingle{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ctplqt
procedure ctplqt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {in}mb: PInteger{}; const {inout}a: PSComplex{ dimension (ldam)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}t: PSComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}work: PSComplex{ dimension (mb*m)}; const {out}info: PInteger{}); stdcall;



//file name ctplqt2
procedure ctplqt2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {inout}a: PSComplex{ dimension (ldam)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}t: PSComplex{ dimension (ldtm)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ctpmlqt
procedure ctpmlqt_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}mb: PInteger{}; const {in}v: PSComplex{ dimension (ldvk)}; const {in}ldv: PInteger{}; const {in}t: PSComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}a: PSComplex{ dimension}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{ the dimension of work is}; const {out}info: PInteger{}); stdcall;



//file name ctpmqrt
procedure ctpmqrt_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}nb: PInteger{}; const {in}v: PSComplex{ dimension (ldvk)}; const {in}ldv: PInteger{}; const {in}t: PSComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}a: PSComplex{ dimension}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{ the dimension of work is}; const {out}info: PInteger{}); stdcall;



//file name ctpqrt
procedure ctpqrt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}t: PSComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}work: PSComplex{ dimension (nb*n)}; const {out}info: PInteger{}); stdcall;



//file name ctpqrt2
procedure ctpqrt2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}t: PSComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ctprfb
procedure ctprfb_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}v: PSComplex{ dimension}; const {in}ldv: PInteger{}; const {in}t: PSComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}a: PSComplex{ dimension}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}work: PSComplex{ dimension}; const {in}ldwork: PInteger{}); stdcall;



//file name ctprfs
procedure ctprfs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {in}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ctptri
procedure ctptri_(const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSComplex{ dimension (n*(n+1)/2)}; const {out}info: PInteger{}); stdcall;



//file name ctptrs
procedure ctptrs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ctpttf
procedure ctpttf_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSComplex{ dimension ( n*(n+1)/2 )}; const {out}arf: PSComplex{ dimension ( n*(n+1)/2 )}; const {out}info: PInteger{}); stdcall;



//file name ctpttr
procedure ctpttr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSComplex{ dimension ( n*(n+1)/2 )}; const {out}a: PSComplex{ dimension ( lda n )}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ctrcon
procedure ctrcon_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}rcond: PSingle{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ctrevc
procedure ctrevc_(const {in}side: PChar{*1}; const {in}howmny: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {inout}t: PSComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {inout}vl: PSComplex{ dimension (ldvlmm)}; const {in}ldvl: PInteger{}; const {inout}vr: PSComplex{ dimension (ldvrmm)}; const {in}ldvr: PInteger{}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ctrevc3
procedure ctrevc3_(const {in}side: PChar{*1}; const {in}howmny: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {inout}t: PSComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {inout}vl: PSComplex{ dimension (ldvlmm)}; const {in}ldvl: PInteger{}; const {inout}vr: PSComplex{ dimension (ldvrmm)}; const {in}ldvr: PInteger{}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (lrwork)}; const {in}lrwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ctrexc
procedure ctrexc_(const {in}compq: PChar{*1}; const {in}n: PInteger{}; const {inout}t: PSComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {inout}q: PSComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {in}ifst: PInteger{}; const {in}ilst: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ctrrfs
procedure ctrrfs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {in}x: PSComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSComplex{ dimension (2*n)}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ctrsen
procedure ctrsen_(const {in}job: PChar{*1}; const {in}compq: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {inout}t: PSComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {inout}q: PSComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}w: PSComplex{ dimension (n)}; const {out}m: PInteger{}; const {out}s: PSingle{}; const {out}sep: PSingle{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ctrsna
procedure ctrsna_(const {in}job: PChar{*1}; const {in}howmny: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}t: PSComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {in}vl: PSComplex{ dimension (ldvlm)}; const {in}ldvl: PInteger{}; const {in}vr: PSComplex{ dimension (ldvrm)}; const {in}ldvr: PInteger{}; const {out}s: PSingle{ dimension (mm)}; const {out}sep: PSingle{ dimension (mm)}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PSComplex{ dimension (ldworkn+6)}; const {in}ldwork: PInteger{}; const {out}rwork: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ctrsyl
procedure ctrsyl_(const {in}trana: PChar{*1}; const {in}tranb: PChar{*1}; const {in}isgn: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldam)}; const {in}lda: PInteger{}; const {in}b: PSComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}scale: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name ctrti2
procedure ctrti2_(const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ctrtri
procedure ctrtri_(const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ctrtrs
procedure ctrtrs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ctrttf
procedure ctrttf_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension ( lda n )}; const {in}lda: PInteger{}; const {out}arf: PSComplex{ dimension ( n*(n+1)/2 )}; const {out}info: PInteger{}); stdcall;



//file name ctrttp
procedure ctrttp_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ap: PSComplex{ dimension ( n*(n+1)/2 )}; const {out}info: PInteger{}); stdcall;



//file name ctzrzf
procedure ctzrzf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSComplex{ dimension (m)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cunbdb
procedure cunbdb_(const {in}trans: PChar{}; const {in}signs: PChar{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PSComplex{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x12: PSComplex{ dimension (ldx12m-q)}; const {in}ldx12: PInteger{}; const {inout}x21: PSComplex{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {inout}x22: PSComplex{ dimension (ldx22m-q)}; const {in}ldx22: PInteger{}; const {out}theta: PSingle{ dimension (q)}; const {out}phi: PSingle{ dimension (q-1)}; const {out}taup1: PSComplex{ dimension (p)}; const {out}taup2: PSComplex{ dimension (m-p)}; const {out}tauq1: PSComplex{ dimension (q)}; const {out}tauq2: PSComplex{ dimension (m-q)}; const {out}work: PSComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cunbdb1
procedure cunbdb1_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PSComplex{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PSComplex{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PSingle{ dimension (q)}; const {out}phi: PSingle{ dimension (q-1)}; const {out}taup1: PSComplex{ dimension (p)}; const {out}taup2: PSComplex{ dimension (m-p)}; const {out}tauq1: PSComplex{ dimension (q)}; const {out}work: PSComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cunbdb2
procedure cunbdb2_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PSComplex{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PSComplex{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PSingle{ dimension (q)}; const {out}phi: PSingle{ dimension (q-1)}; const {out}taup1: PSComplex{ dimension (p)}; const {out}taup2: PSComplex{ dimension (m-p)}; const {out}tauq1: PSComplex{ dimension (q)}; const {out}work: PSComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cunbdb3
procedure cunbdb3_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PSComplex{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PSComplex{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PSingle{ dimension (q)}; const {out}phi: PSingle{ dimension (q-1)}; const {out}taup1: PSComplex{ dimension (p)}; const {out}taup2: PSComplex{ dimension (m-p)}; const {out}tauq1: PSComplex{ dimension (q)}; const {out}work: PSComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cunbdb4
procedure cunbdb4_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PSComplex{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PSComplex{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PSingle{ dimension (q)}; const {out}phi: PSingle{ dimension (q-1)}; const {out}taup1: PSComplex{ dimension (p)}; const {out}taup2: PSComplex{ dimension (m-p)}; const {out}tauq1: PSComplex{ dimension (q)}; const {out}phantom: PSComplex{ dimension (m)}; const {out}work: PSComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cunbdb5
procedure cunbdb5_(const {in}m1: PInteger{}; const {in}m2: PInteger{}; const {in}n: PInteger{}; const {inout}x1: PSComplex{ dimension (m1)}; const {in}incx1: PInteger{}; const {inout}x2: PSComplex{ dimension (m2)}; const {in}incx2: PInteger{}; const {in}q1: PSComplex{ dimension (ldq1 n)}; const {in}ldq1: PInteger{}; const {in}q2: PSComplex{ dimension (ldq2 n)}; const {in}ldq2: PInteger{}; const {out}work: PSComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cunbdb6
procedure cunbdb6_(const {in}m1: PInteger{}; const {in}m2: PInteger{}; const {in}n: PInteger{}; const {inout}x1: PSComplex{ dimension (m1)}; const {in}incx1: PInteger{}; const {inout}x2: PSComplex{ dimension (m2)}; const {in}incx2: PInteger{}; const {in}q1: PSComplex{ dimension (ldq1 n)}; const {in}ldq1: PInteger{}; const {in}q2: PSComplex{ dimension (ldq2 n)}; const {in}ldq2: PInteger{}; const {out}work: PSComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cuncsd
procedure cuncsd_(const {in}jobu1: PChar{}; const {in}jobu2: PChar{}; const {in}jobv1t: PChar{}; const {in}jobv2t: PChar{}; const {in}trans: PChar{}; const {in}signs: PChar{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PSComplex{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x12: PSComplex{ dimension (ldx12m-q)}; const {in}ldx12: PInteger{}; const {inout}x21: PSComplex{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {inout}x22: PSComplex{ dimension (ldx22m-q)}; const {in}ldx22: PInteger{}; const {out}theta: PSingle{ dimension (r) in which r =}; const {out}u1: PSComplex{ dimension (ldu1p)}; const {in}ldu1: PInteger{}; const {out}u2: PSComplex{ dimension (ldu2m-p)}; const {in}ldu2: PInteger{}; const {out}v1t: PSComplex{ dimension (ldv1tq)}; const {in}ldv1t: PInteger{}; const {out}v2t: PSComplex{ dimension (ldv2tm-q)}; const {in}ldv2t: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension max(1lrwork)}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (m-min(pm-pqm-q))}; const {out}info: PInteger{}); stdcall;



//file name cuncsd2by1
procedure cuncsd2by1_(const {in}jobu1: PChar{}; const {in}jobu2: PChar{}; const {in}jobv1t: PChar{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PSComplex{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PSComplex{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PSingle{ dimension (r) in which r =}; const {out}u1: PSComplex{ dimension (p)}; const {in}ldu1: PInteger{}; const {out}u2: PSComplex{ dimension (m-p)}; const {in}ldu2: PInteger{}; const {out}v1t: PSComplex{ dimension (q)}; const {in}ldv1t: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (max(1lrwork))}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (m-min(pm-pqm-q))}; const {out}info: PInteger{}); stdcall;



//file name cung2l
procedure cung2l_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {out}work: PSComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cung2r
procedure cung2r_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {out}work: PSComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name cungbr
procedure cungbr_(const {in}vect: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cunghr
procedure cunghr_(const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (n-1)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cungl2
procedure cungl2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {out}work: PSComplex{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name cunglq
procedure cunglq_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cungql
procedure cungql_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cungqr
procedure cungqr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cungr2
procedure cungr2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {out}work: PSComplex{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name cungrq
procedure cungrq_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cungtr
procedure cungtr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (n-1)}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cungtsqr
procedure cungtsqr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}t: PSComplex{}; const {in}ldt: PInteger{}; const {out}work: PSComplex{ dimension (max(2lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cungtsqr_row
procedure cungtsqr_row_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}t: PSComplex{}; const {in}ldt: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cunhr_col
procedure cunhr_col_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSComplex{}; const {in}ldt: PInteger{}; const {out}d: PSComplex{ dimension min(mn)}; const {out}info: PInteger{}); stdcall;



//file name cunm2l
procedure cunm2l_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSComplex{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension}; const {out}info: PInteger{}); stdcall;



//file name cunm2r
procedure cunm2r_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSComplex{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension}; const {out}info: PInteger{}); stdcall;



//file name cunm22
procedure cunm22_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}n1: PInteger{}; const {in}n2: PInteger{}; const {in}q: PSComplex{ dimension}; const {in}ldq: PInteger{}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cunmbr
procedure cunmbr_(const {in}vect: PChar{*1}; const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSComplex{ dimension}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (min(nqk))}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cunmhr
procedure cunmhr_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {in}a: PSComplex{ dimension}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cunml2
procedure cunml2_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSComplex{ dimension}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension}; const {out}info: PInteger{}); stdcall;



//file name cunmlq
procedure cunmlq_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSComplex{ dimension}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cunmql
procedure cunmql_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSComplex{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cunmqr
procedure cunmqr_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSComplex{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cunmr2
procedure cunmr2_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSComplex{ dimension}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension}; const {out}info: PInteger{}); stdcall;



//file name cunmr3
procedure cunmr3_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}a: PSComplex{ dimension}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension}; const {out}info: PInteger{}); stdcall;



//file name cunmrq
procedure cunmrq_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSComplex{ dimension}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cunmrz
procedure cunmrz_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}a: PSComplex{ dimension}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension (k)}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cunmtr
procedure cunmtr_(const {in}side: PChar{*1}; const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension}; const {in}lda: PInteger{}; const {in}tau: PSComplex{ dimension}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name cupgtr
procedure cupgtr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSComplex{ dimension (n*(n+1)/2)}; const {in}tau: PSComplex{ dimension (n-1)}; const {out}q: PSComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}work: PSComplex{ dimension (n-1)}; const {out}info: PInteger{}); stdcall;



//file name cupmtr
procedure cupmtr_(const {in}side: PChar{*1}; const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}ap: PSComplex{ dimension}; const {in}tau: PSComplex{ dimension (m-1) if side = 'l'}; const {inout}c: PSComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSComplex{ dimension}; const {out}info: PInteger{}); stdcall;



//file name dbbcsd
procedure dbbcsd_(const {in}jobu1: PChar{}; const {in}jobu2: PChar{}; const {in}jobv1t: PChar{}; const {in}jobv2t: PChar{}; const {in}trans: PChar{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}theta: PDouble{ dimension (q)}; const {inout}phi: PDouble{ dimension (q-1)}; const {inout}u1: PDouble{ dimension (ldu1p)}; const {in}ldu1: PInteger{}; const {inout}u2: PDouble{ dimension (ldu2m-p)}; const {in}ldu2: PInteger{}; const {inout}v1t: PDouble{ dimension (ldv1tq)}; const {in}ldv1t: PInteger{}; const {inout}v2t: PDouble{ dimension (ldv2tm-q)}; const {in}ldv2t: PInteger{}; const {out}b11d: PDouble{ dimension (q)}; const {out}b11e: PDouble{ dimension (q-1)}; const {out}b12d: PDouble{ dimension (q)}; const {out}b12e: PDouble{ dimension (q-1)}; const {out}b21d: PDouble{array dimension (q)}; const {out}b21e: PDouble{array dimension (q-1)}; const {out}b22d: PDouble{array dimension (q)}; const {out}b22e: PDouble{array dimension (q-1)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dbdsdc
procedure dbdsdc_(const {in}uplo: PChar{*1}; const {in}compq: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n-1)}; const {out}u: PDouble{ dimension (ldun)}; const {in}ldu: PInteger{}; const {out}vt: PDouble{ dimension (ldvtn)}; const {in}ldvt: PInteger{}; const {out}q: PDouble{ dimension (ldq)}; const {out}iq: PInteger{ dimension (ldiq)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {out}iwork: PInteger{ dimension (8*n)}; const {out}info: PInteger{}); stdcall;



//file name dbdsqr
procedure dbdsqr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ncvt: PInteger{}; const {in}nru: PInteger{}; const {in}ncc: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n-1)}; const {inout}vt: PDouble{ dimension (ldvt ncvt)}; const {in}ldvt: PInteger{}; const {inout}u: PDouble{ dimension (ldu n)}; const {in}ldu: PInteger{}; const {inout}c: PDouble{ dimension (ldc ncc)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension (4*(n-1))}; const {out}info: PInteger{}); stdcall;



//file name dbdsvdx
procedure dbdsvdx_(const {in}uplo: PChar{*1}; const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}n: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}e: PDouble{ dimension (max(1n-1))}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {out}ns: PInteger{}; const {out}s: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (2*nk)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (14*n)}; const {out}iwork: PInteger{ dimension (12*n)}; const {out}info: PInteger{}); stdcall;



//file name dcombssq
procedure dcombssq_(const {inout}v1: PDouble{ dimension (2)}; const {in}v2: PDouble{ dimension (2)}); stdcall;



//file name ddisna
procedure ddisna_(const {in}job: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}d: PDouble{ dimension (m) if job = 'e'}; const {out}sep: PDouble{ dimension (m) if job = 'e'}; const {out}info: PInteger{}); stdcall;



//file name dgbbrd
procedure dgbbrd_(const {in}vect: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}ncc: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {inout}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}d: PDouble{ dimension (min(mn))}; const {out}e: PDouble{ dimension (min(mn)-1)}; const {out}q: PDouble{ dimension (ldqm)}; const {in}ldq: PInteger{}; const {out}pt: PDouble{ dimension (ldptn)}; const {in}ldpt: PInteger{}; const {inout}c: PDouble{ dimension (ldcncc)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension (2*max(mn))}; const {out}info: PInteger{}); stdcall;



//file name dgbcon
procedure dgbcon_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgbequ
procedure dgbequ_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}r: PDouble{ dimension (m)}; const {out}c: PDouble{ dimension (n)}; const {out}rowcnd: PDouble{}; const {out}colcnd: PDouble{}; const {out}amax: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name dgbequb
procedure dgbequb_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}r: PDouble{ dimension (m)}; const {out}c: PDouble{ dimension (n)}; const {out}rowcnd: PDouble{}; const {out}colcnd: PDouble{}; const {out}amax: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name dgbrfs
procedure dgbrfs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PDouble{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgbrfsx
procedure dgbrfsx_(const {in}trans: PChar{*1}; const {in}equed: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PDouble{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}r: PDouble{ dimension (n)}; const {inout}c: PDouble{ dimension (n)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}berr: PDouble{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PDouble{ dimension (nparams)}; const {out}work: PDouble{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgbsv
procedure dgbsv_(const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgbsvx
procedure dgbsvx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}afb: PDouble{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}r: PDouble{ dimension (n)}; const {inout}c: PDouble{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgbsvxx
procedure dgbsvxx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}afb: PDouble{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}r: PDouble{ dimension (n)}; const {inout}c: PDouble{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}rpvgrw: PDouble{}; const {out}berr: PDouble{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PDouble{ dimension (nparams)}; const {out}work: PDouble{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgbtf2
procedure dgbtf2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {inout}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name dgbtrf
procedure dgbtrf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {inout}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name dgbtrs
procedure dgbtrs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgebak
procedure dgebak_(const {in}job: PChar{*1}; const {in}side: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {in}scale: PDouble{ dimension (n)}; const {in}m: PInteger{}; const {inout}v: PDouble{ dimension (ldvm)}; const {in}ldv: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgebal
procedure dgebal_(const {in}job: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ilo: PInteger{}; const {out}ihi: PInteger{}; const {out}scale: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgebd2
procedure dgebd2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PDouble{ dimension (min(mn))}; const {out}e: PDouble{ dimension (min(mn)-1)}; const {out}tauq: PDouble{ dimension (min(mn))}; const {out}taup: PDouble{ dimension (min(mn))}; const {out}work: PDouble{ dimension (max(mn))}; const {out}info: PInteger{}); stdcall;



//file name dgebrd
procedure dgebrd_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PDouble{ dimension (min(mn))}; const {out}e: PDouble{ dimension (min(mn)-1)}; const {out}tauq: PDouble{ dimension (min(mn))}; const {out}taup: PDouble{ dimension (min(mn))}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgecon
procedure dgecon_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDouble{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgeequ
procedure dgeequ_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}r: PDouble{ dimension (m)}; const {out}c: PDouble{ dimension (n)}; const {out}rowcnd: PDouble{}; const {out}colcnd: PDouble{}; const {out}amax: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name dgeequb
procedure dgeequb_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}r: PDouble{ dimension (m)}; const {out}c: PDouble{ dimension (n)}; const {out}rowcnd: PDouble{}; const {out}colcnd: PDouble{}; const {out}amax: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name dgees
procedure dgees_(const {in}jobvs: PChar{*1}; const {in}sort: PChar{*1}; const {in}select: TLFunc<PDouble,PDouble>{ of two PDouble{ arguments}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}sdim: PInteger{}; const {out}wr: PDouble{ dimension (n)}; const {out}wi: PDouble{ dimension (n)}; const {out}vs: PDouble{ dimension (ldvsn)}; const {in}ldvs: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgeesx
procedure dgeesx_(const {in}jobvs: PChar{*1}; const {in}sort: PChar{*1}; const {in}select: TLFunc<PDouble, PDouble>{ of two PDouble{ arguments}; const {in}sense: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}sdim: PInteger{}; const {out}wr: PDouble{ dimension (n)}; const {out}wi: PDouble{ dimension (n)}; const {out}vs: PDouble{ dimension (ldvsn)}; const {in}ldvs: PInteger{}; const {out}rconde: PDouble{}; const {out}rcondv: PDouble{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgeev
procedure dgeev_(const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}wr: PDouble{ dimension (n)}; const {out}wi: PDouble{ dimension (n)}; const {out}vl: PDouble{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PDouble{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgeevx
procedure dgeevx_(const {in}balanc: PChar{*1}; const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}sense: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}wr: PDouble{ dimension (n)}; const {out}wi: PDouble{ dimension (n)}; const {out}vl: PDouble{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PDouble{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}ilo: PInteger{}; const {out}ihi: PInteger{}; const {out}scale: PDouble{ dimension (n)}; const {out}abnrm: PDouble{}; const {out}rconde: PDouble{ dimension (n)}; const {out}rcondv: PDouble{ dimension (n)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (2*n-2)}; const {out}info: PInteger{}); stdcall;



//file name dgehd2
procedure dgehd2_(const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDouble{ dimension (n-1)}; const {out}work: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgehrd
procedure dgehrd_(const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDouble{ dimension (n-1)}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgejsv
procedure dgejsv_(const {in}joba: PChar{*1}; const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}jobr: PChar{*1}; const {in}jobt: PChar{*1}; const {in}jobp: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}sva: PDouble{ dimension (n)}; const {out}u: PDouble{ dimension ( ldu n )}; const {in}ldu: PInteger{}; const {out}v: PDouble{ dimension ( ldv n )}; const {in}ldv: PInteger{}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (m+3*n)}; const {out}info: PInteger{});stdcall;



//file name dgelq
procedure dgelq_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDouble{ dimension (max(5tsize))}; const {in}tsize: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgelq2
procedure dgelq2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDouble{ dimension (min(mn))}; const {out}work: PDouble{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name dgelqf
procedure dgelqf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDouble{ dimension (min(mn))}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgelqt
procedure dgelqt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDouble{ dimension (ldtmin(mn))}; const {in}ldt: PInteger{}; const {out}work: PDouble{ dimension (mb*n)}; const {out}info: PInteger{}); stdcall;



//file name dgelqt3
procedure dgelqt3_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDouble{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgels
procedure dgels_(const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgelsd
procedure dgelsd_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}s: PDouble{ dimension (min(mn))}; const {in}rcond: PDouble{}; const {out}rank: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {out}info: PInteger{});stdcall;



//file name dgelss
procedure dgelss_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}s: PDouble{ dimension (min(mn))}; const {in}rcond: PDouble{}; const {out}rank: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgelsy
procedure dgelsy_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}jpvt: PInteger{ dimension (n)}; const {in}rcond: PDouble{}; const {out}rank: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgemlq
procedure dgemlq_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDouble{ dimension}; const {in}lda: PInteger{}; const {in}t: PDouble{ dimension (max(5tsize))}; const {in}tsize: PInteger{}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgemlqt
procedure dgemlqt_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}mb: PInteger{}; const {in}v: PDouble{ dimension}; const {in}ldv: PInteger{}; const {in}t: PDouble{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ the dimension of}; const {out}info: PInteger{}); stdcall;



//file name dgemqr
procedure dgemqr_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDouble{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}t: PDouble{ dimension (max(5tsize))}; const {in}tsize: PInteger{}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgemqrt
procedure dgemqrt_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}nb: PInteger{}; const {in}v: PDouble{ dimension (ldvk)}; const {in}ldv: PInteger{}; const {in}t: PDouble{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ the dimension of}; const {out}info: PInteger{}); stdcall;



//file name dgeql2
procedure dgeql2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDouble{ dimension (min(mn))}; const {out}work: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgeqlf
procedure dgeqlf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDouble{ dimension (min(mn))}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgeqp3
procedure dgeqp3_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}jpvt: PInteger{ dimension (n)}; const {out}tau: PDouble{ dimension (min(mn))}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgeqr
procedure dgeqr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDouble{ dimension (max(5tsize))}; const {in}tsize: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgeqr2
procedure dgeqr2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDouble{ dimension (min(mn))}; const {out}work: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgeqr2p
procedure dgeqr2p_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDouble{ dimension (min(mn))}; const {out}work: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgeqrf
procedure dgeqrf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDouble{ dimension (min(mn))}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgeqrfp
procedure dgeqrfp_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDouble{ dimension (min(mn))}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgeqrt
procedure dgeqrt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDouble{ dimension (ldtmin(mn))}; const {in}ldt: PInteger{}; const {out}work: PDouble{ dimension (nb*n)}; const {out}info: PInteger{}); stdcall;



//file name dgeqrt2
procedure dgeqrt2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDouble{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgeqrt3
procedure dgeqrt3_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDouble{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgerfs
procedure dgerfs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgerfsx
procedure dgerfsx_(const {in}trans: PChar{*1}; const {in}equed: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}r: PDouble{ dimension (n)}; const {in}c: PDouble{ dimension (n)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}berr: PDouble{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PDouble{ dimension (nparams)}; const {out}work: PDouble{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgerq2
procedure dgerq2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDouble{ dimension (min(mn))}; const {out}work: PDouble{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name dgerqf
procedure dgerqf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDouble{ dimension (min(mn))}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgesc2
procedure dgesc2_(const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}rhs: PDouble{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}jpiv: PInteger{ dimension (n)}; const {out}scale: PDouble{}); stdcall;



//file name dgesdd
procedure dgesdd_(const {in}jobz: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PDouble{ dimension (min(mn))}; const {out}u: PDouble{ dimension (lduucol)}; const {in}ldu: PInteger{}; const {out}vt: PDouble{ dimension (ldvtn)}; const {in}ldvt: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (8*min(mn))}; const {out}info: PInteger{}); stdcall;



//file name dgesv
procedure dgesv_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgesvd
procedure dgesvd_(const {in}jobu: PChar{*1}; const {in}jobvt: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PDouble{ dimension (min(mn))}; const {out}u: PDouble{ dimension (lduucol)}; const {in}ldu: PInteger{}; const {out}vt: PDouble{ dimension (ldvtn)}; const {in}ldvt: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgesvdq
procedure dgesvdq_(const {in}joba: PChar{*1}; const {in}jobp: PChar{*1}; const {in}jobr: PChar{*1}; const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ of dimensions lda x n}; const {in}lda: PInteger{}; const {out}s: PDouble{ of dimension n}; const {out}u: PDouble{ dimension}; const {in}ldu: PInteger{}; const {out}v: PDouble{ dimension}; const {in}ldv: PInteger{}; const {out}numrank: PInteger{}; const {out}iwork: PInteger{ dimension (max(1 liwork))}; const {in}liwork: PInteger{}; const {out}work: PDouble{ dimension (max(2 lwork)) used as a workspace}; const {inout}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (max(1 lrwork))}; const {in}lrwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgesvdx
procedure dgesvdx_(const {in}jobu: PChar{*1}; const {in}jobvt: PChar{*1}; const {in}range: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {out}ns: PInteger{}; const {out}s: PDouble{ dimension (min(mn))}; const {out}u: PDouble{ dimension (lduucol)}; const {in}ldu: PInteger{}; const {out}vt: PDouble{ dimension (ldvtn)}; const {in}ldvt: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (12*min(mn))}; const {out}info: PInteger{}); stdcall;



//file name dgesvj
procedure dgesvj_(const {in}joba: PChar{*1}; const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}sva: PDouble{ dimension (n)}; const {in}mv: PInteger{}; const {inout}v: PDouble{ dimension (ldvn)}; const {in}ldv: PInteger{}; const {inout}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgesvx
procedure dgesvx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}r: PDouble{ dimension (n)}; const {inout}c: PDouble{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgesvxx
procedure dgesvxx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}r: PDouble{ dimension (n)}; const {inout}c: PDouble{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}rpvgrw: PDouble{}; const {out}berr: PDouble{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PDouble{ dimension (nparams)}; const {out}work: PDouble{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgetc2
procedure dgetc2_(const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension(n)}; const {out}jpiv: PInteger{ dimension(n)}; const {out}info: PInteger{}); stdcall;



//file name dgetf2
procedure dgetf2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name dgetrf
procedure dgetrf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name dgetrf2
procedure dgetrf2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name dgetri
procedure dgetri_(const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgetrs
procedure dgetrs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgetsls
procedure dgetsls_(const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgetsqrhrt
procedure dgetsqrhrt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb1: PInteger{}; const {in}nb1: PInteger{}; const {in}nb2: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDouble{ dimension (ldtn))}; const {in}ldt: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dggbak
procedure dggbak_(const {in}job: PChar{*1}; const {in}side: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {in}lscale: PDouble{ dimension (n)}; const {in}rscale: PDouble{ dimension (n)}; const {in}m: PInteger{}; const {inout}v: PDouble{ dimension (ldvm)}; const {in}ldv: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dggbal
procedure dggbal_(const {in}job: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}ilo: PInteger{}; const {out}ihi: PInteger{}; const {out}lscale: PDouble{ dimension (n)}; const {out}rscale: PDouble{ dimension (n)}; const {out}work: PDouble{ dimension (lwork)}; const {out}info: PInteger{}); stdcall;



//file name dgges
procedure dgges_(const {in}jobvsl: PChar{*1}; const {in}jobvsr: PChar{*1}; const {in}sort: PChar{*1}; const {in}selctg: TLFunc<PDouble, PDouble>{ of three PDouble{ arguments}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}sdim: PInteger{}; const {out}alphar: PDouble{ dimension (n)}; const {out}alphai: PDouble{ dimension (n)}; const {out}beta: PDouble{ dimension (n)}; const {out}vsl: PDouble{ dimension (ldvsln)}; const {in}ldvsl: PInteger{}; const {out}vsr: PDouble{ dimension (ldvsrn)}; const {in}ldvsr: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgges3
procedure dgges3_(const {in}jobvsl: PChar{*1}; const {in}jobvsr: PChar{*1}; const {in}sort: PChar{*1}; const {in}selctg: TLFunc<PDouble, PDouble>{ of three PDouble{ arguments}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}sdim: PInteger{}; const {out}alphar: PDouble{ dimension (n)}; const {out}alphai: PDouble{ dimension (n)}; const {out}beta: PDouble{ dimension (n)}; const {out}vsl: PDouble{ dimension (ldvsln)}; const {in}ldvsl: PInteger{}; const {out}vsr: PDouble{ dimension (ldvsrn)}; const {in}ldvsr: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dggesx
procedure dggesx_(const {in}jobvsl: PChar{*1}; const {in}jobvsr: PChar{*1}; const {in}sort: PChar{*1}; const {in}selctg: TLFunc<PDouble, PDouble, PDouble>{ of three PDouble{ arguments}; const {in}sense: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}sdim: PInteger{}; const {out}alphar: PDouble{ dimension (n)}; const {out}alphai: PDouble{ dimension (n)}; const {out}beta: PDouble{ dimension (n)}; const {out}vsl: PDouble{ dimension (ldvsln)}; const {in}ldvsl: PInteger{}; const {out}vsr: PDouble{ dimension (ldvsrn)}; const {in}ldvsr: PInteger{}; const {out}rconde: PDouble{ dimension ( 2 )}; const {out}rcondv: PDouble{ dimension ( 2 )}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dggev
procedure dggev_(const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}alphar: PDouble{ dimension (n)}; const {out}alphai: PDouble{ dimension (n)}; const {out}beta: PDouble{ dimension (n)}; const {out}vl: PDouble{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PDouble{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; var {out}info: Integer{}); stdcall;



//file name dggev3
procedure dggev3_(const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}alphar: PDouble{ dimension (n)}; const {out}alphai: PDouble{ dimension (n)}; const {out}beta: PDouble{ dimension (n)}; const {out}vl: PDouble{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PDouble{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dggevx
procedure dggevx_(const {in}balanc: PChar{*1}; const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}sense: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}alphar: PDouble{ dimension (n)}; const {out}alphai: PDouble{ dimension (n)}; const {out}beta: PDouble{ dimension (n)}; const {out}vl: PDouble{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PDouble{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}ilo: pInteger{}; const {out}ihi: pInteger{}; const {out}lscale: PDouble{ dimension (n)}; const {out}rscale: PDouble{ dimension (n)}; const {out}abnrm: pDouble{}; const {out}bbnrm: pDouble{}; const {out}rconde: PDouble{ dimension (n)}; const {out}rcondv: PDouble{ dimension (n)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (n+6)}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dggglm
procedure dggglm_(const {in}n: PInteger{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {inout}a: PDouble{ dimension (ldam)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbp)}; const {in}ldb: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {out}x: PDouble{ dimension (m)}; const {out}y: PDouble{ dimension (p)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgghd3
procedure dgghd3_(const {in}compq: PChar{*1}; const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {inout}q: PDouble{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {inout}z: PDouble{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgghrd
procedure dgghrd_(const {in}compq: PChar{*1}; const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {inout}q: PDouble{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {inout}z: PDouble{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgglse
procedure dgglse_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}p: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {inout}c: PDouble{ dimension (m)}; const {inout}d: PDouble{ dimension (p)}; const {out}x: PDouble{ dimension (n)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dggqrf
procedure dggqrf_(const {in}n: PInteger{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {inout}a: PDouble{ dimension (ldam)}; const {in}lda: PInteger{}; const {out}taua: PDouble{ dimension (min(nm))}; const {inout}b: PDouble{ dimension (ldbp)}; const {in}ldb: PInteger{}; const {out}taub: PDouble{ dimension (min(np))}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dggrqf
procedure dggrqf_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}taua: PDouble{ dimension (min(mn))}; const {inout}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}taub: PDouble{ dimension (min(pn))}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dggsvd3
procedure dggsvd3_(const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}jobq: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}p: PInteger{}; const {out}k: PInteger{}; const {out}l: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}alpha: PDouble{ dimension (n)}; const {out}beta: PDouble{ dimension (n)}; const {out}u: PDouble{ dimension (ldum)}; const {in}ldu: PInteger{}; const {out}v: PDouble{ dimension (ldvp)}; const {in}ldv: PInteger{}; const {out}q: PDouble{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dggsvp3
procedure dggsvp3_(const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}jobq: PChar{*1}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {in}tola: PDouble{}; const {in}tolb: PDouble{}; const {out}k: PInteger{}; const {out}l: PInteger{}; const {out}u: PDouble{ dimension (ldum)}; const {in}ldu: PInteger{}; const {out}v: PDouble{ dimension (ldvp)}; const {in}ldv: PInteger{}; const {out}q: PDouble{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}iwork: PInteger{ dimension (n)}; const {out}tau: PDouble{ dimension (n)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgsvj0
procedure dgsvj0_(const {in}jobv: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}sva: PDouble{ dimension (n)}; const {in}mv: PInteger{}; const {inout}v: PDouble{ dimension (ldvn)}; const {in}ldv: PInteger{}; const {in}eps: PDouble{}; const {in}sfmin: PDouble{}; const {in}tol: PDouble{}; const {in}nsweep: PInteger{}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgsvj1
procedure dgsvj1_(const {in}jobv: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}n1: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}sva: PDouble{ dimension (n)}; const {in}mv: PInteger{}; const {inout}v: PDouble{ dimension (ldvn)}; const {in}ldv: PInteger{}; const {in}eps: PDouble{}; const {in}sfmin: PDouble{}; const {in}tol: PDouble{}; const {in}nsweep: PInteger{}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgtcon
procedure dgtcon_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}dl: PDouble{ dimension (n-1)}; const {in}d: PDouble{ dimension (n)}; const {in}du: PDouble{ dimension (n-1)}; const {in}du2: PDouble{ dimension (n-2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDouble{ dimension (2*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgtrfs
procedure dgtrfs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}dl: PDouble{ dimension (n-1)}; const {in}d: PDouble{ dimension (n)}; const {in}du: PDouble{ dimension (n-1)}; const {in}dlf: PDouble{ dimension (n-1)}; const {in}df: PDouble{ dimension (n)}; const {in}duf: PDouble{ dimension (n-1)}; const {in}du2: PDouble{ dimension (n-2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgtsv
procedure dgtsv_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}dl: PDouble{ dimension (n-1)}; const {inout}d: PDouble{ dimension (n)}; const {inout}du: PDouble{ dimension (n-1)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgtsvx
procedure dgtsvx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}dl: PDouble{ dimension (n-1)}; const {in}d: PDouble{ dimension (n)}; const {in}du: PDouble{ dimension (n-1)}; const {inout}dlf: PDouble{ dimension (n-1)}; const {inout}df: PDouble{ dimension (n)}; const {inout}duf: PDouble{ dimension (n-1)}; const {inout}du2: PDouble{ dimension (n-2)}; const {inout}ipiv: PInteger{ dimension (n)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgttrf
procedure dgttrf_(const {in}n: PInteger{}; const {inout}dl: PDouble{ dimension (n-1)}; const {inout}d: PDouble{ dimension (n)}; const {inout}du: PDouble{ dimension (n-1)}; const {out}du2: PDouble{ dimension (n-2)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dgttrs
procedure dgttrs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}dl: PDouble{ dimension (n-1)}; const {in}d: PDouble{ dimension (n)}; const {in}du: PDouble{ dimension (n-1)}; const {in}du2: PDouble{ dimension (n-2)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dgtts2
procedure dgtts2_(const {in}itrans: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}dl: PDouble{ dimension (n-1)}; const {in}d: PDouble{ dimension (n)}; const {in}du: PDouble{ dimension (n-1)}; const {in}du2: PDouble{ dimension (n-2)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}); stdcall;



//file name dhgeqz
procedure dhgeqz_(const {in}job: PChar{*1}; const {in}compq: PChar{*1}; const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PDouble{ dimension (ldh n)}; const {in}ldh: PInteger{}; const {inout}t: PDouble{ dimension (ldt n)}; const {in}ldt: PInteger{}; const {out}alphar: PDouble{ dimension (n)}; const {out}alphai: PDouble{ dimension (n)}; const {out}beta: PDouble{ dimension (n)}; const {inout}q: PDouble{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {inout}z: PDouble{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dhsein
procedure dhsein_(const {in}side: PChar{*1}; const {in}eigsrc: PChar{*1}; const {in}initv: PChar{*1}; const {inout}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}h: PDouble{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {inout}wr: PDouble{ dimension (n)}; const {in}wi: PDouble{ dimension (n)}; const {inout}vl: PDouble{ dimension (ldvlmm)}; const {in}ldvl: PInteger{}; const {inout}vr: PDouble{ dimension (ldvrmm)}; const {in}ldvr: PInteger{}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PDouble{ dimension ((n+2)*n)}; const {out}ifaill: PInteger{ dimension (mm)}; const {out}ifailr: PInteger{ dimension (mm)}; const {out}info: PInteger{}); stdcall;



//file name dhseqr
procedure dhseqr_(const {in}job: PChar{*1}; const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PDouble{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {out}wr: PDouble{ dimension (n)}; const {out}wi: PDouble{ dimension (n)}; const {inout}z: PDouble{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name disnan
function disnan_(const {in}din: PDouble{}):Boolean{}; stdcall;



//file name dla_gbamv
procedure dla_gbamv_(const {in}trans: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}alpha: PDouble{}; const {in}ab: PDouble{ dimension ( ldab n )}; const {in}ldab: PInteger{}; const {in}x: PDouble{ dimension}; const {in}incx: PInteger{}; const {in}beta: PDouble{}; const {inout}y: PDouble{ dimension}; const {in}incy: PInteger{}); stdcall;



//file name dla_gbrcond
function dla_gbrcond_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PDouble{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}cmode: PInteger{}; const {in}c: PDouble{ dimension (n)}; const {out}info: PInteger{}; const {out}work: PDouble{ dimension (5*n)}; const {out}iwork: PInteger{ dimension (n)}):Double{}; stdcall;



//file name dla_gbrfsx_extended
procedure dla_gbrfsx_extended_(const {in}prec_type: PInteger{}; const {in}trans_type: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PDouble{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}colequ: PBoolean{}; const {in}c: PDouble{ dimension (n)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}y: PDouble{ dimension (ldynrhs)}; const {in}ldy: PInteger{}; const {out}berr_out: PDouble{ dimension (nrhs)}; const {in}n_norms: PInteger{}; const {inout}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {inout}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}res: PDouble{ dimension (n)}; const {in}ayb: PDouble{ dimension (n)}; const {in}dy: PDouble{ dimension (n)}; const {in}y_tail: PDouble{ dimension (n)}; const {in}rcond: PDouble{}; const {in}ithresh: PInteger{}; const {in}rthresh: PDouble{}; const {in}dz_ub: PDouble{}; const {in}ignore_cwise: PBoolean{}; const {out}info: PInteger{}); stdcall;



//file name dla_gbrpvgrw
function dla_gbrpvgrw_(const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ncols: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PDouble{ dimension (ldafbn)}; const {in}ldafb: PInteger{}):Double{}; stdcall;



//file name dla_geamv
procedure dla_geamv_ (const {in}trans: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}alpha: PDouble{}; const {in}a: PDouble{ dimension ( lda n )}; const {in}lda: PInteger{}; const {in}x: PDouble{ dimension}; const {in}incx: PInteger{}; const {in}beta: PDouble{}; const {inout}y: PDouble{}; const {in}incy: PInteger{});  stdcall;



//file name dla_gercond
function dla_gercond_ (const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}cmode: PInteger{}; const {in}c: PDouble{ dimension (n)}; const {out}info: PInteger{}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}) :PDouble;  stdcall;



//file name dla_gerfsx_extended
procedure dla_gerfsx_extended_(const {in}prec_type: PInteger{}; const {in}trans_type: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}colequ: PBoolean{}; const {in}c: PDouble{ dimension (n)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}y: PDouble{ dimension (ldynrhs)}; const {in}ldy: PInteger{}; const {out}berr_out: PDouble{ dimension (nrhs)}; const {in}n_norms: PInteger{}; const {inout}errs_n: PDouble{ dimension (nrhs n_err_bnds)}; const {inout}errs_c: PDouble{ dimension (nrhs n_err_bnds)}; const {in}res: PDouble{ dimension (n)}; const {in}ayb: PDouble{ dimension (n)}; const {in}dy: PDouble{ dimension (n)}; const {in}y_tail: PDouble{ dimension (n)}; const {in}rcond: PDouble{}; const {in}ithresh: PInteger{}; const {in}rthresh: PDouble{}; const {in}dz_ub: PDouble{}; const {in}ignore_cwise: PBoolean{}; const {out}info: PInteger{});stdcall;



//file name dla_gerpvgrw
function dla_gerpvgrw_(const {in}n: PInteger{}; const {in}ncols: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}):Double{}; stdcall;



//file name dla_lin_berr
procedure dla_lin_berr_ (const {in}n: PInteger{}; const {in}nz: PInteger{}; const {in}nrhs: PInteger{}; const {in}res: PDouble{ dimension (nnrhs)}; const {in}ayb: PDouble{ dimension (n nrhs)}; const {out}berr: PDouble{ dimension (nrhs)});  stdcall;



//file name dla_porcond
function dla_porcond_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}cmode: PInteger{}; const {in}c: PDouble{ dimension (n)}; const {out}info: PInteger{}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}):Double{}; stdcall;



//file name dla_porfsx_extended
procedure dla_porfsx_extended_(const {in}prec_type: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}colequ: PBoolean{}; const {in}c: PDouble{ dimension (n)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}y: PDouble{ dimension (ldynrhs)}; const {in}ldy: PInteger{}; const {out}berr_out: PDouble{ dimension (nrhs)}; const {in}n_norms: PInteger{}; const {inout}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {inout}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}res: PDouble{ dimension (n)}; const {in}ayb: PDouble{ dimension (n)}; const {in}dy: PDouble{ dimension (n)}; const {in}y_tail: PDouble{ dimension (n)}; const {in}rcond: PDouble{}; const {in}ithresh: PInteger{}; const {in}rthresh: PDouble{}; const {in}dz_ub: PDouble{}; const {in}ignore_cwise: PBoolean{}; const {out}info: PInteger{});stdcall;



//file name dla_porpvgrw
function dla_porpvgrw_(const {in}uplo: PChar{*1}; const {in}ncols: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {out}work: PDouble{ dimension (2*n)}):Double{}; stdcall;



//file name dla_syamv
procedure dla_syamv_(const {in}uplo: PInteger{}; const {in}n: PInteger{}; const {in}alpha: PDouble{ }; const {in}a: PDouble{ dimension ( lda n )}; const {in}lda: PInteger{}; const {in}x: PDouble{ dimension}; const {in}incx: PInteger{}; const {in}beta: PDouble{ }; const {inout}y: PDouble{ dimension}; const {in}incy: PInteger{}); stdcall;



//file name dla_syrcond
function dla_syrcond_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}cmode: PInteger{}; const {in}c: PDouble{ dimension (n)}; const {out}info: PInteger{}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}):Double{}; stdcall;



//file name dla_syrfsx_extended
procedure dla_syrfsx_extended_(const {in}prec_type: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}colequ: PBoolean{}; const {in}c: PDouble{ dimension (n)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}y: PDouble{ dimension (ldynrhs)}; const {in}ldy: PInteger{}; const {out}berr_out: PDouble{ dimension (nrhs)}; const {in}n_norms: PInteger{}; const {inout}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {inout}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}res: PDouble{ dimension (n)}; const {in}ayb: PDouble{ dimension (n)}; const {in}dy: PDouble{ dimension (n)}; const {in}y_tail: PDouble{ dimension (n)}; const {in}rcond: PDouble{}; const {in}ithresh: PInteger{}; const {in}rthresh: PDouble{}; const {in}dz_ub: PDouble{}; const {in}ignore_cwise: PBoolean{}; const {out}info: PInteger{});stdcall;



//file name dla_syrpvgrw
function dla_syrpvgrw_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}info: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDouble{ dimension (2*n)}):Double{}; stdcall;



//file name dla_wwaddw
procedure dla_wwaddw_(const {in}n: PInteger{}; const {inout}x: PDouble{ dimension (n)}; const {inout}y: PDouble{ dimension (n)}; const {in}w: PDouble{ dimension (n)}); stdcall;



//file name dlabad
procedure dlabad_(const {inout}small: PDouble{}; const {inout}large: PDouble{}); stdcall;



//file name dlabrd
procedure dlabrd_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PDouble{ dimension (nb)}; const {out}e: PDouble{ dimension (nb)}; const {out}tauq: PDouble{ dimension (nb)}; const {out}taup: PDouble{ dimension (nb)}; const {out}x: PDouble{ dimension (ldxnb)}; const {in}ldx: PInteger{}; const {out}y: PDouble{ dimension (ldynb)}; const {in}ldy: PInteger{}); stdcall;



//file name dlacn2
procedure dlacn2_(const {in}n: PInteger{}; const {out}v: PDouble{ dimension (n)}; const {inout}x: PDouble{ dimension (n)}; const {out}isgn: PInteger{ dimension (n)}; const {inout}est: PDouble{}; const {inout}kase: PInteger{}; const {inout}isave: PInteger{ dimension (3)}); stdcall;



//file name dlacon
procedure dlacon_(const {in}n: PInteger{}; const {out}v: PDouble{ dimension (n)}; const {inout}x: PDouble{ dimension (n)}; const {out}isgn: PInteger{ dimension (n)}; const {inout}est: PDouble{}; const {inout}kase: PInteger{}); stdcall;



//file name dlacpy
procedure dlacpy_(const {in}uplo: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}); stdcall;



//file name dladiv
procedure dladiv_(const {in}a: PDouble{}; const {in}b: PDouble{}; const {in}c: PDouble{}; const {in}d: PDouble{}; const {out}p: PDouble{}; const {out}q: PDouble{}); stdcall;



//file name dlae2
procedure dlae2_(const {in}a: PDouble{}; const {in}b: PDouble{}; const {in}c: PDouble{}; const {out}rt1: PDouble{}; const {out}rt2: PDouble{}); stdcall;



//file name dlaebz
procedure dlaebz_(const {in}ijob: PInteger{}; const {in}nitmax: PInteger{}; const {in}n: PInteger{}; const {in}mmax: PInteger{}; const {in}minp: PInteger{}; const {in}nbmin: PInteger{}; const {in}abstol: PDouble{}; const {in}reltol: PDouble{}; const {in}pivmin: PDouble{}; const {in}d: PDouble{ dimension (n)}; const {in}e: PDouble{ dimension (n)}; const {in}e2: PDouble{ dimension (n)}; const {inout}nval: PInteger{ dimension (minp)}; const {inout}ab: PDouble{ dimension (mmax2)}; const {inout}c: PDouble{ dimension (mmax)}; const {out}mout: PInteger{}; const {inout}nab: PInteger{ dimension (mmax2)}; const {out}work: PDouble{ dimension (mmax)}; const {out}iwork: PInteger{ dimension (mmax)}; const {out}info: PInteger{}); stdcall;



//file name dlaed0
procedure dlaed0_(const {in}icompq: PInteger{}; const {in}qsiz: PInteger{}; const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {in}e: PDouble{ dimension (n-1)}; const {inout}q: PDouble{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {out}qstore: PDouble{ dimension (ldqs n)}; const {in}ldqs: PInteger{}; const {out}work: PDouble{}; const {out}iwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dlaed1
procedure dlaed1_(const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}q: PDouble{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {inout}indxq: PInteger{ dimension (n)}; const {in}rho: PDouble{}; const {in}cutpnt: PInteger{}; const {out}work: PDouble{ dimension (4*n + n2)}; const {out}iwork: PInteger{ dimension (4*n)}; const {out}info: PInteger{}); stdcall;



//file name dlaed2
procedure dlaed2_(const {out}k: PInteger{}; const {in}n: PInteger{}; const {in}n1: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}q: PDouble{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {inout}indxq: PInteger{ dimension (n)}; const {inout}rho: PDouble{}; const {in}z: PDouble{ dimension (n)}; const {out}dlamda: PDouble{ dimension (n)}; const {out}w: PDouble{ dimension (n)}; const {out}q2: PDouble{ dimension (n12+(n-n1)**2)}; const {out}indx: PInteger{ dimension (n)}; const {out}indxc: PInteger{ dimension (n)}; const {out}indxp: PInteger{ dimension (n)}; const {out}coltyp: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dlaed3
procedure dlaed3_(const {in}k: PInteger{}; const {in}n: PInteger{}; const {in}n1: PInteger{}; const {out}d: PDouble{ dimension (n)}; const {out}q: PDouble{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {in}rho: PDouble{}; const {inout}dlamda: PDouble{ dimension (k)}; const {in}q2: PDouble{ dimension (ldq2*n)}; const {in}indx: PInteger{ dimension (n)}; const {in}ctot: PInteger{ dimension (4)}; const {inout}w: PDouble{ dimension (k)}; const {out}s: PDouble{ dimension (n1 + 1)*k}; const {out}info: PInteger{}); stdcall;



//file name dlaed4
procedure dlaed4_(const {in}n: PInteger{}; const {in}i: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}z: PDouble{ dimension (n)}; const {out}delta: PDouble{ dimension (n)}; const {in}rho: PDouble{}; const {out}dlam: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name dlaed5
procedure dlaed5_(const {in}i: PInteger{}; const {in}d: PDouble{ dimension (2)}; const {in}z: PDouble{ dimension (2)}; const {out}delta: PDouble{ dimension (2)}; const {in}rho: PDouble{}; const {out}dlam: PDouble{}); stdcall;



//file name dlaed6
procedure dlaed6_(const {in}kniter: PInteger{}; const {in}orgati: PBoolean{}; const {in}rho: PDouble{}; const {in}d: PDouble{ dimension (3)}; const {in}z: PDouble{ dimension (3)}; const {in}finit: PDouble{}; const {out}tau: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name dlaed7
procedure dlaed7_(const {in}icompq: PInteger{}; const {in}n: PInteger{}; const {in}qsiz: PInteger{}; const {in}tlvls: PInteger{}; const {in}curlvl: PInteger{}; const {in}curpbm: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}q: PDouble{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {out}indxq: PInteger{ dimension (n)}; const {in}rho: PDouble{}; const {in}cutpnt: PInteger{}; const {inout}qstore: PDouble{ dimension (n2+1)}; const {inout}qptr: PInteger{ dimension (n+2)}; const {in}prmptr: PInteger{ dimension (n lg n)}; const {in}perm: PInteger{ dimension (n lg n)}; const {in}givptr: PInteger{ dimension (n lg n)}; const {in}givcol: PInteger{ dimension (2 n lg n)}; const {in}givnum: PDouble{ dimension (2 n lg n)}; const {out}work: PDouble{ dimension (3*n+2*qsiz*n)}; const {out}iwork: PInteger{ dimension (4*n)}; const {out}info: PInteger{}); stdcall;



//file name dlaed8
procedure dlaed8_(const {in}icompq: PInteger{}; const {out}k: PInteger{}; const {in}n: PInteger{}; const {in}qsiz: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}q: PDouble{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {in}indxq: PInteger{ dimension (n)}; const {inout}rho: PDouble{}; const {in}cutpnt: PInteger{}; const {in}z: PDouble{ dimension (n)}; const {out}dlamda: PDouble{ dimension (n)}; const {out}q2: PDouble{ dimension (ldq2n)}; const {in}ldq2: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}perm: PInteger{ dimension (n)}; const {out}givptr: PInteger{}; const {out}givcol: PInteger{ dimension (2 n)}; const {out}givnum: PDouble{ dimension (2 n)}; const {out}indxp: PInteger{ dimension (n)}; const {out}indx: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dlaed9
procedure dlaed9_(const {in}k: PInteger{}; const {in}kstart: PInteger{}; const {in}kstop: PInteger{}; const {in}n: PInteger{}; const {out}d: PDouble{ dimension (n)}; const {out}q: PDouble{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {in}rho: PDouble{}; const {in}dlamda: PDouble{ dimension (k)}; const {in}w: PDouble{ dimension (k)}; const {out}s: PDouble{ dimension (lds k)}; const {in}lds: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dlaeda
procedure dlaeda_(const {in}n: PInteger{}; const {in}tlvls: PInteger{}; const {in}curlvl: PInteger{}; const {in}curpbm: PInteger{}; const {in}prmptr: PInteger{ dimension (n lg n)}; const {in}perm: PInteger{ dimension (n lg n)}; const {in}givptr: PInteger{ dimension (n lg n)}; const {in}givcol: PInteger{ dimension (2 n lg n)}; const {in}givnum: PDouble{ dimension (2 n lg n)}; const {in}q: PDouble{ dimension (n2)}; const {in}qptr: PInteger{ dimension (n+2)}; const {out}z: PDouble{ dimension (n)}; const {out}ztemp: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dlaein
procedure dlaein_(const {in}rightv: PBoolean{}; const {in}noinit: PBoolean{}; const {in}n: PInteger{}; const {in}h: PDouble{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}wr: PDouble{}; const {in}wi: PDouble{}; const {inout}vr: PDouble{ dimension (n)}; const {inout}vi: PDouble{ dimension (n)}; const {out}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}work: PDouble{ dimension (n)}; const {in}eps3: PDouble{}; const {in}smlnum: PDouble{}; const {in}bignum: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name dlaev2
procedure dlaev2_(const {in}a: PDouble{}; const {in}b: PDouble{}; const {in}c: PDouble{}; const {out}rt1: PDouble{}; const {out}rt2: PDouble{}; const {out}cs1: PDouble{}; const {out}sn1: PDouble{}); stdcall;



//file name dlaexc
procedure dlaexc_(const {in}wantq: PBoolean{}; const {in}n: PInteger{}; const {inout}t: PDouble{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {inout}q: PDouble{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {in}j1: PInteger{}; const {in}n1: PInteger{}; const {in}n2: PInteger{}; const {out}work: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dlag2
procedure dlag2_(const {in}a: PDouble{ dimension (lda 2)}; const {in}lda: PInteger{}; const {in}b: PDouble{ dimension (ldb 2)}; const {in}ldb: PInteger{}; const {in}safmin: PDouble{}; const {out}scale1: PDouble{}; const {out}scale2: PDouble{}; const {out}wr1: PDouble{}; const {out}wr2: PDouble{}; const {out}wi: PDouble{}); stdcall;



//file name dlag2s
procedure dlag2s_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}sa: PSingle{ dimension (ldsan)}; const {in}ldsa: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dlags2
procedure dlags2_(const {in}upper: PBoolean{}; const {in}a1: PDouble{}; const {in}a2: PDouble{}; const {in}a3: PDouble{}; const {in}b1: PDouble{}; const {in}b2: PDouble{}; const {in}b3: PDouble{}; const {out}csu: PDouble{}; const {out}snu: PDouble{}; const {out}csv: PDouble{}; const {out}snv: PDouble{}; const {out}csq: PDouble{}; const {out}snq: PDouble{}); stdcall;



//file name dlagtf
procedure dlagtf_(const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (n)}; const {in}lambda: PDouble{}; const {inout}b: PDouble{ dimension (n-1)}; const {inout}c: PDouble{ dimension (n-1)}; const {in}tol: PDouble{}; const {out}d: PDouble{ dimension (n-2)}; const {out}_in: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dlagtm
procedure dlagtm_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}alpha: PDouble{}; const {in}dl: PDouble{ dimension (n-1)}; const {in}d: PDouble{ dimension (n)}; const {in}du: PDouble{ dimension (n-1)}; const {in}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {in}beta: PDouble{}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}); stdcall;



//file name dlagts
procedure dlagts_(const {in}job: PInteger{}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (n)}; const {in}b: PDouble{ dimension (n-1)}; const {in}c: PDouble{ dimension (n-1)}; const {in}d: PDouble{ dimension (n-2)}; const {in}_in: PInteger{ dimension (n)}; const {inout}y: PDouble{ dimension (n)}; const {inout}tol: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name dlagv2
procedure dlagv2_(const {inout}a: PDouble{ dimension (lda 2)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldb 2)}; const {in}ldb: PInteger{}; const {out}alphar: PDouble{ dimension (2)}; const {out}alphai: PDouble{ dimension (2)}; const {out}beta: PDouble{ dimension (2)}; const {out}csl: PDouble{}; const {out}snl: PDouble{}; const {out}csr: PDouble{}; const {out}snr: PDouble{}); stdcall;



//file name dlahqr
procedure dlahqr_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PDouble{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {out}wr: PDouble{ dimension (n)}; const {out}wi: PDouble{ dimension (n)}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PDouble{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dlahr2
procedure dlahr2_(const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDouble{ dimension (ldan-k+1)}; const {in}lda: PInteger{}; const {out}tau: PDouble{ dimension (nb)}; const {out}t: PDouble{ dimension (ldtnb)}; const {in}ldt: PInteger{}; const {out}y: PDouble{ dimension (ldynb)}; const {in}ldy: PInteger{}); stdcall;



//file name dlaic1
procedure dlaic1_(const {in}job: PInteger{}; const {in}j: PInteger{}; const {in}x: PDouble{ dimension (j)}; const {in}sest: PDouble{}; const {in}w: PDouble{ dimension (j)}; const {in}gamma: PDouble{}; const {out}sestpr: PDouble{}; const {out}s: PDouble{}; const {out}c: PDouble{}); stdcall;



//file name dlaisnan
function dlaisnan_(const {in}din1: PDouble{}; const {in}din2: PDouble{}):Boolean{}; stdcall;



//file name dlaln2
procedure dlaln2_(const {in}ltrans: PBoolean{}; const {in}na: PInteger{}; const {in}nw: PInteger{}; const {in}smin: PDouble{}; const {in}ca: PDouble{}; const {in}a: PDouble{ dimension (ldana)}; const {in}lda: PInteger{}; const {in}d1: PDouble{}; const {in}d2: PDouble{}; const {in}b: PDouble{ dimension (ldbnw)}; const {in}ldb: PInteger{}; const {in}wr: PDouble{}; const {in}wi: PDouble{}; const {out}x: PDouble{ dimension (ldxnw)}; const {in}ldx: PInteger{}; const {out}scale: PDouble{}; const {out}xnorm: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name dlals0
procedure dlals0_(const {in}icompq: PInteger{}; const {in}nl: PInteger{}; const {in}nr: PInteger{}; const {in}sqre: PInteger{}; const {in}nrhs: PInteger{}; const {inout}b: PDouble{ dimension ( ldb nrhs )}; const {in}ldb: PInteger{}; const {out}bx: PDouble{ dimension ( ldbx nrhs )}; const {in}ldbx: PInteger{}; const {in}perm: PInteger{ dimension ( n )}; const {in}givptr: PInteger{}; const {in}givcol: PInteger{ dimension ( ldgcol 2 )}; const {in}ldgcol: PInteger{}; const {in}givnum: PDouble{ dimension ( ldgnum 2 )}; const {in}ldgnum: PInteger{}; const {in}poles: PDouble{ dimension ( ldgnum 2 )}; const {in}difl: PDouble{ dimension ( k )}; const {in}difr: PDouble{ dimension ( ldgnum 2 )}; const {in}z: PDouble{ dimension ( k )}; const {in}k: PInteger{}; const {in}c: PDouble{}; const {in}s: PDouble{}; const {out}work: PDouble{ dimension ( k )}; const {out}info: PInteger{}); stdcall;



//file name dlalsa
procedure dlalsa_(const {in}icompq: PInteger{}; const {in}smlsiz: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}b: PDouble{ dimension ( ldb nrhs )}; const {in}ldb: PInteger{}; const {out}bx: PDouble{ dimension ( ldbx nrhs )}; const {in}ldbx: PInteger{}; const {in}u: PDouble{ dimension ( ldu smlsiz )}; const {in}ldu: PInteger{ ldu =n}; const {in}vt: PDouble{ dimension ( ldu smlsiz+1 )}; const {in}k: PInteger{ dimension ( n )}; const {in}difl: PDouble{ dimension ( ldu nlvl )}; const {in}difr: PDouble{ dimension ( ldu 2 * nlvl )}; const {in}z: PDouble{ dimension ( ldu nlvl )}; const {in}poles: PDouble{ dimension ( ldu 2 * nlvl )}; const {in}givptr: PInteger{ dimension ( n )}; const {in}givcol: PInteger{ dimension ( ldgcol 2 * nlvl )}; const {in}ldgcol: PInteger{ ldgcol =n}; const {in}perm: PInteger{ dimension ( ldgcol nlvl )}; const {in}givnum: PDouble{ dimension ( ldu 2 * nlvl )}; const {in}c: PDouble{ dimension ( n )}; const {in}s: PDouble{ dimension ( n )}; const {out}work: PDouble{ dimension (n)}; const {out}iwork: PInteger{ dimension (3*n)}; const {out}info: PInteger{}); stdcall;



//file name dlalsd
procedure dlalsd_(const {in}uplo: PChar{*1}; const {in}smlsiz: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n-1)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {in}rcond: PDouble{}; const {out}rank: PInteger{}; const {out}work: PDouble{ dimension at least}; const {out}iwork: PInteger{ dimension at least}; const {out}info: PInteger{}); stdcall;



//file name dlamrg
procedure dlamrg_(const {in}n1: PInteger{}; const {in}n2: PInteger{}; const {in}a: PDouble{ dimension (n1+n2)}; const {in}dtrd1: PInteger{}; const {in}dtrd2: PInteger{}; const {out}index: PInteger{ dimension (n1+n2)}); stdcall;



//file name dlamswlq
procedure dlamswlq_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {in}a: PDouble{ dimension}; const {in}lda: PInteger{}; const {in}t: PDouble{ dimension}; const {in}ldt: PInteger{}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dlamtsqr
procedure dlamtsqr_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {in}a: PDouble{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}t: PDouble{ dimension}; const {in}ldt: PInteger{}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dlaneg
function dlaneg_(const {in}n: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}lld: PDouble{ dimension (n-1)}; const {in}sigma: PDouble{}; const {in}pivmin: PDouble{}; const {in}r: PInteger{}):Integer{}; stdcall;



//file name dlangb
function dlangb_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name dlange
function dlange_(const {in}norm: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}): Double{}; stdcall;



//file name dlangt
function dlangt_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}dl: PDouble{ dimension (n-1)}; const {in}d: PDouble{ dimension (n)}; const {in}du: PDouble{ dimension (n-1)}):Double{}; stdcall;



//file name dlanhs
function dlanhs_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name dlansb
function dlansb_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name dlansf
function dlansf_(const {in}norm: PChar{*1}; const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension ( n*(n+1)/2 );}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name dlansp
function dlansp_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDouble{ dimension (n*(n+1)/2)}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name dlanst
function dlanst_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}e: PDouble{ dimension (n-1)}):Double{}; stdcall;



//file name dlansy
function dlansy_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name dlantb
function dlantb_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name dlantp
function dlantp_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDouble{ dimension (n*(n+1)/2)}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name dlantr
function dlantr_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name dlanv2
procedure dlanv2_(const {inout}a: PDouble{}; const {inout}b: PDouble{}; const {inout}c: PDouble{}; const {inout}d: PDouble{}; const {out}rt1r: PDouble{}; const {out}rt1i: PDouble{}; const {out}rt2r: PDouble{}; const {out}rt2i: PDouble{}; const {out}cs: PDouble{}; const {out}sn: PDouble{}); stdcall;



//file name dlaorhr_col_getrfnp
procedure dlaorhr_col_getrfnp_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PDouble{ dimension min(mn)}; const {out}info: PInteger{}); stdcall;



//file name dlaorhr_col_getrfnp2
procedure dlaorhr_col_getrfnp2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PDouble{ dimension min(mn)}; const {out}info: PInteger{}); stdcall;



//file name dlapll
procedure dlapll_(const {in}n: PInteger{}; const {inout}x: PDouble{}; const {in}incx: PInteger{}; const {inout}y: PDouble{}; const {in}incy: PInteger{}; const {out}ssmin: PDouble{}); stdcall;



//file name dlapmr
procedure dlapmr_(const {in}forwrd: PBoolean{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}x: PDouble{ dimension (ldxn)}; const {in}ldx: PInteger{}; const {inout}k: PInteger{ dimension (m)}); stdcall;



//file name dlapmt
procedure dlapmt_(const {in}forwrd: PBoolean{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}x: PDouble{ dimension (ldxn)}; const {in}ldx: PInteger{}; const {inout}k: PInteger{ dimension (n)}); stdcall;



//file name dlapy2
function dlapy2_(const {in}x: PDouble{}; const {in}y: PDouble{}):Double{}; stdcall;



//file name dlapy3
function dlapy3_(const {in}x: PDouble{}; const {in}y: PDouble{}; const {in}z: PDouble{}):Double{}; stdcall;



//file name dlaqgb
procedure dlaqgb_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {inout}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}r: PDouble{ dimension (m)}; const {in}c: PDouble{ dimension (n)}; const {in}rowcnd: PDouble{}; const {in}colcnd: PDouble{}; const {in}amax: PDouble{}; const {out}equed: PChar{*1}); stdcall;



//file name dlaqge
procedure dlaqge_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}r: PDouble{ dimension (m)}; const {in}c: PDouble{ dimension (n)}; const {in}rowcnd: PDouble{}; const {in}colcnd: PDouble{}; const {in}amax: PDouble{}; const {out}equed: PChar{*1}); stdcall;



//file name dlaqp2
procedure dlaqp2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}offset: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}jpvt: PInteger{ dimension (n)}; const {out}tau: PDouble{ dimension (min(mn))}; const {inout}vn1: PDouble{ dimension (n)}; const {inout}vn2: PDouble{ dimension (n)}; const {out}work: PDouble{ dimension (n)}); stdcall;



//file name dlaqps
procedure dlaqps_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}offset: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}jpvt: PInteger{ dimension (n)}; const {out}tau: PDouble{ dimension (kb)}; const {inout}vn1: PDouble{ dimension (n)}; const {inout}vn2: PDouble{ dimension (n)}; const {inout}auxv: PDouble{ dimension (nb)}; const {inout}f: PDouble{ dimension (ldfnb)}; const {in}ldf: PInteger{}); stdcall;



//file name dlaqr0
procedure dlaqr0_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PDouble{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {out}wr: PDouble{ dimension (ihi)}; const {out}wi: PDouble{ dimension (ihi)}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PDouble{ dimension (ldzihi)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dlaqr1
procedure dlaqr1_(const {in}n: PInteger{}; const {in}h: PDouble{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}sr1: PDouble{}; const {in}si1: PDouble{}; const {in}sr2: PDouble{}; const {in}si2: PDouble{}; const {out}v: PDouble{ dimension (n)}); stdcall;



//file name dlaqr2
procedure dlaqr2_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ktop: PInteger{}; const {in}kbot: PInteger{}; const {in}nw: PInteger{}; const {inout}h: PDouble{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PDouble{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}ns: PInteger{}; const {out}nd: PInteger{}; const {out}sr: PDouble{ dimension (kbot)}; const {out}si: PDouble{ dimension (kbot)}; const {out}v: PDouble{ dimension (ldvnw)}; const {in}ldv: PInteger{}; const {in}nh: PInteger{}; const {out}t: PDouble{ dimension (ldtnw)}; const {in}ldt: PInteger{}; const {in}nv: PInteger{}; const {out}wv: PDouble{ dimension (ldwvnw)}; const {in}ldwv: PInteger{}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}); stdcall;



//file name dlaqr3
procedure dlaqr3_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ktop: PInteger{}; const {in}kbot: PInteger{}; const {in}nw: PInteger{}; const {inout}h: PDouble{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PDouble{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}ns: PInteger{}; const {out}nd: PInteger{}; const {out}sr: PDouble{ dimension (kbot)}; const {out}si: PDouble{ dimension (kbot)}; const {out}v: PDouble{ dimension (ldvnw)}; const {in}ldv: PInteger{}; const {in}nh: PInteger{}; const {out}t: PDouble{ dimension (ldtnw)}; const {in}ldt: PInteger{}; const {in}nv: PInteger{}; const {out}wv: PDouble{ dimension (ldwvnw)}; const {in}ldwv: PInteger{}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}); stdcall;



//file name dlaqr4
procedure dlaqr4_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PDouble{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {out}wr: PDouble{ dimension (ihi)}; const {out}wi: PDouble{ dimension (ihi)}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PDouble{ dimension (ldzihi)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dlaqr5
procedure dlaqr5_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}kacc22: PInteger{ with value 0 1 or 2}; const {in}n: PInteger{}; const {in}ktop: PInteger{}; const {in}kbot: PInteger{}; const {in}nshfts: PInteger{}; const {inout}sr: PDouble{ dimension (nshfts)}; const {inout}si: PDouble{ dimension (nshfts)}; const {inout}h: PDouble{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PDouble{ dimension (ldzihiz)}; const {in}ldz: PInteger{}; const {out}v: PDouble{ dimension (ldvnshfts/2)}; const {in}ldv: PInteger{}; const {out}u: PDouble{ dimension (ldu2*nshfts)}; const {in}ldu: PInteger{}; const {in}nv: PInteger{}; const {out}wv: PDouble{ dimension (ldwv2*nshfts)}; const {in}ldwv: PInteger{}; const {in}nh: PInteger{}; const {out}wh: PDouble{ dimension (ldwhnh)}; const {in}ldwh: PInteger{}); stdcall;



//file name dlaqsb
procedure dlaqsb_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}s: PDouble{ dimension (n)}; const {in}scond: PDouble{}; const {in}amax: PDouble{}; const {out}equed: PChar{*1}); stdcall;



//file name dlaqsp
procedure dlaqsp_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDouble{ dimension (n*(n+1)/2)}; const {in}s: PDouble{ dimension (n)}; const {in}scond: PDouble{}; const {in}amax: PDouble{}; const {out}equed: PChar{*1}); stdcall;



//file name dlaqsy
procedure dlaqsy_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}s: PDouble{ dimension (n)}; const {in}scond: PDouble{}; const {in}amax: PDouble{}; const {out}equed: PChar{*1}); stdcall;



//file name dlaqtr
procedure dlaqtr_(const {in}ltran: PBoolean{}; const {in}lreal: PBoolean{}; const {in}n: PInteger{}; const {in}t: PDouble{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {in}b: PDouble{ dimension (n)}; const {in}w: PDouble{}; const {out}scale: PDouble{}; const {inout}x: PDouble{ dimension (2*n)}; const {out}work: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dlar1v
procedure dlar1v_(const {in}n: PInteger{}; const {in}b1: PInteger{}; const {in}bn: PInteger{}; const {in}lambda: PDouble{}; const {in}l: PDouble{ dimension (n-1)}; const {in}d: PDouble{ dimension (n)}; const {in}ld: PDouble{ dimension (n-1)}; const {in}lld: PDouble{ dimension (n-1)}; const {in}pivmin: PDouble{}; const {in}gaptol: PDouble{}; const {inout}z: PDouble{ dimension (n)}; const {in}wantnc: PBoolean{}; const {out}negcnt: PInteger{}; const {out}ztz: PDouble{}; const {out}mingma: PDouble{}; const {inout}r: PInteger{}; const {out}isuppz: PInteger{ dimension (2)}; const {out}nrminv: PDouble{}; const {out}resid: PDouble{}; const {out}rqcorr: PDouble{}; const {out}work: PDouble{ dimension (4*n)}); stdcall;



//file name dlar2v
procedure dlar2v_(const {in}n: PInteger{}; const {inout}x: PDouble{}; const {inout}y: PDouble{}; const {inout}z: PDouble{}; const {in}incx: PInteger{}; const {in}c: PDouble{ dimension (1+(n-1)*incc)}; const {in}s: PDouble{ dimension (1+(n-1)*incc)}; const {in}incc: PInteger{}); stdcall;



//file name dlarf
procedure dlarf_(const {in}side: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}v: PDouble{ dimension}; const {in}incv: PInteger{}; const {in}tau: PDouble{}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension}); stdcall;



//file name dlarfb
procedure dlarfb_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}v: PDouble{ dimension}; const {in}ldv: PInteger{}; const {in}t: PDouble{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension (ldworkk)}; const {in}ldwork: PInteger{}); stdcall;



//file name dlarfb_gett
procedure dlarfb_gett_(const {in}ident: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}t: PDouble{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}work: PDouble{}; const {in}ldwork: PInteger{}); stdcall;



//file name dlarfg
procedure dlarfg_(const {in}n: PInteger{}; const {inout}alpha: PDouble{}; const {inout}x: PDouble{ dimension}; const {in}incx: PInteger{}; const {out}tau: PDouble{}); stdcall;



//file name dlarfgp
procedure dlarfgp_(const {in}n: PInteger{}; const {inout}alpha: PDouble{}; const {inout}x: PDouble{ dimension}; const {in}incx: PInteger{}; const {out}tau: PDouble{}); stdcall;



//file name dlarft
procedure dlarft_(const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}v: PDouble{ dimension}; const {in}ldv: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {out}t: PDouble{ dimension (ldtk)}; const {in}ldt: PInteger{}); stdcall;



//file name dlarfx
procedure dlarfx_(const {in}side: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}v: PDouble{ dimension (m) if side = 'l'}; const {in}tau: PDouble{}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension}); stdcall;



//file name dlarfy
procedure dlarfy_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}v: PDouble{ dimension}; const {in}incv: PInteger{}; const {in}tau: PDouble{}; const {inout}c: PDouble{ dimension (ldc n)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension (n)}); stdcall;



//file name dlargv
procedure dlargv_(const {in}n: PInteger{}; const {inout}x: PDouble{}; const {in}incx: PInteger{}; const {inout}y: PDouble{}; const {in}incy: PInteger{}; const {out}c: PDouble{ dimension (1+(n-1)*incc)}; const {in}incc: PInteger{}); stdcall;



//file name dlarnv
procedure dlarnv_(const {in}idist: PInteger{}; const {inout}iseed: PInteger{ dimension (4)}; const {in}n: PInteger{}; const {out}x: PDouble{ dimension (n)}); stdcall;



//file name dlarra
procedure dlarra_(const {in}n: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n)}; const {inout}e2: PDouble{ dimension (n)}; const {in}spltol: PDouble{}; const {in}tnrm: PDouble{}; const {out}nsplit: PInteger{}; const {out}isplit: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dlarrb
procedure dlarrb_(const {in}n: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}lld: PDouble{ dimension (n-1)}; const {in}ifirst: PInteger{}; const {in}ilast: PInteger{}; const {in}rtol1: PDouble{}; const {in}rtol2: PDouble{}; const {in}offset: PInteger{}; const {inout}w: PDouble{ dimension (n)}; const {inout}wgap: PDouble{ dimension (n-1)}; const {inout}werr: PDouble{ dimension (n)}; const {out}work: PDouble{ dimension (2*n)}; const {out}iwork: PInteger{ dimension (2*n)}; const {in}pivmin: PDouble{}; const {in}spdiam: PDouble{}; const {in}twist: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dlarrc
procedure dlarrc_(const {in}jobt: PChar{*1}; const {in}n: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}d: PDouble{ dimension (n)}; const {in}e: PDouble{ dimension (n)}; const {in}pivmin: PDouble{}; const {out}eigcnt: PInteger{}; const {out}lcnt: PInteger{}; const {out}rcnt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dlarrd
procedure dlarrd_(const {in}range: PChar{*1}; const {in}order: PChar{*1}; const {in}n: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}gers: PDouble{ dimension (2*n)}; const {in}reltol: PDouble{}; const {in}d: PDouble{ dimension (n)}; const {in}e: PDouble{ dimension (n-1)}; const {in}e2: PDouble{ dimension (n-1)}; const {in}pivmin: PDouble{}; const {in}nsplit: PInteger{}; const {in}isplit: PInteger{ dimension (n)}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}werr: PDouble{ dimension (n)}; const {out}wl: PDouble{}; const {out}wu: PDouble{}; const {out}iblock: PInteger{ dimension (n)}; const {out}indexw: PInteger{ dimension (n)}; const {out}work: PDouble{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (3*n)}; const {out}info: PInteger{});stdcall;



//file name dlarre
procedure dlarre_(const {in}range: PChar{*1}; const {in}n: PInteger{}; const {inout}vl: PDouble{}; const {inout}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n)}; const {inout}e2: PDouble{ dimension (n)}; const {in}rtol1: PDouble{}; const {in}rtol2: PDouble{}; const {in}spltol: PDouble{}; const {out}nsplit: PInteger{}; const {out}isplit: PInteger{ dimension (n)}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}werr: PDouble{ dimension (n)}; const {out}wgap: PDouble{ dimension (n)}; const {out}iblock: PInteger{ dimension (n)}; const {out}indexw: PInteger{ dimension (n)}; const {out}gers: PDouble{ dimension (2*n)}; const {out}pivmin: PDouble{}; const {out}work: PDouble{ dimension (6*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}info: PInteger{}); stdcall;



//file name dlarrf
procedure dlarrf_(const {in}n: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}l: PDouble{ dimension (n-1)}; const {in}ld: PDouble{ dimension (n-1)}; const {in}clstrt: PInteger{}; const {in}clend: PInteger{}; const {in}w: PDouble{ dimension}; const {inout}wgap: PDouble{ dimension}; const {in}werr: PDouble{ dimension}; const {in}spdiam: PDouble{}; const {in}clgapl: PDouble{}; const {in}clgapr: PDouble{}; const {in}pivmin: PDouble{}; const {out}sigma: PDouble{}; const {out}dplus: PDouble{ dimension (n)}; const {out}lplus: PDouble{ dimension (n-1)}; const {out}work: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name dlarrj
procedure dlarrj_(const {in}n: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}e2: PDouble{ dimension (n-1)}; const {in}ifirst: PInteger{}; const {in}ilast: PInteger{}; const {in}rtol: PDouble{}; const {in}offset: PInteger{}; const {inout}w: PDouble{ dimension (n)}; const {inout}werr: PDouble{ dimension (n)}; const {out}work: PDouble{ dimension (2*n)}; const {out}iwork: PInteger{ dimension (2*n)}; const {in}pivmin: PDouble{}; const {in}spdiam: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name dlarrk
procedure dlarrk_(const {in}n: PInteger{}; const {in}iw: PInteger{}; const {in}gl: PDouble{}; const {in}gu: PDouble{}; const {in}d: PDouble{ dimension (n)}; const {in}e2: PDouble{ dimension (n-1)}; const {in}pivmin: PDouble{}; const {in}reltol: PDouble{}; const {out}w: PDouble{}; const {out}werr: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name dlarrr
procedure dlarrr_(const {in}n: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dlarrv
procedure dlarrv_(const {in}n: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {inout}d: PDouble{ dimension (n)}; const {inout}l: PDouble{ dimension (n)}; const {in}pivmin: PDouble{}; const {in}isplit: PInteger{ dimension (n)}; const {in}m: PInteger{}; const {in}dol: PInteger{}; const {in}dou: PInteger{}; const {in}minrgp: PDouble{}; const {in}rtol1: PDouble{}; const {in}rtol2: PDouble{}; const {inout}w: PDouble{ dimension (n)}; const {inout}werr: PDouble{ dimension (n)}; const {inout}wgap: PDouble{ dimension (n)}; const {in}iblock: PInteger{ dimension (n)}; const {in}indexw: PInteger{ dimension (n)}; const {in}gers: PDouble{ dimension (2*n)}; const {out}z: PDouble{ dimension (ldz max(1m) )}; const {in}ldz: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {out}work: PDouble{ dimension (12*n)}; const {out}iwork: PInteger{ dimension (7*n)}; const {out}info: PInteger{}); stdcall;



//file name dlarscl2
procedure dlarscl2_ (const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}d: PDouble{ dimension (m)}; const {inout}x: PDouble{ dimension (ldxn)}; const {in}ldx: PInteger{});  stdcall;



//file name dlartg
procedure dlartg_(const {in}f: PDouble{}; const {in}g: PDouble{}; const {out}cs: PDouble{}; const {out}sn: PDouble{}; const {out}r: PDouble{}); stdcall;



//file name dlartgp
procedure dlartgp_(const {in}f: PDouble{}; const {in}g: PDouble{}; const {out}cs: PDouble{}; const {out}sn: PDouble{}; const {out}r: PDouble{}); stdcall;



//file name dlartgs
procedure dlartgs_(const {in}x: PDouble{}; const {in}y: PDouble{}; const {in}sigma: PDouble{}; const {out}cs: PDouble{}; const {out}sn: PDouble{}); stdcall;



//file name dlartv
procedure dlartv_(const {in}n: PInteger{}; const {inout}x: PDouble{}; const {in}incx: PInteger{}; const {inout}y: PDouble{}; const {in}incy: PInteger{}; const {in}c: PDouble{ dimension (1+(n-1)*incc)}; const {in}s: PDouble{ dimension (1+(n-1)*incc)}; const {in}incc: PInteger{}); stdcall;



//file name dlaruv
procedure dlaruv_(const {inout}iseed: PInteger{ dimension (4)}; const {in}n: PInteger{}; const {out}x: PDouble{ dimension (n)}); stdcall;



//file name dlarz
procedure dlarz_(const {in}side: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {in}v: PDouble{ dimension (1+(l-1)*abs(incv))}; const {in}incv: PInteger{}; const {in}tau: PDouble{}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension}); stdcall;



//file name dlarzb
procedure dlarzb_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}v: PDouble{ dimension (ldvnv)}; const {in}ldv: PInteger{}; const {in}t: PDouble{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension (ldworkk)}; const {in}ldwork: PInteger{}); stdcall;



//file name dlarzt
procedure dlarzt_(const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}v: PDouble{ dimension}; const {in}ldv: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {out}t: PDouble{ dimension (ldtk)}; const {in}ldt: PInteger{}); stdcall;



//file name dlas2
procedure dlas2_(const {in}f: PDouble{}; const {in}g: PDouble{}; const {in}h: PDouble{}; const {out}ssmin: PDouble{}; const {out}ssmax: PDouble{}); stdcall;



//file name dlascl
procedure dlascl_(const {in}_type: PChar{*1}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}cfrom: PDouble{}; const {in}cto: PDouble{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{});stdcall;



//file name dlascl2
procedure dlascl2_ (const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}d: PDouble{ length m}; const {inout}x: PDouble{ dimension (ldxn)}; const {in}ldx: PInteger{});  stdcall;



//file name dlasd0
procedure dlasd0_(const {in}n: PInteger{}; const {in}sqre: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (m-1)}; const {out}u: PDouble{ dimension (ldu n)}; const {in}ldu: PInteger{}; const {out}vt: PDouble{ dimension (ldvt m)}; const {in}ldvt: PInteger{}; const {in}smlsiz: PInteger{}; const {out}iwork: PInteger{ dimension (8*n)}; const {out}work: PDouble{ dimension (3*m2+2*m)}; const {out}info: PInteger{}); stdcall;



//file name dlasd1
procedure dlasd1_(const {in}nl: PInteger{}; const {in}nr: PInteger{}; const {in}sqre: PInteger{}; const {inout}d: PDouble{}; const {inout}alpha: PDouble{}; const {inout}beta: PDouble{}; const {inout}u: PDouble{ dimension(ldun)}; const {in}ldu: PInteger{}; const {inout}vt: PDouble{ dimension(ldvtm)}; const {in}ldvt: PInteger{}; const {inout}idxq: PInteger{ dimension(n)}; const {out}iwork: PInteger{ dimension( 4 * n )}; const {out}work: PDouble{ dimension( 3*m2 + 2*m )}; const {out}info: PInteger{}); stdcall;



//file name dlasd2
procedure dlasd2_(const {in}nl: PInteger{}; const {in}nr: PInteger{}; const {in}sqre: PInteger{}; const {out}k: PInteger{}; const {inout}d: PDouble{ dimension(n)}; const {out}z: PDouble{ dimension(n)}; const {in}alpha: PDouble{}; const {in}beta: PDouble{}; const {inout}u: PDouble{ dimension(ldun)}; const {in}ldu: PInteger{}; const {inout}vt: PDouble{ dimension(ldvtm)}; const {in}ldvt: PInteger{}; const {out}dsigma: PDouble{ dimension (n)}; const {out}u2: PDouble{ dimension(ldu2n)}; const {in}ldu2: PInteger{}; const {out}vt2: PDouble{ dimension(ldvt2n)}; const {in}ldvt2: PInteger{}; const {out}idxp: PInteger{ dimension(n)}; const {out}idx: PInteger{ dimension(n)}; const {out}idxc: PInteger{ dimension(n)}; const {inout}idxq: PInteger{ dimension(n)}; const {out}coltyp: PInteger{ dimension(n)}; const {out}info: PInteger{}); stdcall;



//file name dlasd3
procedure dlasd3_(const {in}nl: PInteger{}; const {in}nr: PInteger{}; const {in}sqre: PInteger{}; const {in}k: PInteger{}; const {out}d: PDouble{ dimension(k)}; const {out}q: PDouble{ dimension (ldqk)}; const {in}ldq: PInteger{}; const {inout}dsigma: PDouble{ dimension(k)}; const {out}u: PDouble{ dimension (ldu n)}; const {in}ldu: PInteger{}; const {in}u2: PDouble{ dimension (ldu2 n)}; const {in}ldu2: PInteger{}; const {out}vt: PDouble{ dimension (ldvt m)}; const {in}ldvt: PInteger{}; const {inout}vt2: PDouble{ dimension (ldvt2 n)}; const {in}ldvt2: PInteger{}; const {in}idxc: PInteger{ dimension ( n )}; const {in}ctot: PInteger{ dimension ( 4 )}; const {inout}z: PDouble{ dimension (k)}; const {out}info: PInteger{}); stdcall;



//file name dlasd4
procedure dlasd4_(const {in}n: PInteger{}; const {in}i: PInteger{}; const {in}d: PDouble{ dimension ( n )}; const {in}z: PDouble{ dimension ( n )}; const {out}delta: PDouble{ dimension ( n )}; const {in}rho: PDouble{}; const {out}sigma: PDouble{}; const {out}work: PDouble{ dimension ( n )}; const {out}info: PInteger{}); stdcall;



//file name dlasd5
procedure dlasd5_(const {in}i: PInteger{}; const {in}d: PDouble{ dimension ( 2 )}; const {in}z: PDouble{ dimension ( 2 )}; const {out}delta: PDouble{ dimension ( 2 )}; const {in}rho: PDouble{}; const {out}dsigma: PDouble{}; const {out}work: PDouble{ dimension ( 2 )}); stdcall;



//file name dlasd6
procedure dlasd6_(const {in}icompq: PInteger{}; const {in}nl: PInteger{}; const {in}nr: PInteger{}; const {in}sqre: PInteger{}; const {inout}d: PDouble{ dimension ( nl+nr+1 )}; const {inout}vf: PDouble{ dimension ( m )}; const {inout}vl: PDouble{ dimension ( m )}; const {inout}alpha: PDouble{}; const {inout}beta: PDouble{}; const {inout}idxq: PInteger{ dimension ( n )}; const {out}perm: PInteger{ dimension ( n )}; const {out}givptr: PInteger{}; const {out}givcol: PInteger{ dimension ( ldgcol 2 )}; const {in}ldgcol: PInteger{}; const {out}givnum: PDouble{ dimension ( ldgnum 2 )}; const {in}ldgnum: PInteger{}; const {out}poles: PDouble{ dimension ( ldgnum 2 )}; const {out}difl: PDouble{ dimension ( n )}; const {out}difr: PDouble{}; const {out}z: PDouble{ dimension ( m )}; const {out}k: PInteger{}; const {out}c: PDouble{}; const {out}s: PDouble{}; const {out}work: PDouble{ dimension ( 4 * m )}; const {out}iwork: PInteger{ dimension ( 3 * n )}; const {out}info: PInteger{}); stdcall;



//file name dlasd7
procedure dlasd7_(const {in}icompq: PInteger{}; const {in}nl: PInteger{}; const {in}nr: PInteger{}; const {in}sqre: PInteger{}; const {out}k: PInteger{}; const {inout}d: PDouble{ dimension ( n )}; const {out}z: PDouble{ dimension ( m )}; const {out}zw: PDouble{ dimension ( m )}; const {inout}vf: PDouble{ dimension ( m )}; const {out}vfw: PDouble{ dimension ( m )}; const {inout}vl: PDouble{ dimension ( m )}; const {out}vlw: PDouble{ dimension ( m )}; const {in}alpha: PDouble{}; const {in}beta: PDouble{}; const {out}dsigma: PDouble{ dimension ( n )}; const {out}idx: PInteger{ dimension ( n )}; const {out}idxp: PInteger{ dimension ( n )}; const {in}idxq: PInteger{ dimension ( n )}; const {out}perm: PInteger{ dimension ( n )}; const {out}givptr: PInteger{}; const {out}givcol: PInteger{ dimension ( ldgcol 2 )}; const {in}ldgcol: PInteger{}; const {out}givnum: PDouble{ dimension ( ldgnum 2 )}; const {in}ldgnum: PInteger{}; const {out}c: PDouble{}; const {out}s: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name dlasd8
procedure dlasd8_(const {in}icompq: PInteger{}; const {in}k: PInteger{}; const {out}d: PDouble{ dimension ( k )}; const {inout}z: PDouble{ dimension ( k )}; const {inout}vf: PDouble{ dimension ( k )}; const {inout}vl: PDouble{ dimension ( k )}; const {out}difl: PDouble{ dimension ( k )}; const {out}difr: PDouble{}; const {in}lddifr: PInteger{}; const {inout}dsigma: PDouble{ dimension ( k )}; const {out}work: PDouble{ dimension (3*k)}; const {out}info: PInteger{}); stdcall;



//file name dlasda
procedure dlasda_(const {in}icompq: PInteger{}; const {in}smlsiz: PInteger{}; const {in}n: PInteger{}; const {in}sqre: PInteger{}; const {inout}d: PDouble{ dimension ( n )}; const {in}e: PDouble{ dimension ( m-1 )}; const {out}u: PDouble{}; const {in}ldu: PInteger{ ldu =n}; const {out}vt: PDouble{}; const {out}k: PInteger{}; const {out}difl: PDouble{ dimension ( ldu nlvl )}; const {out}difr: PDouble{}; const {out}z: PDouble{}; const {out}poles: PDouble{}; const {out}givptr: PInteger{}; const {out}givcol: PInteger{}; const {in}ldgcol: PInteger{ ldgcol =n}; const {out}perm: PInteger{}; const {out}givnum: PDouble{}; const {out}c: PDouble{}; const {out}s: PDouble{ dimension ( n ) if}; const {out}work: PDouble{ dimension}; const {out}iwork: PInteger{ dimension (7*n)}; const {out}info: PInteger{}); stdcall;



//file name dlasdq
procedure dlasdq_(const {in}uplo: PChar{*1}; const {in}sqre: PInteger{}; const {in}n: PInteger{}; const {in}ncvt: PInteger{}; const {in}nru: PInteger{}; const {in}ncc: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{}; const {inout}vt: PDouble{ dimension (ldvt ncvt)}; const {in}ldvt: PInteger{}; const {inout}u: PDouble{ dimension (ldu n)}; const {in}ldu: PInteger{}; const {inout}c: PDouble{ dimension (ldc ncc)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension (4*n)}; const {out}info: PInteger{}); stdcall;



//file name dlasdt
procedure dlasdt_(const {in}n: PInteger{}; const {out}lvl: PInteger{}; const {out}nd: PInteger{}; const {out}inode: PInteger{ dimension ( n )}; const {out}ndiml: PInteger{ dimension ( n )}; const {out}ndimr: PInteger{ dimension ( n )}; const {in}msub: PInteger{}); stdcall;



//file name dlaset
procedure dlaset_(const {in}uplo: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}alpha: PDouble{}; const {in}beta: PDouble{}; const {out}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}); stdcall;



//file name dlasq1
procedure dlasq1_(const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n)}; const {out}work: PDouble{ dimension (4*n)}; const {out}info: PInteger{}); stdcall;



//file name dlasq2
procedure dlasq2_(const {in}n: PInteger{}; const {inout}z: PDouble{ dimension ( 4*n )}; const {out}info: PInteger{}); stdcall;



//file name dlasq3
procedure dlasq3_(const {in}i0: PInteger{}; const {inout}n0: PInteger{}; const {inout}z: PDouble{ dimension ( 4*n0 )}; const {inout}pp: PInteger{}; const {out}dmin: PDouble{}; const {out}sigma: PDouble{}; const {inout}desig: PDouble{}; const {in}qmax: PDouble{}; const {inout}nfail: PInteger{}; const {inout}iter: PInteger{}; const {inout}ndiv: PInteger{}; const {in}ieee: PBoolean{}; const {inout}ttype: PInteger{}; const {inout}dmin1: PDouble{}; const {inout}dmin2: PDouble{}; const {inout}dn: PDouble{}; const {inout}dn1: PDouble{}; const {inout}dn2: PDouble{}; const {inout}g: PDouble{}; const {inout}tau: PDouble{}); stdcall;



//file name dlasq4
procedure dlasq4_(const {in}i0: PInteger{}; const {in}n0: PInteger{}; const {in}z: PDouble{ dimension ( 4*n0 )}; const {in}pp: PInteger{}; const {in}n0in: PInteger{}; const {in}dmin: PDouble{}; const {in}dmin1: PDouble{}; const {in}dmin2: PDouble{}; const {in}dn: PDouble{}; const {in}dn1: PDouble{}; const {in}dn2: PDouble{}; const {out}tau: PDouble{}; const {out}ttype: PInteger{}; const {inout}g: PDouble{}); stdcall;



//file name dlasq5
procedure dlasq5_(const {in}i0: PInteger{}; const {in}n0: PInteger{}; const {in}z: PDouble{ dimension ( 4*n )}; const {in}pp: PInteger{}; const {in}tau: PDouble{}; const {in}sigma: PDouble{}; const {out}dmin: PDouble{}; const {out}dmin1: PDouble{}; const {out}dmin2: PDouble{}; const {out}dn: PDouble{}; const {out}dnm1: PDouble{}; const {out}dnm2: PDouble{}; const {in}ieee: PBoolean{}; const {in}eps: PDouble{}); stdcall;



//file name dlasq6
procedure dlasq6_(const {in}i0: PInteger{}; const {in}n0: PInteger{}; const {in}z: PDouble{ dimension ( 4*n )}; const {in}pp: PInteger{}; const {out}dmin: PDouble{}; const {out}dmin1: PDouble{}; const {out}dmin2: PDouble{}; const {out}dn: PDouble{}; const {out}dnm1: PDouble{}; const {out}dnm2: PDouble{}); stdcall;



//file name dlasr
procedure dlasr_(const {in}side: PChar{*1}; const {in}pivot: PChar{*1}; const {in}direct: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}c: PDouble{ dimension}; const {in}s: PDouble{ dimension}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}); stdcall;



//file name dlasrt
procedure dlasrt_(const {in}id: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dlassq
procedure dlassq_(const {in}n: PInteger{}; const {in}x: PDouble{ dimension (1+(n-1)*incx)}; const {in}incx: PInteger{}; const {inout}scale: PDouble{}; const {inout}sumsq: PDouble{}); stdcall;



//file name dlasv2
procedure dlasv2_(const {in}f: PDouble{}; const {in}g: PDouble{}; const {in}h: PDouble{}; const {out}ssmin: PDouble{}; const {out}ssmax: PDouble{}; const {out}snl: PDouble{}; const {out}csl: PDouble{}; const {out}snr: PDouble{}; const {out}csr: PDouble{}); stdcall;



//file name dlaswlq
procedure dlaswlq_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDouble{}; const {in}ldt: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dlaswp
procedure dlaswp_(const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}k1: PInteger{}; const {in}k2: PInteger{}; const {in}ipiv: PInteger{ dimension (k1+(k2-k1)*abs(incx))}; const {in}incx: PInteger{}); stdcall;



//file name dlasy2
procedure dlasy2_(const {in}ltranl: PBoolean{}; const {in}ltranr: PBoolean{}; const {in}isgn: PInteger{}; const {in}n1: PInteger{}; const {in}n2: PInteger{}; const {in}tl: PDouble{ dimension (ldtl2)}; const {in}ldtl: PInteger{}; const {in}tr: PDouble{ dimension (ldtr2)}; const {in}ldtr: PInteger{}; const {in}b: PDouble{ dimension (ldb2)}; const {in}ldb: PInteger{}; const {out}scale: PDouble{}; const {out}x: PDouble{ dimension (ldx2)}; const {in}ldx: PInteger{}; const {out}xnorm: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name dlasyf
procedure dlasyf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}w: PDouble{ dimension (ldwnb)}; const {in}ldw: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dlasyf_aa
procedure dlasyf_aa_(const {in}uplo: PChar{*1}; const {in}j1: PInteger{}; const {in}m: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDouble{ dimension (ldam) for}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (m)}; const {inout}h: PDouble{ workspace dimension (ldhnb)}; const {in}ldh: PInteger{}; const {out}work: PDouble{ workspace dimension (m)}); stdcall;



//file name dlasyf_rk
procedure dlasyf_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PDouble{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}w: PDouble{ dimension (ldwnb)}; const {in}ldw: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dlasyf_rook
procedure dlasyf_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}w: PDouble{ dimension (ldwnb)}; const {in}ldw: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dlat2s
procedure dlat2s_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}sa: PSingle{ dimension (ldsan)}; const {in}ldsa: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dlatbs
procedure dlatbs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}normin: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}x: PDouble{ dimension (n)}; const {out}scale: PDouble{}; const {inout}cnorm: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dlatdf
procedure dlatdf_(const {in}ijob: PInteger{}; const {in}n: PInteger{}; const {in}z: PDouble{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {inout}rhs: PDouble{ dimension (n)}; const {inout}rdsum: PDouble{}; const {inout}rdscal: PDouble{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}jpiv: PInteger{ dimension (n)}); stdcall;



//file name dlatps
procedure dlatps_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}normin: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDouble{ dimension (n*(n+1)/2)}; const {inout}x: PDouble{ dimension (n)}; const {out}scale: PDouble{}; const {inout}cnorm: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dlatrd
procedure dlatrd_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PDouble{ dimension (n-1)}; const {out}tau: PDouble{ dimension (n-1)}; const {out}w: PDouble{ dimension (ldwnb)}; const {in}ldw: PInteger{}); stdcall;



//file name dlatrs
procedure dlatrs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}normin: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}x: PDouble{ dimension (n)}; const {out}scale: PDouble{}; const {inout}cnorm: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dlatrz
procedure dlatrz_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDouble{ dimension (m)}; const {out}work: PDouble{ dimension (m)}); stdcall;



//file name dlatsqr
procedure dlatsqr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDouble{}; const {in}ldt: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dlauu2
procedure dlauu2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dlauum
procedure dlauum_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dopgtr
procedure dopgtr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDouble{ dimension (n*(n+1)/2)}; const {in}tau: PDouble{ dimension (n-1)}; const {out}q: PDouble{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}work: PDouble{ dimension (n-1)}; const {out}info: PInteger{}); stdcall;



//file name dopmtr
procedure dopmtr_(const {in}side: PChar{*1}; const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}ap: PDouble{ dimension}; const {in}tau: PDouble{ dimension (m-1) if side = 'l'}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension}; const {out}info: PInteger{}); stdcall;



//file name dorbdb
procedure dorbdb_(const {in}trans: PChar{}; const {in}signs: PChar{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PDouble{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x12: PDouble{ dimension (ldx12m-q)}; const {in}ldx12: PInteger{}; const {inout}x21: PDouble{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {inout}x22: PDouble{ dimension (ldx22m-q)}; const {in}ldx22: PInteger{}; const {out}theta: PDouble{ dimension (q)}; const {out}phi: PDouble{ dimension (q-1)}; const {out}taup1: PDouble{ dimension (p)}; const {out}taup2: PDouble{ dimension (m-p)}; const {out}tauq1: PDouble{ dimension (q)}; const {out}tauq2: PDouble{ dimension (m-q)}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dorbdb1
procedure dorbdb1_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PDouble{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PDouble{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PDouble{ dimension (q)}; const {out}phi: PDouble{ dimension (q-1)}; const {out}taup1: PDouble{ dimension (p)}; const {out}taup2: PDouble{ dimension (m-p)}; const {out}tauq1: PDouble{ dimension (q)}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dorbdb2
procedure dorbdb2_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PDouble{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PDouble{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PDouble{ dimension (q)}; const {out}phi: PDouble{ dimension (q-1)}; const {out}taup1: PDouble{ dimension (p)}; const {out}taup2: PDouble{ dimension (m-p)}; const {out}tauq1: PDouble{ dimension (q)}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dorbdb3
procedure dorbdb3_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PDouble{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PDouble{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PDouble{ dimension (q)}; const {out}phi: PDouble{ dimension (q-1)}; const {out}taup1: PDouble{ dimension (p)}; const {out}taup2: PDouble{ dimension (m-p)}; const {out}tauq1: PDouble{ dimension (q)}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dorbdb4
procedure dorbdb4_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PDouble{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PDouble{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PDouble{ dimension (q)}; const {out}phi: PDouble{ dimension (q-1)}; const {out}taup1: PDouble{ dimension (p)}; const {out}taup2: PDouble{ dimension (m-p)}; const {out}tauq1: PDouble{ dimension (q)}; const {out}phantom: PDouble{ dimension (m)}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dorbdb5
procedure dorbdb5_(const {in}m1: PInteger{}; const {in}m2: PInteger{}; const {in}n: PInteger{}; const {inout}x1: PDouble{ dimension (m1)}; const {in}incx1: PInteger{}; const {inout}x2: PDouble{ dimension (m2)}; const {in}incx2: PInteger{}; const {in}q1: PDouble{ dimension (ldq1 n)}; const {in}ldq1: PInteger{}; const {in}q2: PDouble{ dimension (ldq2 n)}; const {in}ldq2: PInteger{}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dorbdb6
procedure dorbdb6_(const {in}m1: PInteger{}; const {in}m2: PInteger{}; const {in}n: PInteger{}; const {inout}x1: PDouble{ dimension (m1)}; const {in}incx1: PInteger{}; const {inout}x2: PDouble{ dimension (m2)}; const {in}incx2: PInteger{}; const {in}q1: PDouble{ dimension (ldq1 n)}; const {in}ldq1: PInteger{}; const {in}q2: PDouble{ dimension (ldq2 n)}; const {in}ldq2: PInteger{}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dorcsd
procedure dorcsd_(const {in}jobu1: PChar{}; const {in}jobu2: PChar{}; const {in}jobv1t: PChar{}; const {in}jobv2t: PChar{}; const {in}trans: PChar{}; const {in}signs: PChar{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PDouble{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x12: PDouble{ dimension (ldx12m-q)}; const {in}ldx12: PInteger{}; const {inout}x21: PDouble{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {inout}x22: PDouble{ dimension (ldx22m-q)}; const {in}ldx22: PInteger{}; const {out}theta: PDouble{ dimension (r) in which r =}; const {out}u1: PDouble{ dimension (ldu1p)}; const {in}ldu1: PInteger{}; const {out}u2: PDouble{ dimension (ldu2m-p)}; const {in}ldu2: PInteger{}; const {out}v1t: PDouble{ dimension (ldv1tq)}; const {in}ldv1t: PInteger{}; const {out}v2t: PDouble{ dimension (ldv2tm-q)}; const {in}ldv2t: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (m-min(p m-p q m-q))}; const {out}info: PInteger{}); stdcall;



//file name dorcsd2by1
procedure dorcsd2by1_(const {in}jobu1: PChar{}; const {in}jobu2: PChar{}; const {in}jobv1t: PChar{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PDouble{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PDouble{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PDouble{ dimension (r) in which r =}; const {out}u1: PDouble{ dimension (p)}; const {in}ldu1: PInteger{}; const {out}u2: PDouble{ dimension (m-p)}; const {in}ldu2: PInteger{}; const {out}v1t: PDouble{ dimension (q)}; const {in}ldv1t: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (m-min(pm-pqm-q))}; const {out}info: PInteger{}); stdcall;



//file name dorg2l
procedure dorg2l_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {out}work: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dorg2r
procedure dorg2r_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {out}work: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dorgbr
procedure dorgbr_(const {in}vect: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dorghr
procedure dorghr_(const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (n-1)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dorgl2
procedure dorgl2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {out}work: PDouble{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name dorglq
procedure dorglq_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dorgql
procedure dorgql_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dorgqr
procedure dorgqr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dorgr2
procedure dorgr2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {out}work: PDouble{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name dorgrq
procedure dorgrq_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dorgtr
procedure dorgtr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (n-1)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dorgtsqr
procedure dorgtsqr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}t: PDouble{}; const {in}ldt: PInteger{}; const {out}work: PDouble{ dimension (max(2lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dorgtsqr_row
procedure dorgtsqr_row_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}t: PDouble{}; const {in}ldt: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dorhr_col
procedure dorhr_col_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDouble{}; const {in}ldt: PInteger{}; const {out}d: PDouble{ dimension min(mn)}; const {out}info: PInteger{}); stdcall;



//file name dorm2l
procedure dorm2l_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDouble{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension}; const {out}info: PInteger{}); stdcall;



//file name dorm2r
procedure dorm2r_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDouble{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension}; const {out}info: PInteger{}); stdcall;



//file name dorm22
procedure dorm22_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}n1: PInteger{}; const {in}n2: PInteger{}; const {in}q: PDouble{ dimension}; const {in}ldq: PInteger{}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dormbr
procedure dormbr_(const {in}vect: PChar{*1}; const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDouble{ dimension}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (min(nqk))}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dormhr
procedure dormhr_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {in}a: PDouble{ dimension}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dorml2
procedure dorml2_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDouble{ dimension}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension}; const {out}info: PInteger{}); stdcall;



//file name dormlq
procedure dormlq_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDouble{ dimension}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dormql
procedure dormql_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDouble{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dormqr
procedure dormqr_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDouble{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dormr2
procedure dormr2_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDouble{ dimension}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension}; const {out}info: PInteger{}); stdcall;



//file name dormr3
procedure dormr3_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}a: PDouble{ dimension}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension}; const {out}info: PInteger{}); stdcall;



//file name dormrq
procedure dormrq_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDouble{ dimension}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dormrz
procedure dormrz_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}a: PDouble{ dimension}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension (k)}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dormtr
procedure dormtr_(const {in}side: PChar{*1}; const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension}; const {in}lda: PInteger{}; const {in}tau: PDouble{ dimension}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dpbcon
procedure dpbcon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dpbequ
procedure dpbequ_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}s: PDouble{ dimension (n)}; const {out}scond: PDouble{}; const {out}amax: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name dpbrfs
procedure dpbrfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PDouble{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dpbstf
procedure dpbstf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dpbsv
procedure dpbsv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dpbsvx
procedure dpbsvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}afb: PDouble{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {inout}equed: PChar{*1}; const {inout}s: PDouble{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dpbtf2
procedure dpbtf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dpbtrf
procedure dpbtrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dpbtrs
procedure dpbtrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dpftrf
procedure dpftrf_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension ( n*(n+1)/2 );}; const {out}info: PInteger{}); stdcall;



//file name dpftri
procedure dpftri_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension ( n*(n+1)/2 )}; const {out}info: PInteger{}); stdcall;



//file name dpftrs
procedure dpftrs_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension ( n*(n+1)/2 )}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dpocon
procedure dpocon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dpoequ
procedure dpoequ_(const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PDouble{ dimension (n)}; const {out}scond: PDouble{}; const {out}amax: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name dpoequb
procedure dpoequb_(const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PDouble{ dimension (n)}; const {out}scond: PDouble{}; const {out}amax: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name dporfs
procedure dporfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dporfsx
procedure dporfsx_(const {in}uplo: PChar{*1}; const {in}equed: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}s: PDouble{ dimension (n)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}berr: PDouble{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PDouble{ dimension (nparams)}; const {out}work: PDouble{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dposv
procedure dposv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dposvx
procedure dposvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}equed: PChar{*1}; const {inout}s: PDouble{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dposvxx
procedure dposvxx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}equed: PChar{*1}; const {inout}s: PDouble{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}rpvgrw: PDouble{}; const {out}berr: PDouble{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PDouble{ dimension nparams}; const {out}work: PDouble{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dpotf2
procedure dpotf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dpotrf
procedure dpotrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dpotrf2
procedure dpotrf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dpotri
procedure dpotri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dpotrs
procedure dpotrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dppcon
procedure dppcon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDouble{ dimension (n*(n+1)/2)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dppequ
procedure dppequ_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDouble{ dimension (n*(n+1)/2)}; const {out}s: PDouble{ dimension (n)}; const {out}scond: PDouble{}; const {out}amax: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name dpprfs
procedure dpprfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PDouble{ dimension (n*(n+1)/2)}; const {in}afp: PDouble{ dimension (n*(n+1)/2)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dppsv
procedure dppsv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ap: PDouble{ dimension (n*(n+1)/2)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dppsvx
procedure dppsvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ap: PDouble{ dimension (n*(n+1)/2)}; const {inout}afp: PDouble{ dimension (n*(n+1)/2)}; const {inout}equed: PChar{*1}; const {inout}s: PDouble{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dpptrf
procedure dpptrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDouble{ dimension (n*(n+1)/2)}; const {out}info: PInteger{}); stdcall;



//file name dpptri
procedure dpptri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDouble{ dimension (n*(n+1)/2)}; const {out}info: PInteger{}); stdcall;



//file name dpptrs
procedure dpptrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PDouble{ dimension (n*(n+1)/2)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dpstf2
procedure dpstf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {out}piv: PInteger{ dimension (n)}; const {out}rank: PInteger{}; const {in}tol: PDouble{}; const {in}lda: PInteger{}; const {out}work: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name dpstrf
procedure dpstrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}piv: PInteger{ dimension (n)}; const {out}rank: PInteger{}; const {in}tol: PDouble{}; const {out}work: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name dptcon
procedure dptcon_(const {in}n: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}e: PDouble{ dimension (n-1)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dpteqr
procedure dpteqr_(const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n-1)}; const {inout}z: PDouble{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (4*n)}; const {out}info: PInteger{}); stdcall;



//file name dptrfs
procedure dptrfs_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}e: PDouble{ dimension (n-1)}; const {in}df: PDouble{ dimension (n)}; const {in}ef: PDouble{ dimension (n-1)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name dptsv
procedure dptsv_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n-1)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dptsvx
procedure dptsvx_(const {in}fact: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}e: PDouble{ dimension (n-1)}; const {inout}df: PDouble{ dimension (n)}; const {inout}ef: PDouble{ dimension (n-1)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name dpttrf
procedure dpttrf_(const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n-1)}; const {out}info: PInteger{}); stdcall;



//file name dpttrs
procedure dpttrs_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}e: PDouble{ dimension (n-1)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dptts2
procedure dptts2_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}e: PDouble{ dimension (n-1)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}); stdcall;



//file name drscl
procedure drscl_(const {in}n: PInteger{}; const {in}sa: PDouble{}; const {inout}sx: PDouble{ dimension}; const {in}incx: PInteger{}); stdcall;



//file name dsb2st_kernels
procedure  dsb2st_kernels(const {in}uplo: PChar{*1}; const {in}wantz: PBoolean{ which indicate if eigenvalue are requested or both}; const {in}ttype: PInteger{}; const {in}st: PInteger{}; const {in}ed: PInteger{}; const {in}sweep: PInteger{}; const {in}n: PInteger{ the order of the matrix a}; const {in}nb: PInteger{ the size of the band}; const {in}ib: PInteger{}; a: PDouble{ a pointer to the matrix a}; const {in}lda: PInteger{ the leading dimension of the matrix a}; const {out}v: PDouble{ dimension 2*n if eigenvalues only are}; const {out}tau: PDouble{ dimension (2*n)}; const {in}ldvt: PInteger{}; const {out}work: PDouble{ workspace of size nb});  stdcall;



//file name dsbev
procedure dsbev_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDouble{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (max(13*n-2))}; const {out}info: PInteger{}); stdcall;



//file name dsbev_2stage
procedure dsbev_2stage_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDouble{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsbevd
procedure dsbevd_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDouble{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDouble{}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsbevd_2stage
procedure dsbevd_2stage_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDouble{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension lwork}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsbevx
procedure dsbevx_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDouble{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}q: PDouble{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsbevx_2stage
procedure dsbevx_2stage_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDouble{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}q: PDouble{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsbgst
procedure dsbgst_(const {in}vect: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ka: PInteger{}; const {in}kb: PInteger{}; const {inout}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}bb: PDouble{ dimension (ldbbn)}; const {in}ldbb: PInteger{}; const {out}x: PDouble{ dimension (ldxn)}; const {in}ldx: PInteger{}; const {out}work: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name dsbgv
procedure dsbgv_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ka: PInteger{}; const {in}kb: PInteger{}; const {inout}ab: PDouble{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {inout}bb: PDouble{ dimension (ldbb n)}; const {in}ldbb: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (3*n)}; const {out}info: PInteger{}); stdcall;



//file name dsbgvd
procedure dsbgvd_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ka: PInteger{}; const {in}kb: PInteger{}; const {inout}ab: PDouble{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {inout}bb: PDouble{ dimension (ldbb n)}; const {in}ldbb: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsbgvx
procedure dsbgvx_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ka: PInteger{}; const {in}kb: PInteger{}; const {inout}ab: PDouble{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {inout}bb: PDouble{ dimension (ldbb n)}; const {in}ldbb: PInteger{}; const {out}q: PDouble{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name dsbtrd
procedure dsbtrd_(const {in}vect: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}d: PDouble{ dimension (n)}; const {out}e: PDouble{ dimension (n-1)}; const {inout}q: PDouble{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}work: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsfrk
procedure dsfrk_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}alpha: PDouble{}; const {in}a: PDouble{ dimension (ldaka)}; const {in}lda: PInteger{}; const {in}beta: PDouble{}; const {inout}c: PDouble{ dimension (nt)}); stdcall;



//file name dsgesv
procedure dsgesv_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}work: PDouble{ dimension (nnrhs)}; const {out}swork: PSingle{ dimension (n*(n+nrhs))}; const {out}iter: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dspcon
procedure dspcon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDouble{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDouble{ dimension (2*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dspev
procedure dspev_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDouble{ dimension (n*(n+1)/2)}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (3*n)}; const {out}info: PInteger{}); stdcall;



//file name dspevd
procedure dspevd_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDouble{ dimension (n*(n+1)/2)}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dspevx
procedure dspevx_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDouble{ dimension (n*(n+1)/2)}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (8*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dspgst
procedure dspgst_(const {in}itype: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDouble{ dimension (n*(n+1)/2)}; const {in}bp: PDouble{ dimension (n*(n+1)/2)}; const {out}info: PInteger{}); stdcall;



//file name dspgv
procedure dspgv_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDouble{ dimension (n*(n+1)/2)}; const {inout}bp: PDouble{ dimension (n*(n+1)/2)}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (3*n)}; const {out}info: PInteger{}); stdcall;



//file name dspgvd
procedure dspgvd_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDouble{ dimension (n*(n+1)/2)}; const {inout}bp: PDouble{ dimension (n*(n+1)/2)}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dspgvx
procedure dspgvx_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDouble{ dimension (n*(n+1)/2)}; const {inout}bp: PDouble{ dimension (n*(n+1)/2)}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (8*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsposv
procedure dsposv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{}; const {in}lda: PInteger{}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}work: PDouble{ dimension (nnrhs)}; const {out}swork: PSingle{ dimension (n*(n+nrhs))}; const {out}iter: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsprfs
procedure dsprfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PDouble{ dimension (n*(n+1)/2)}; const {in}afp: PDouble{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dspsv
procedure dspsv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ap: PDouble{ dimension (n*(n+1)/2)}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dspsvx
procedure dspsvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PDouble{ dimension (n*(n+1)/2)}; const {inout}afp: PDouble{ dimension (n*(n+1)/2)}; const {inout}ipiv: PInteger{ dimension (n)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsptrd
procedure dsptrd_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDouble{ dimension (n*(n+1)/2)}; const {out}d: PDouble{ dimension (n)}; const {out}e: PDouble{ dimension (n-1)}; const {out}tau: PDouble{ dimension (n-1)}; const {out}info: PInteger{}); stdcall;



//file name dsptrf
procedure dsptrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDouble{ dimension (n*(n+1)/2)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsptri
procedure dsptri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDouble{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsptrs
procedure dsptrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PDouble{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dstebz
procedure dstebz_(const {in}range: PChar{*1}; const {in}order: PChar{*1}; const {in}n: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {in}d: PDouble{ dimension (n)}; const {in}e: PDouble{ dimension (n-1)}; const {out}m: PInteger{}; const {out}nsplit: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}iblock: PInteger{ dimension (n)}; const {out}isplit: PInteger{ dimension (n)}; const {out}work: PDouble{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (3*n)}; const {out}info: PInteger{}); stdcall;



//file name dstedc
procedure dstedc_(const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n-1)}; const {inout}z: PDouble{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dstegr
procedure dstegr_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n)}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz max(1m) )}; const {in}ldz: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (liwork)}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dstein
procedure dstein_(const {in}n: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}e: PDouble{ dimension (n-1)}; const {in}m: PInteger{}; const {in}w: PDouble{ dimension (n)}; const {in}iblock: PInteger{ dimension (n)}; const {in}isplit: PInteger{ dimension (n)}; const {out}z: PDouble{ dimension (ldz m)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (5*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}ifail: PInteger{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name dstemr
procedure dstemr_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n)}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz max(1m) )}; const {in}ldz: PInteger{}; const {in}nzc: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {inout}tryrac: PBoolean{}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (liwork)}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsteqr
procedure dsteqr_(const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n-1)}; const {inout}z: PDouble{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (max(12*n-2))}; const {out}info: PInteger{}); stdcall;



//file name dsterf
procedure dsterf_(const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n-1)}; const {out}info: PInteger{}); stdcall;



//file name dstev
procedure dstev_(const {in}jobz: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n-1)}; const {out}z: PDouble{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (max(12*n-2))}; const {out}info: PInteger{}); stdcall;



//file name dstevd
procedure dstevd_(const {in}jobz: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n-1)}; const {out}z: PDouble{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDouble{}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dstevr
procedure dstevr_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (max(1n-1))}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz max(1m) )}; const {in}ldz: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dstevx
procedure dstevx_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (max(1n-1))}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz max(1m) )}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (5*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsycon
procedure dsycon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDouble{ dimension (2*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsycon_3
procedure dsycon_3_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PDouble{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDouble{ dimension (2*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsycon_rook
procedure dsycon_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDouble{ dimension (2*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsyconv
procedure dsyconv_(const {in}uplo: PChar{*1}; const {in}way: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}e: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsyconvf
procedure dsyconvf_(const {in}uplo: PChar{*1}; const {in}way: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}e: PDouble{ dimension (n)}; const {inout}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsyconvf_rook
procedure dsyconvf_rook_(const {in}uplo: PChar{*1}; const {in}way: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}e: PDouble{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsyequb
procedure dsyequb_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PDouble{ dimension (n)}; const {out}scond: PDouble{}; const {out}amax: PDouble{}; const {out}work: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name dsyev
procedure dsyev_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsyev_2stage
procedure dsyev_2stage_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}work: PDouble{ dimension lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsyevd
procedure dsyevd_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}work: PDouble{}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsyevd_2stage
procedure dsyevd_2stage_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}work: PDouble{}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsyevr
procedure dsyevr_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsyevr_2stage
procedure dsyevr_2stage_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsyevx
procedure dsyevx_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsyevx_2stage
procedure dsyevx_2stage_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsygs2
procedure dsygs2_(const {in}itype: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsygst
procedure dsygst_(const {in}itype: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsygv
procedure dsygv_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsygv_2stage
procedure dsygv_2stage_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsygvd
procedure dsygvd_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsygvx
procedure dsygvx_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDouble{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsyrfs
procedure dsyrfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsyrfsx
procedure dsyrfsx_(const {in}uplo: PChar{*1}; const {in}equed: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}s: PDouble{ dimension (n)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}berr: PDouble{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PDouble{ dimension (nparams)}; const {out}work: PDouble{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsysv
procedure dsysv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsysv_aa
procedure dsysv_aa_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsysv_aa_2stage
procedure dsysv_aa_2stage_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tb: PDouble{ dimension (ltb)}; const {in}ltb: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}ipiv2: PInteger{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDouble{ workspace of size lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsysv_rk
procedure dsysv_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PDouble{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDouble{ dimension ( max(1lwork) )}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsysv_rook
procedure dsysv_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsysvx
procedure dsysvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsysvxx
procedure dsysvxx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PDouble{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}s: PDouble{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}rpvgrw: PDouble{}; const {out}berr: PDouble{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PDouble{ dimension (nparams)}; const {out}work: PDouble{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsyswapr
procedure dsyswapr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}i1: PInteger{}; const {in}i2: PInteger{}); stdcall;



//file name dsytd2
procedure dsytd2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PDouble{ dimension (n)}; const {out}e: PDouble{ dimension (n-1)}; const {out}tau: PDouble{ dimension (n-1)}; const {out}info: PInteger{}); stdcall;



//file name dsytf2
procedure dsytf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsytf2_rk
procedure dsytf2_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PDouble{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsytf2_rook
procedure dsytf2_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsytrd
procedure dsytrd_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PDouble{ dimension (n)}; const {out}e: PDouble{ dimension (n-1)}; const {out}tau: PDouble{ dimension (n-1)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsytrd_2stage
procedure dsytrd_2stage_(const {in}vect: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PDouble{ dimension (n)}; const {out}e: PDouble{ dimension (n-1)}; const {out}tau: PDouble{ dimension (n-kd)}; const {out}hous2: PDouble{ dimension (lhous2)}; const {in}lhous2: PInteger{}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsytrd_sb2st
procedure dsytrd_sb2st_(const {in}stage1: PChar{*1}; const {in}vect: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}d: PDouble{ dimension (n)}; const {out}e: PDouble{ dimension (n-1)}; const {out}hous: PDouble{ dimension lhous that}; const {in}lhous: PInteger{}; const {out}work: PDouble{ dimension lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{});stdcall;



//file name dsytrd_sy2sb
procedure dsytrd_sy2sb_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}tau: PDouble{ dimension (n-kd)}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsytrf
procedure dsytrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsytrf_aa
procedure dsytrf_aa_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsytrf_aa_2stage
procedure dsytrf_aa_2stage_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tb: PDouble{ dimension (ltb)}; const {in}ltb: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}ipiv2: PInteger{ dimension (n)}; const {out}work: PDouble{ workspace of size lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;


//file name dsytrf_rk
procedure dsytrf_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PDouble{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PDouble{ dimension ( max(1lwork) )}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsytrf_rook
procedure dsytrf_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsytri
procedure dsytri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsytri_3
procedure dsytri_3_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PDouble{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDouble{ dimension (n+nb+1)*(nb+3)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsytri_3x
procedure dsytri_3x_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PDouble{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDouble{ dimension (n+nb+1nb+3)}; const {in}nb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsytri_rook
procedure dsytri_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dsytri2
procedure dsytri2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDouble{ dimension (n+nb+1)*(nb+3)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsytri2x
procedure dsytri2x_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDouble{ dimension (n+nb+1nb+3)}; const {in}nb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsytrs
procedure dsytrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsytrs_3
procedure dsytrs_3_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PDouble{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsytrs_aa
procedure dsytrs_aa_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsytrs_aa_2stage
procedure dsytrs_aa_2stage_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tb: PDouble{ dimension (ltb)}; const {in}ltb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}ipiv2: PInteger{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsytrs_rook
procedure dsytrs_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dsytrs2
procedure dsytrs2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dtbcon
procedure dtbcon_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}rcond: PDouble{}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dtbrfs
procedure dtbrfs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {in}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dtbtrs
procedure dtbtrs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PDouble{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dtfsm
procedure dtfsm_(const {in}transr: PChar{*1}; const {in}side: PChar{*1}; const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}alpha: PDouble{}; const {in}a: PDouble{ dimension (nt)}; const {inout}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}); stdcall;



//file name dtftri
procedure dtftri_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (0:nt-1);}; const {out}info: PInteger{}); stdcall;



//file name dtfttp
procedure dtfttp_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}arf: PDouble{ dimension ( n*(n+1)/2 )}; const {out}ap: PDouble{ dimension ( n*(n+1)/2 )}; const {out}info: PInteger{}); stdcall;



//file name dtfttr
procedure dtfttr_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}arf: PDouble{ dimension (n*(n+1)/2)}; const {out}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dtgevc
procedure dtgevc_(const {in}side: PChar{*1}; const {in}howmny: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}s: PDouble{ dimension (ldsn)}; const {in}lds: PInteger{}; const {in}p: PDouble{ dimension (ldpn)}; const {in}ldp: PInteger{}; const {inout}vl: PDouble{ dimension (ldvlmm)}; const {in}ldvl: PInteger{}; const {inout}vr: PDouble{ dimension (ldvrmm)}; const {in}ldvr: PInteger{}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PDouble{ dimension (6*n)}; const {out}info: PInteger{}); stdcall;



//file name dtgex2
procedure dtgex2_(const {in}wantq: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimensions (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimensions (ldbn)}; const {in}ldb: PInteger{}; const {inout}q: PDouble{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {inout}z: PDouble{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {in}j1: PInteger{}; const {in}n1: PInteger{}; const {in}n2: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dtgexc
procedure dtgexc_(const {in}wantq: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {inout}q: PDouble{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {inout}z: PDouble{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {inout}ifst: PInteger{}; const {inout}ilst: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dtgsen
procedure dtgsen_(const {in}ijob: PInteger{}; const {in}wantq: PBoolean{}; const {in}wantz: PBoolean{}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension(ldan)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension(ldbn)}; const {in}ldb: PInteger{}; const {out}alphar: PDouble{ dimension (n)}; const {out}alphai: PDouble{ dimension (n)}; const {out}beta: PDouble{ dimension (n)}; const {inout}q: PDouble{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {inout}z: PDouble{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}m: PInteger{}; const {out}pl: PDouble{}; const {out}pr: PDouble{}; const {out}dif: PDouble{ dimension (2)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dtgsja
procedure dtgsja_(const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}jobq: PChar{*1}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {in}tola: PDouble{}; const {in}tolb: PDouble{}; const {out}alpha: PDouble{ dimension (n)}; const {out}beta: PDouble{ dimension (n)}; const {inout}u: PDouble{ dimension (ldum)}; const {in}ldu: PInteger{}; const {inout}v: PDouble{ dimension (ldvp)}; const {in}ldv: PInteger{}; const {inout}q: PDouble{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}work: PDouble{ dimension (2*n)}; const {out}ncycle: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dtgsna
procedure dtgsna_(const {in}job: PChar{*1}; const {in}howmny: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {in}vl: PDouble{ dimension (ldvlm)}; const {in}ldvl: PInteger{}; const {in}vr: PDouble{ dimension (ldvrm)}; const {in}ldvr: PInteger{}; const {out}s: PDouble{ dimension (mm)}; const {out}dif: PDouble{ dimension (mm)}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (n + 6)}; const {out}info: PInteger{}); stdcall;



//file name dtgsy2
procedure dtgsy2_(const {in}trans: PChar{*1}; const {in}ijob: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (lda m)}; const {in}lda: PInteger{}; const {in}b: PDouble{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {inout}c: PDouble{ dimension (ldc n)}; const {in}ldc: PInteger{}; const {in}d: PDouble{ dimension (ldd m)}; const {in}ldd: PInteger{}; const {in}e: PDouble{ dimension (lde n)}; const {in}lde: PInteger{}; const {inout}f: PDouble{ dimension (ldf n)}; const {in}ldf: PInteger{}; const {out}scale: PDouble{}; const {inout}rdsum: PDouble{}; const {inout}rdscal: PDouble{}; const {out}iwork: PInteger{ dimension (m+n+2)}; const {out}pq: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dtgsyl
procedure dtgsyl_(const {in}trans: PChar{*1}; const {in}ijob: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (lda m)}; const {in}lda: PInteger{}; const {in}b: PDouble{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {inout}c: PDouble{ dimension (ldc n)}; const {in}ldc: PInteger{}; const {in}d: PDouble{ dimension (ldd m)}; const {in}ldd: PInteger{}; const {in}e: PDouble{ dimension (lde n)}; const {in}lde: PInteger{}; const {inout}f: PDouble{ dimension (ldf n)}; const {in}ldf: PInteger{}; const {out}dif: PDouble{}; const {out}scale: PDouble{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (m+n+6)}; const {out}info: PInteger{}); stdcall;



//file name dtpcon
procedure dtpcon_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDouble{ dimension (n*(n+1)/2)}; const {out}rcond: PDouble{}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dtplqt
procedure dtplqt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {in}mb: PInteger{}; const {inout}a: PDouble{ dimension (ldam)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}t: PDouble{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}work: PDouble{ dimension (mb*m)}; const {out}info: PInteger{}); stdcall;



//file name dtplqt2
procedure dtplqt2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {inout}a: PDouble{ dimension (ldam)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}t: PDouble{ dimension (ldtm)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dtpmlqt
procedure dtpmlqt_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}mb: PInteger{}; const {in}v: PDouble{ dimension (ldvk)}; const {in}ldv: PInteger{}; const {in}t: PDouble{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}a: PDouble{ dimension}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}work: PDouble{ the dimension of work is}; const {out}info: PInteger{}); stdcall;



//file name dtpmqrt
procedure dtpmqrt_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}nb: PInteger{}; const {in}v: PDouble{ dimension (ldvk)}; const {in}ldv: PInteger{}; const {in}t: PDouble{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}a: PDouble{ dimension}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}work: PDouble{ the dimension of work is}; const {out}info: PInteger{}); stdcall;



//file name dtpqrt
procedure dtpqrt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}t: PDouble{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}work: PDouble{ dimension (nb*n)}; const {out}info: PInteger{}); stdcall;



//file name dtpqrt2
procedure dtpqrt2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}t: PDouble{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dtprfb
procedure dtprfb_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}v: PDouble{ dimension}; const {in}ldv: PInteger{}; const {in}t: PDouble{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}a: PDouble{ dimension}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}work: PDouble{ dimension}; const {in}ldwork: PInteger{}); stdcall;



//file name dtprfs
procedure dtprfs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PDouble{ dimension (n*(n+1)/2)}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {in}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dtptri
procedure dtptri_(const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDouble{ dimension (n*(n+1)/2)}; const {out}info: PInteger{}); stdcall;



//file name dtptrs
procedure dtptrs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PDouble{ dimension (n*(n+1)/2)}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dtpttf
procedure dtpttf_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDouble{ dimension ( n*(n+1)/2 )}; const {out}arf: PDouble{ dimension ( n*(n+1)/2 )}; const {out}info: PInteger{}); stdcall;



//file name dtpttr
procedure dtpttr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDouble{ dimension ( n*(n+1)/2 )}; const {out}a: PDouble{ dimension ( lda n )}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dtrcon
procedure dtrcon_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}rcond: PDouble{}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dtrevc
procedure dtrevc_(const {in}side: PChar{*1}; const {in}howmny: PChar{*1}; const {inout}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}t: PDouble{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {inout}vl: PDouble{ dimension (ldvlmm)}; const {in}ldvl: PInteger{}; const {inout}vr: PDouble{ dimension (ldvrmm)}; const {in}ldvr: PInteger{}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PDouble{ dimension (3*n)}; const {out}info: PInteger{}); stdcall;



//file name dtrevc3
procedure dtrevc3_(const {in}side: PChar{*1}; const {in}howmny: PChar{*1}; const {inout}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}t: PDouble{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {inout}vl: PDouble{ dimension (ldvlmm)}; const {in}ldvl: PInteger{}; const {inout}vr: PDouble{ dimension (ldvrmm)}; const {in}ldvr: PInteger{}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dtrexc
procedure dtrexc_(const {in}compq: PChar{*1}; const {in}n: PInteger{}; const {inout}t: PDouble{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {inout}q: PDouble{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {inout}ifst: PInteger{}; const {inout}ilst: PInteger{}; const {out}work: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dtrrfs
procedure dtrrfs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {in}x: PDouble{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDouble{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name dtrsen
procedure dtrsen_(const {in}job: PChar{*1}; const {in}compq: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {inout}t: PDouble{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {inout}q: PDouble{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}wr: PDouble{ dimension (n)}; const {out}wi: PDouble{ dimension (n)}; const {out}m: PInteger{}; const {out}s: PDouble{}; const {out}sep: PDouble{}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dtrsna
procedure dtrsna_(const {in}job: PChar{*1}; const {in}howmny: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}t: PDouble{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {in}vl: PDouble{ dimension (ldvlm)}; const {in}ldvl: PInteger{}; const {in}vr: PDouble{ dimension (ldvrm)}; const {in}ldvr: PInteger{}; const {out}s: PDouble{ dimension (mm)}; const {out}sep: PDouble{ dimension (mm)}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PDouble{ dimension (ldworkn+6)}; const {in}ldwork: PInteger{}; const {out}iwork: PInteger{ dimension (2*(n-1))}; const {out}info: PInteger{}); stdcall;



//file name dtrsyl
procedure dtrsyl_(const {in}trana: PChar{*1}; const {in}tranb: PChar{*1}; const {in}isgn: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldam)}; const {in}lda: PInteger{}; const {in}b: PDouble{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {inout}c: PDouble{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}scale: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name dtrti2
procedure dtrti2_(const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dtrtri
procedure dtrtri_(const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dtrtrs
procedure dtrtrs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDouble{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dtrttf
procedure dtrttf_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}arf: PDouble{ dimension (nt)}; const {out}info: PInteger{}); stdcall;



//file name dtrttp
procedure dtrttp_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ap: PDouble{ dimension (n*(n+1)/2)}; const {out}info: PInteger{}); stdcall;



//file name dtzrzf
procedure dtzrzf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDouble{ dimension (m)}; const {out}work: PDouble{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name dzsum1
function dzsum1_(const {in}n: PInteger{}; const {in}cx: PDComplex{ dimension (n)}; const {in}incx: PInteger{}):Double{}; stdcall;



//file name icmax1
function icmax1_(const {in}n: PInteger{}; const {in}cx: PSComplex{ dimension (n)}; const {in}incx: PInteger{}):Integer{}; stdcall;



//file name ieeeck
function ieeeck_(const {in}ispec: PInteger{}; const {in}zero: PSingle{}; const {in}one: PSingle{}):Integer{ }; stdcall;



//file name ilaclc
function ilaclc_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}):Integer{}; stdcall;



//file name ilaclr
function ilaclr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSComplex{ dimension (ldan)}; const {in}lda: PInteger{}):Integer{}; stdcall;



//file name iladiag
function iladiag_( ):Integer{}; stdcall;



//file name iladlc
function iladlc_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}):Integer{}; stdcall;



//file name iladlr
function iladlr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}):Integer{}; stdcall;



//file name ilaenv
function ilaenv_(const {in}ispec: PInteger{}; const {in}name: PChar{*(*)}; const {in}opts: PChar{*(*)}; const {in}n1: PInteger{}; const {in}n2: PInteger{}; const {in}n3: PInteger{}; const {in}n4: PInteger{}):Integer{}; stdcall;



//file name ilaenv2stage
function ilaenv2stage_(const {in}ispec: PInteger{}; const {in}name: PChar{*(*)}; const {in}opts: PChar{*(*)}; const {in}n1: PInteger{}; const {in}n2: PInteger{}; const {in}n3: PInteger{}; const {in}n4: PInteger{}):Integer{}; stdcall;



//file name ilaprec
function ilaprec_( ):Integer{}; stdcall;



//file name ilaslc
function ilaslc_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}):Integer{}; stdcall;



//file name ilaslr
function ilaslr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}):Integer{}; stdcall;



//file name ilatrans
function ilatrans_( ):Integer{}; stdcall;



//file name ilauplo
function ilauplo_( ):Integer{}; stdcall;



//file name ilazlc
function ilazlc_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}):Integer{}; stdcall;



//file name ilazlr
function ilazlr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}):Integer{}; stdcall;



//file name iparam2stage
function iparam2stage_(const {in}ispec: PInteger{ scalar}; const {in}name: PChar{ string}; const {in}opts: PChar{*(*)}; const {in}ni: PInteger{ which is the size of the matrix}; const {in}nbi: PInteger{ which is the used in the reduciton }; const {in}ibi: PInteger{ which represent the ib of the reduciton}; const {in}nxi: PInteger{ needed in the future release}):Integer{}; stdcall;


//file name iparmq
function iparmq_(const {in}ispec: PInteger{}; const {in}name: PChar{ string}; const {in}opts: PChar{ string}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {in}lwork: PInteger{}):Integer{}; stdcall;



//file name izmax1
function izmax1_(const {in}n: PInteger{}; const {in}zx: PDComplex{ dimension (n)}; const {in}incx: PInteger{}):Integer{}; stdcall;



//file name lsamen
function lsamen_(const {in}n: PInteger{}; const {in}ca: PChar{*(*)}; const {in}cb: PChar{*(*)}):Boolean{ }; stdcall;



//file name sbbcsd
procedure sbbcsd_(const {in}jobu1: PChar{}; const {in}jobu2: PChar{}; const {in}jobv1t: PChar{}; const {in}jobv2t: PChar{}; const {in}trans: PChar{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}theta: PSingle{ dimension (q)}; const {inout}phi: PSingle{ dimension (q-1)}; const {inout}u1: PSingle{ dimension (ldu1p)}; const {in}ldu1: PInteger{}; const {inout}u2: PSingle{ dimension (ldu2m-p)}; const {in}ldu2: PInteger{}; const {inout}v1t: PSingle{ dimension (ldv1tq)}; const {in}ldv1t: PInteger{}; const {inout}v2t: PSingle{ dimension (ldv2tm-q)}; const {in}ldv2t: PInteger{}; const {out}b11d: PSingle{ dimension (q)}; const {out}b11e: PSingle{ dimension (q-1)}; const {out}b12d: PSingle{ dimension (q)}; const {out}b12e: PSingle{ dimension (q-1)}; const {out}b21d: PSingle{ dimension (q)}; const {out}b21e: PSingle{ dimension (q-1)}; const {out}b22d: PSingle{ dimension (q)}; const {out}b22e: PSingle{ dimension (q-1)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sbdsdc
procedure sbdsdc_(const {in}uplo: PChar{*1}; const {in}compq: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n-1)}; const {out}u: PSingle{ dimension (ldun)}; const {in}ldu: PInteger{}; const {out}vt: PSingle{ dimension (ldvtn)}; const {in}ldvt: PInteger{}; const {out}q: PSingle{ dimension (ldq)}; const {out}iq: PInteger{ dimension (ldiq)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {out}iwork: PInteger{ dimension (8*n)}; const {out}info: PInteger{}); stdcall;



//file name sbdsqr
procedure sbdsqr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ncvt: PInteger{}; const {in}nru: PInteger{}; const {in}ncc: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n-1)}; const {inout}vt: PSingle{ dimension (ldvt ncvt)}; const {in}ldvt: PInteger{}; const {inout}u: PSingle{ dimension (ldu n)}; const {in}ldu: PInteger{}; const {inout}c: PSingle{ dimension (ldc ncc)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension (4*n)}; const {out}info: PInteger{}); stdcall;



//file name sbdsvdx
procedure sbdsvdx_(const {in}uplo: PChar{*1}; const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}n: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}e: PSingle{ dimension (max(1n-1))}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {out}ns: PInteger{}; const {out}s: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (2*nk)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (14*n)}; const {out}iwork: PInteger{ dimension (12*n)}; const {out}info: PInteger{}); stdcall;



//file name scombssq
procedure scombssq_(const {inout}v1: PSingle{ dimension (2)}; const {in}v2: PSingle{ dimension (2)}); stdcall;



//file name scsum1
function scsum1_(const {in}n: PInteger{}; const {in}cx: PSComplex{ dimension (n)}; const {in}incx: PInteger{}):Single{}; stdcall;



//file name sdisna
procedure sdisna_(const {in}job: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}d: PSingle{ dimension (m) if job = 'e'}; const {out}sep: PSingle{ dimension (m) if job = 'e'}; const {out}info: PInteger{}); stdcall;



//file name sgbbrd
procedure sgbbrd_(const {in}vect: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}ncc: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {inout}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}d: PSingle{ dimension (min(mn))}; const {out}e: PSingle{ dimension (min(mn)-1)}; const {out}q: PSingle{ dimension (ldqm)}; const {in}ldq: PInteger{}; const {out}pt: PSingle{ dimension (ldptn)}; const {in}ldpt: PInteger{}; const {inout}c: PSingle{ dimension (ldcncc)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension (2*max(mn))}; const {out}info: PInteger{}); stdcall;



//file name sgbcon
procedure sgbcon_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgbequ
procedure sgbequ_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}r: PSingle{ dimension (m)}; const {out}c: PSingle{ dimension (n)}; const {out}rowcnd: PSingle{}; const {out}colcnd: PSingle{}; const {out}amax: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name sgbequb
procedure sgbequb_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}r: PSingle{ dimension (m)}; const {out}c: PSingle{ dimension (n)}; const {out}rowcnd: PSingle{}; const {out}colcnd: PSingle{}; const {out}amax: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name sgbrfs
procedure sgbrfs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PSingle{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgbrfsx
procedure sgbrfsx_(const {in}trans: PChar{*1}; const {in}equed: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PSingle{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}r: PSingle{ dimension (n)}; const {inout}c: PSingle{ dimension (n)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}berr: PSingle{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PSingle{ dimension nparams}; const {out}work: PSingle{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgbsv
procedure sgbsv_(const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgbsvx
procedure sgbsvx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}afb: PSingle{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}r: PSingle{ dimension (n)}; const {inout}c: PSingle{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgbsvxx
procedure sgbsvxx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}afb: PSingle{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}r: PSingle{ dimension (n)}; const {inout}c: PSingle{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}rpvgrw: PSingle{}; const {out}berr: PSingle{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PSingle{ dimension nparams}; const {out}work: PSingle{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgbtf2
procedure sgbtf2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {inout}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name sgbtrf
procedure sgbtrf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {inout}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name sgbtrs
procedure sgbtrs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgebak
procedure sgebak_(const {in}job: PChar{*1}; const {in}side: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {in}scale: PSingle{ dimension (n)}; const {in}m: PInteger{}; const {inout}v: PSingle{ dimension (ldvm)}; const {in}ldv: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgebal
procedure sgebal_(const {in}job: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ilo: PInteger{}; const {out}ihi: PInteger{}; const {out}scale: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgebd2
procedure sgebd2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PSingle{ dimension (min(mn))}; const {out}e: PSingle{ dimension (min(mn)-1)}; const {out}tauq: PSingle{ dimension (min(mn))}; const {out}taup: PSingle{ dimension (min(mn))}; const {out}work: PSingle{ dimension (max(mn))}; const {out}info: PInteger{}); stdcall;



//file name sgebrd
procedure sgebrd_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PSingle{ dimension (min(mn))}; const {out}e: PSingle{ dimension (min(mn)-1)}; const {out}tauq: PSingle{ dimension (min(mn))}; const {out}taup: PSingle{ dimension (min(mn))}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgecon
procedure sgecon_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSingle{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgeequ
procedure sgeequ_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}r: PSingle{ dimension (m)}; const {out}c: PSingle{ dimension (n)}; const {out}rowcnd: PSingle{}; const {out}colcnd: PSingle{}; const {out}amax: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name sgeequb
procedure sgeequb_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}r: PSingle{ dimension (m)}; const {out}c: PSingle{ dimension (n)}; const {out}rowcnd: PSingle{}; const {out}colcnd: PSingle{}; const {out}amax: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name sgees
procedure sgees_(const {in}jobvs: PChar{*1}; const {in}sort: PChar{*1}; const {in}select: TLFunc<PSingle, PSingle>{ of two PSingle{ arguments}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}sdim: PInteger{}; const {out}wr: PSingle{ dimension (n)}; const {out}wi: PSingle{ dimension (n)}; const {out}vs: PSingle{ dimension (ldvsn)}; const {in}ldvs: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgeesx
procedure sgeesx_(const {in}jobvs: PChar{*1}; const {in}sort: PChar{*1}; const {in}select: TLFunc<PSingle, PSingle>{ of two PSingle{ arguments}; const {in}sense: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}sdim: PInteger{}; const {out}wr: PSingle{ dimension (n)}; const {out}wi: PSingle{ dimension (n)}; const {out}vs: PSingle{ dimension (ldvsn)}; const {in}ldvs: PInteger{}; const {out}rconde: PSingle{}; const {out}rcondv: PSingle{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgeev
procedure sgeev_(const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}wr: PSingle{ dimension (n)}; const {out}wi: PSingle{ dimension (n)}; const {out}vl: PSingle{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PSingle{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgeevx
procedure sgeevx_(const {in}balanc: PChar{*1}; const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}sense: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}wr: PSingle{ dimension (n)}; const {out}wi: PSingle{ dimension (n)}; const {out}vl: PSingle{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PSingle{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}ilo: PInteger{}; const {out}ihi: PInteger{}; const {out}scale: PSingle{ dimension (n)}; const {out}abnrm: PSingle{}; const {out}rconde: PSingle{ dimension (n)}; const {out}rcondv: PSingle{ dimension (n)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (2*n-2)}; const {out}info: PInteger{}); stdcall;



//file name sgehd2
procedure sgehd2_(const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSingle{ dimension (n-1)}; const {out}work: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgehrd
procedure sgehrd_(const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSingle{ dimension (n-1)}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgejsv
procedure sgejsv_(const {in}joba: PChar{*1}; const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}jobr: PChar{*1}; const {in}jobt: PChar{*1}; const {in}jobp: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}sva: PSingle{ dimension (n)}; const {out}u: PSingle{ dimension ( ldu n )}; const {in}ldu: PInteger{}; const {out}v: PSingle{ dimension ( ldv n )}; const {in}ldv: PInteger{}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (m+3*n)}; const {out}info: PInteger{}); stdcall;



//file name sgelq
procedure sgelq_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSingle{ dimension (max(5tsize))}; const {in}tsize: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgelq2
procedure sgelq2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSingle{ dimension (min(mn))}; const {out}work: PSingle{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name sgelqf
procedure sgelqf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSingle{ dimension (min(mn))}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgelqt
procedure sgelqt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSingle{ dimension (ldtmin(mn))}; const {in}ldt: PInteger{}; const {out}work: PSingle{ dimension (mb*n)}; const {out}info: PInteger{}); stdcall;



//file name sgelqt3
procedure sgelqt3_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSingle{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgels
procedure sgels_(const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgelsd
procedure sgelsd_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}s: PSingle{ dimension (min(mn))}; const {in}rcond: PSingle{}; const {out}rank: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {out}info: PInteger{}); stdcall;


//file name sgelss
procedure sgelss_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}s: PSingle{ dimension (min(mn))}; const {in}rcond: PSingle{}; const {out}rank: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgelsy
procedure sgelsy_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}jpvt: PInteger{ dimension (n)}; const {in}rcond: PSingle{}; const {out}rank: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgemlq
procedure sgemlq_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSingle{ dimension}; const {in}lda: PInteger{}; const {in}t: PSingle{ dimension (max(5tsize))}; const {in}tsize: PInteger{}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgemlqt
procedure sgemlqt_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}mb: PInteger{}; const {in}v: PSingle{ dimension}; const {in}ldv: PInteger{}; const {in}t: PSingle{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ the dimension of}; const {out}info: PInteger{}); stdcall;



//file name sgemqr
procedure sgemqr_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSingle{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}t: PSingle{ dimension (max(5tsize))}; const {in}tsize: PInteger{}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgemqrt
procedure sgemqrt_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}nb: PInteger{}; const {in}v: PSingle{ dimension (ldvk)}; const {in}ldv: PInteger{}; const {in}t: PSingle{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ the dimension of work is}; const {out}info: PInteger{}); stdcall;



//file name sgeql2
procedure sgeql2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSingle{ dimension (min(mn))}; const {out}work: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgeqlf
procedure sgeqlf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSingle{ dimension (min(mn))}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgeqp3
procedure sgeqp3_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}jpvt: PInteger{ dimension (n)}; const {out}tau: PSingle{ dimension (min(mn))}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgeqr
procedure sgeqr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSingle{ dimension (max(5tsize))}; const {in}tsize: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgeqr2
procedure sgeqr2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSingle{ dimension (min(mn))}; const {out}work: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgeqr2p
procedure sgeqr2p_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSingle{ dimension (min(mn))}; const {out}work: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgeqrf
procedure sgeqrf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSingle{ dimension (min(mn))}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgeqrfp
procedure sgeqrfp_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSingle{ dimension (min(mn))}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgeqrt
procedure sgeqrt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSingle{ dimension (ldtmin(mn))}; const {in}ldt: PInteger{}; const {out}work: PSingle{ dimension (nb*n)}; const {out}info: PInteger{}); stdcall;



//file name sgeqrt2
procedure sgeqrt2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSingle{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgeqrt3
procedure sgeqrt3_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSingle{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgerfs
procedure sgerfs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgerfsx
procedure sgerfsx_(const {in}trans: PChar{*1}; const {in}equed: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}r: PSingle{ dimension (n)}; const {in}c: PSingle{ dimension (n)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}berr: PSingle{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PSingle{ dimension nparams}; const {out}work: PSingle{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgerq2
procedure sgerq2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSingle{ dimension (min(mn))}; const {out}work: PSingle{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name sgerqf
procedure sgerqf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSingle{ dimension (min(mn))}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgesc2
procedure sgesc2_(const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}rhs: PSingle{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}jpiv: PInteger{ dimension (n)}; const {out}scale: PSingle{}); stdcall;



//file name sgesdd
procedure sgesdd_(const {in}jobz: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PSingle{ dimension (min(mn))}; const {out}u: PSingle{ dimension (lduucol)}; const {in}ldu: PInteger{}; const {out}vt: PSingle{ dimension (ldvtn)}; const {in}ldvt: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (8*min(mn))}; const {out}info: PInteger{}); stdcall;



//file name sgesv
procedure sgesv_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgesvd
procedure sgesvd_(const {in}jobu: PChar{*1}; const {in}jobvt: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PSingle{ dimension (min(mn))}; const {out}u: PSingle{ dimension (lduucol)}; const {in}ldu: PInteger{}; const {out}vt: PSingle{ dimension (ldvtn)}; const {in}ldvt: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgesvdq
procedure sgesvdq_(const {in}joba: PChar{*1}; const {in}jobp: PChar{*1}; const {in}jobr: PChar{*1}; const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ of dimensions lda x n}; const {in}lda: PInteger{}; const {out}s: PSingle{ of dimension n}; const {out}u: PSingle{ dimension}; const {in}ldu: PInteger{}; const {out}v: PSingle{ dimension}; const {in}ldv: PInteger{}; const {out}numrank: PInteger{}; const {out}iwork: PInteger{ dimension (max(1 liwork))}; const {in}liwork: PInteger{}; const {out}work: PSingle{ dimension (max(2 lwork)) used as a workspace}; const {inout}lwork: PInteger{}; const {out}rwork: PSingle{ dimension (max(1 lrwork))}; const {in}lrwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgesvdx
procedure sgesvdx_(const {in}jobu: PChar{*1}; const {in}jobvt: PChar{*1}; const {in}range: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {out}ns: PInteger{}; const {out}s: PSingle{ dimension (min(mn))}; const {out}u: PSingle{ dimension (lduucol)}; const {in}ldu: PInteger{}; const {out}vt: PSingle{ dimension (ldvtn)}; const {in}ldvt: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (12*min(mn))}; const {out}info: PInteger{}); stdcall;



//file name sgesvj
procedure sgesvj_(const {in}joba: PChar{*1}; const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}sva: PSingle{ dimension (n)}; const {in}mv: PInteger{}; const {inout}v: PSingle{ dimension (ldvn)}; const {in}ldv: PInteger{}; const {inout}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgesvx
procedure sgesvx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}r: PSingle{ dimension (n)}; const {inout}c: PSingle{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgesvxx
procedure sgesvxx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}r: PSingle{ dimension (n)}; const {inout}c: PSingle{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}rpvgrw: PSingle{}; const {out}berr: PSingle{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PSingle{ dimension nparams}; const {out}work: PSingle{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgetc2
procedure sgetc2_(const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension(n)}; const {out}jpiv: PInteger{ dimension(n)}; const {out}info: PInteger{}); stdcall;



//file name sgetf2
procedure sgetf2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name sgetrf
procedure sgetrf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name sgetrf2
procedure sgetrf2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name sgetri
procedure sgetri_(const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgetrs
procedure sgetrs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgetsls
procedure sgetsls_(const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgetsqrhrt
procedure sgetsqrhrt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb1: PInteger{}; const {in}nb1: PInteger{}; const {in}nb2: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSingle{ dimension (ldtn))}; const {in}ldt: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sggbak
procedure sggbak_(const {in}job: PChar{*1}; const {in}side: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {in}lscale: PSingle{ dimension (n)}; const {in}rscale: PSingle{ dimension (n)}; const {in}m: PInteger{}; const {inout}v: PSingle{ dimension (ldvm)}; const {in}ldv: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sggbal
procedure sggbal_(const {in}job: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}ilo: PInteger{}; const {out}ihi: PInteger{}; const {out}lscale: PSingle{ dimension (n)}; const {out}rscale: PSingle{ dimension (n)}; const {out}work: PSingle{ dimension (lwork)}; const {out}info: PInteger{}); stdcall;



//file name sgges
procedure sgges_(const {in}jobvsl: PChar{*1}; const {in}jobvsr: PChar{*1}; const {in}sort: PChar{*1}; const {in}selctg: TLFunc<PSingle, PSingle, PSingle>{ of three PSingle{ arguments}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}sdim: PInteger{}; const {out}alphar: PSingle{ dimension (n)}; const {out}alphai: PSingle{ dimension (n)}; const {out}beta: PSingle{ dimension (n)}; const {out}vsl: PSingle{ dimension (ldvsln)}; const {in}ldvsl: PInteger{}; const {out}vsr: PSingle{ dimension (ldvsrn)}; const {in}ldvsr: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgges3
procedure sgges3_(const {in}jobvsl: PChar{*1}; const {in}jobvsr: PChar{*1}; const {in}sort: PChar{*1}; const {in}selctg: TLFunc<PSingle, PSingle, PSingle>{ of three PSingle{ arguments}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}sdim: PInteger{}; const {out}alphar: PSingle{ dimension (n)}; const {out}alphai: PSingle{ dimension (n)}; const {out}beta: PSingle{ dimension (n)}; const {out}vsl: PSingle{ dimension (ldvsln)}; const {in}ldvsl: PInteger{}; const {out}vsr: PSingle{ dimension (ldvsrn)}; const {in}ldvsr: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sggesx
procedure sggesx_(const {in}jobvsl: PChar{*1}; const {in}jobvsr: PChar{*1}; const {in}sort: PChar{*1}; const {in}selctg: TLFunc<PSingle, PSingle, PSingle>{ of three PSingle{ arguments}; const {in}sense: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}sdim: PInteger{}; const {out}alphar: PSingle{ dimension (n)}; const {out}alphai: PSingle{ dimension (n)}; const {out}beta: PSingle{ dimension (n)}; const {out}vsl: PSingle{ dimension (ldvsln)}; const {in}ldvsl: PInteger{}; const {out}vsr: PSingle{ dimension (ldvsrn)}; const {in}ldvsr: PInteger{}; const {out}rconde: PSingle{ dimension ( 2 )}; const {out}rcondv: PSingle{ dimension ( 2 )}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sggev
procedure sggev_(const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}alphar: PSingle{ dimension (n)}; const {out}alphai: PSingle{ dimension (n)}; const {out}beta: PSingle{ dimension (n)}; const {out}vl: PSingle{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PSingle{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sggev3
procedure sggev3_(const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}alphar: PSingle{ dimension (n)}; const {out}alphai: PSingle{ dimension (n)}; const {out}beta: PSingle{ dimension (n)}; const {out}vl: PSingle{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PSingle{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sggevx
procedure sggevx_(const {in}balanc: PChar{*1}; const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}sense: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}alphar: PSingle{ dimension (n)}; const {out}alphai: PSingle{ dimension (n)}; const {out}beta: PSingle{ dimension (n)}; const {out}vl: PSingle{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PSingle{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}ilo: PInteger{}; const {out}ihi: PInteger{}; const {out}lscale: PSingle{ dimension (n)}; const {out}rscale: PSingle{ dimension (n)}; const {out}abnrm: PSingle{}; const {out}bbnrm: PSingle{}; const {out}rconde: PSingle{ dimension (n)}; const {out}rcondv: PSingle{ dimension (n)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (n+6)}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sggglm
procedure sggglm_(const {in}n: PInteger{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {inout}a: PSingle{ dimension (ldam)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbp)}; const {in}ldb: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {out}x: PSingle{ dimension (m)}; const {out}y: PSingle{ dimension (p)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgghd3
procedure sgghd3_(const {in}compq: PChar{*1}; const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {inout}q: PSingle{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {inout}z: PSingle{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgghrd
procedure sgghrd_(const {in}compq: PChar{*1}; const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {inout}q: PSingle{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {inout}z: PSingle{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgglse
procedure sgglse_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}p: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {inout}c: PSingle{ dimension (m)}; const {inout}d: PSingle{ dimension (p)}; const {out}x: PSingle{ dimension (n)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sggqrf
procedure sggqrf_(const {in}n: PInteger{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {inout}a: PSingle{ dimension (ldam)}; const {in}lda: PInteger{}; const {out}taua: PSingle{ dimension (min(nm))}; const {inout}b: PSingle{ dimension (ldbp)}; const {in}ldb: PInteger{}; const {out}taub: PSingle{ dimension (min(np))}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sggrqf
procedure sggrqf_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}taua: PSingle{ dimension (min(mn))}; const {inout}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}taub: PSingle{ dimension (min(pn))}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sggsvd3
procedure sggsvd3_(const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}jobq: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}p: PInteger{}; const {out}k: PInteger{}; const {out}l: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}alpha: PSingle{ dimension (n)}; const {out}beta: PSingle{ dimension (n)}; const {out}u: PSingle{ dimension (ldum)}; const {in}ldu: PInteger{}; const {out}v: PSingle{ dimension (ldvp)}; const {in}ldv: PInteger{}; const {out}q: PSingle{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sggsvp3
procedure sggsvp3_(const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}jobq: PChar{*1}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {in}tola: PSingle{}; const {in}tolb: PSingle{}; const {out}k: PInteger{}; const {out}l: PInteger{}; const {out}u: PSingle{ dimension (ldum)}; const {in}ldu: PInteger{}; const {out}v: PSingle{ dimension (ldvp)}; const {in}ldv: PInteger{}; const {out}q: PSingle{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}iwork: PInteger{ dimension (n)}; const {out}tau: PSingle{ dimension (n)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgsvj0
procedure sgsvj0_(const {in}jobv: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}sva: PSingle{ dimension (n)}; const {in}mv: PInteger{}; const {inout}v: PSingle{ dimension (ldvn)}; const {in}ldv: PInteger{}; const {in}eps: PSingle{}; const {in}sfmin: PSingle{}; const {in}tol: PSingle{}; const {in}nsweep: PInteger{}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgsvj1
procedure sgsvj1_(const {in}jobv: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}n1: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}sva: PSingle{ dimension (n)}; const {in}mv: PInteger{}; const {inout}v: PSingle{ dimension (ldvn)}; const {in}ldv: PInteger{}; const {in}eps: PSingle{}; const {in}sfmin: PSingle{}; const {in}tol: PSingle{}; const {in}nsweep: PInteger{}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgtcon
procedure sgtcon_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}dl: PSingle{ dimension (n-1)}; const {in}d: PSingle{ dimension (n)}; const {in}du: PSingle{ dimension (n-1)}; const {in}du2: PSingle{ dimension (n-2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSingle{ dimension (2*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgtrfs
procedure sgtrfs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}dl: PSingle{ dimension (n-1)}; const {in}d: PSingle{ dimension (n)}; const {in}du: PSingle{ dimension (n-1)}; const {in}dlf: PSingle{ dimension (n-1)}; const {in}df: PSingle{ dimension (n)}; const {in}duf: PSingle{ dimension (n-1)}; const {in}du2: PSingle{ dimension (n-2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgtsv
procedure sgtsv_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}dl: PSingle{ dimension (n-1)}; const {inout}d: PSingle{ dimension (n)}; const {inout}du: PSingle{ dimension (n-1)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgtsvx
procedure sgtsvx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}dl: PSingle{ dimension (n-1)}; const {in}d: PSingle{ dimension (n)}; const {in}du: PSingle{ dimension (n-1)}; const {inout}dlf: PSingle{ dimension (n-1)}; const {inout}df: PSingle{ dimension (n)}; const {inout}duf: PSingle{ dimension (n-1)}; const {inout}du2: PSingle{ dimension (n-2)}; const {inout}ipiv: PInteger{ dimension (n)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgttrf
procedure sgttrf_(const {in}n: PInteger{}; const {inout}dl: PSingle{ dimension (n-1)}; const {inout}d: PSingle{ dimension (n)}; const {inout}du: PSingle{ dimension (n-1)}; const {out}du2: PSingle{ dimension (n-2)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sgttrs
procedure sgttrs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}dl: PSingle{ dimension (n-1)}; const {in}d: PSingle{ dimension (n)}; const {in}du: PSingle{ dimension (n-1)}; const {in}du2: PSingle{ dimension (n-2)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sgtts2
procedure sgtts2_(const {in}itrans: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}dl: PSingle{ dimension (n-1)}; const {in}d: PSingle{ dimension (n)}; const {in}du: PSingle{ dimension (n-1)}; const {in}du2: PSingle{ dimension (n-2)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}); stdcall;



//file name shgeqz
procedure shgeqz_(const {in}job: PChar{*1}; const {in}compq: PChar{*1}; const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PSingle{ dimension (ldh n)}; const {in}ldh: PInteger{}; const {inout}t: PSingle{ dimension (ldt n)}; const {in}ldt: PInteger{}; const {out}alphar: PSingle{ dimension (n)}; const {out}alphai: PSingle{ dimension (n)}; const {out}beta: PSingle{ dimension (n)}; const {inout}q: PSingle{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {inout}z: PSingle{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name shsein
procedure shsein_(const {in}side: PChar{*1}; const {in}eigsrc: PChar{*1}; const {in}initv: PChar{*1}; const {inout}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}h: PSingle{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {inout}wr: PSingle{ dimension (n)}; const {in}wi: PSingle{ dimension (n)}; const {inout}vl: PSingle{ dimension (ldvlmm)}; const {in}ldvl: PInteger{}; const {inout}vr: PSingle{ dimension (ldvrmm)}; const {in}ldvr: PInteger{}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PSingle{ dimension ((n+2)*n)}; const {out}ifaill: PInteger{ dimension (mm)}; const {out}ifailr: PInteger{ dimension (mm)}; const {out}info: PInteger{}); stdcall;



//file name shseqr
procedure shseqr_(const {in}job: PChar{*1}; const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PSingle{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {out}wr: PSingle{ dimension (n)}; const {out}wi: PSingle{ dimension (n)}; const {inout}z: PSingle{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sisnan
function sisnan_(const {in}sin: PSingle{}):Boolean{}; stdcall;



//file name sla_gbamv
procedure sla_gbamv_(const {in}trans: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}alpha: PSingle{}; const {in}ab: PSingle{ dimension ( ldab n )}; const {in}ldab: PInteger{}; const {in}x: PSingle{ dimension}; const {in}incx: PInteger{}; const {in}beta: PSingle{}; const {inout}y: PSingle{ dimension}; const {in}incy: PInteger{}); stdcall;



//file name sla_gbrcond
function sla_gbrcond_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PSingle{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}cmode: PInteger{}; const {in}c: PSingle{ dimension (n)}; const {out}info: PInteger{}; const {out}work: PSingle{ dimension (5*n)}; const {out}iwork: PInteger{ dimension (n)}):Single{}; stdcall;



//file name sla_gbrfsx_extended
procedure sla_gbrfsx_extended_(const {in}prec_type: PInteger{}; const {in}trans_type: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PSingle{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}colequ: PBoolean{}; const {in}c: PSingle{ dimension (n)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}y: PSingle{ dimension (ldynrhs)}; const {in}ldy: PInteger{}; const {out}berr_out: PSingle{ dimension (nrhs)}; const {in}n_norms: PInteger{}; const {inout}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {inout}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}res: PSingle{ dimension (n)}; const {in}ayb: PSingle{ dimension (n)}; const {in}dy: PSingle{ dimension (n)}; const {in}y_tail: PSingle{ dimension (n)}; const {in}rcond: PSingle{}; const {in}ithresh: PInteger{}; const {in}rthresh: PSingle{}; const {in}dz_ub: PSingle{}; const {in}ignore_cwise: PBoolean{}; const {out}info: PInteger{});stdcall;



//file name sla_gbrpvgrw
function sla_gbrpvgrw_(const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ncols: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PSingle{ dimension (ldafbn)}; const {in}ldafb: PInteger{}):Single{}; stdcall;



//file name sla_geamv
procedure sla_geamv_ (const {in}trans: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}alpha: PSingle{}; const {in}a: PSingle{ dimension ( lda n )}; const {in}lda: PInteger{}; const {in}x: PSingle{ dimension}; const {in}incx: PInteger{}; const {in}beta: PSingle{}; const {inout}y: PSingle{}; const {in}incy: PInteger{});  stdcall;



//file name sla_gercond
function sla_gercond_ (const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}cmode: PInteger{}; const {in}c: PSingle{ dimension (n)}; const {out}info: PInteger{}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}) :PSingle;  stdcall;



//file name sla_gerfsx_extended
procedure sla_gerfsx_extended_(const {in}prec_type: PInteger{}; const {in}trans_type: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}colequ: PBoolean{}; const {in}c: PSingle{ dimension (n)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}y: PSingle{ dimension (ldynrhs)}; const {in}ldy: PInteger{}; const {out}berr_out: PSingle{ dimension (nrhs)}; const {in}n_norms: PInteger{}; const {inout}errs_n: PSingle{ dimension (nrhs n_err_bnds)}; const {inout}errs_c: PSingle{ dimension (nrhs n_err_bnds)}; const {in}res: PSingle{ dimension (n)}; const {in}ayb: PSingle{ dimension (n)}; const {in}dy: PSingle{ dimension (n)}; const {in}y_tail: PSingle{ dimension (n)}; const {in}rcond: PSingle{}; const {in}ithresh: PInteger{}; const {in}rthresh: PSingle{}; const {in}dz_ub: PSingle{}; const {in}ignore_cwise: PBoolean{}; const {out}info: PInteger{}); stdcall;



//file name sla_gerpvgrw
function sla_gerpvgrw_(const {in}n: PInteger{}; const {in}ncols: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}):Single{}; stdcall;



//file name sla_lin_berr
procedure sla_lin_berr_ (const {in}n: PInteger{}; const {in}nz: PInteger{}; const {in}nrhs: PInteger{}; const {in}res: PSingle{ dimension (nnrhs)}; const {in}ayb: PSingle{ dimension (n nrhs)}; const {out}berr: PSingle{ dimension (nrhs)});  stdcall;



//file name sla_porcond
function sla_porcond_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}cmode: PInteger{}; const {in}c: PSingle{ dimension (n)}; const {out}info: PInteger{}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}):Single{}; stdcall;



//file name sla_porfsx_extended
procedure sla_porfsx_extended_(const {in}prec_type: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}colequ: PBoolean{}; const {in}c: PSingle{ dimension (n)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}y: PSingle{ dimension (ldynrhs)}; const {in}ldy: PInteger{}; const {out}berr_out: PSingle{ dimension (nrhs)}; const {in}n_norms: PInteger{}; const {inout}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {inout}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}res: PSingle{ dimension (n)}; const {in}ayb: PSingle{ dimension (n)}; const {in}dy: PSingle{ dimension (n)}; const {in}y_tail: PSingle{ dimension (n)}; const {in}rcond: PSingle{}; const {in}ithresh: PInteger{}; const {in}rthresh: PSingle{}; const {in}dz_ub: PSingle{}; const {in}ignore_cwise: PBoolean{}; const {out}info: PInteger{});stdcall;



//file name sla_porpvgrw
function sla_porpvgrw_(const {in}uplo: PChar{*1}; const {in}ncols: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {out}work: PSingle{ dimension (2*n)}):Single{}; stdcall;



//file name sla_syamv
procedure sla_syamv_(const {in}uplo: PInteger{}; const {in}n: PInteger{}; const {in}alpha: PSingle{ }; const {in}a: PSingle{ dimension ( lda n )}; const {in}lda: PInteger{}; const {in}x: PSingle{ dimension}; const {in}incx: PInteger{}; const {in}beta: PSingle{ }; const {inout}y: PSingle{ dimension}; const {in}incy: PInteger{}); stdcall;



//file name sla_syrcond
function sla_syrcond_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}cmode: PInteger{}; const {in}c: PSingle{ dimension (n)}; const {out}info: PInteger{}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}):Single{}; stdcall;



//file name sla_syrfsx_extended
procedure sla_syrfsx_extended_(const {in}prec_type: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}colequ: PBoolean{}; const {in}c: PSingle{ dimension (n)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}y: PSingle{ dimension (ldynrhs)}; const {in}ldy: PInteger{}; const {out}berr_out: PSingle{ dimension (nrhs)}; const {in}n_norms: PInteger{}; const {inout}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {inout}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}res: PSingle{ dimension (n)}; const {in}ayb: PSingle{ dimension (n)}; const {in}dy: PSingle{ dimension (n)}; const {in}y_tail: PSingle{ dimension (n)}; const {in}rcond: PSingle{}; const {in}ithresh: PInteger{}; const {in}rthresh: PSingle{}; const {in}dz_ub: PSingle{}; const {in}ignore_cwise: PBoolean{}; const {out}info: PInteger{});stdcall;



//file name sla_syrpvgrw
function sla_syrpvgrw_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}info: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSingle{ dimension (2*n)}):Single{}; stdcall;



//file name sla_wwaddw
procedure sla_wwaddw_(const {in}n: PInteger{}; const {inout}x: PSingle{ dimension (n)}; const {inout}y: PSingle{ dimension (n)}; const {in}w: PSingle{ dimension (n)}); stdcall;



//file name slabad
procedure slabad_(const {inout}small: PSingle{}; const {inout}large: PSingle{}); stdcall;



//file name slabrd
procedure slabrd_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PSingle{ dimension (nb)}; const {out}e: PSingle{ dimension (nb)}; const {out}tauq: PSingle{ dimension (nb)}; const {out}taup: PSingle{ dimension (nb)}; const {out}x: PSingle{ dimension (ldxnb)}; const {in}ldx: PInteger{}; const {out}y: PSingle{ dimension (ldynb)}; const {in}ldy: PInteger{}); stdcall;



//file name slacn2
procedure slacn2_(const {in}n: PInteger{}; const {out}v: PSingle{ dimension (n)}; const {inout}x: PSingle{ dimension (n)}; const {out}isgn: PInteger{ dimension (n)}; const {inout}est: PSingle{}; const {inout}kase: PInteger{}; const {inout}isave: PInteger{ dimension (3)}); stdcall;



//file name slacon
procedure slacon_(const {in}n: PInteger{}; const {out}v: PSingle{ dimension (n)}; const {inout}x: PSingle{ dimension (n)}; const {out}isgn: PInteger{ dimension (n)}; const {inout}est: PSingle{}; const {inout}kase: PInteger{}); stdcall;



//file name slacpy
procedure slacpy_(const {in}uplo: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}); stdcall;



//file name sladiv
procedure sladiv_(const {in}a: PSingle{}; const {in}b: PSingle{}; const {in}c: PSingle{}; const {in}d: PSingle{}; const {out}p: PSingle{}; const {out}q: PSingle{}); stdcall;



//file name slae2
procedure slae2_(const {in}a: PSingle{}; const {in}b: PSingle{}; const {in}c: PSingle{}; const {out}rt1: PSingle{}; const {out}rt2: PSingle{}); stdcall;



//file name slaebz
procedure slaebz_(const {in}ijob: PInteger{}; const {in}nitmax: PInteger{}; const {in}n: PInteger{}; const {in}mmax: PInteger{}; const {in}minp: PInteger{}; const {in}nbmin: PInteger{}; const {in}abstol: PSingle{}; const {in}reltol: PSingle{}; const {in}pivmin: PSingle{}; const {in}d: PSingle{ dimension (n)}; const {in}e: PSingle{ dimension (n)}; const {in}e2: PSingle{ dimension (n)}; const {inout}nval: PInteger{ dimension (minp)}; const {inout}ab: PSingle{ dimension (mmax2)}; const {inout}c: PSingle{ dimension (mmax)}; const {out}mout: PInteger{}; const {inout}nab: PInteger{ dimension (mmax2)}; const {out}work: PSingle{ dimension (mmax)}; const {out}iwork: PInteger{ dimension (mmax)}; const {out}info: PInteger{}); stdcall;



//file name slaed0
procedure slaed0_(const {in}icompq: PInteger{}; const {in}qsiz: PInteger{}; const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {in}e: PSingle{ dimension (n-1)}; const {inout}q: PSingle{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {out}qstore: PSingle{ dimension (ldqs n)}; const {in}ldqs: PInteger{}; const {out}work: PSingle{}; const {out}iwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name slaed1
procedure slaed1_(const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}q: PSingle{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {inout}indxq: PInteger{ dimension (n)}; const {in}rho: PSingle{}; const {in}cutpnt: PInteger{}; const {out}work: PSingle{ dimension (4*n + n2)}; const {out}iwork: PInteger{ dimension (4*n)}; const {out}info: PInteger{}); stdcall;



//file name slaed2
procedure slaed2_(const {out}k: PInteger{}; const {in}n: PInteger{}; const {in}n1: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}q: PSingle{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {inout}indxq: PInteger{ dimension (n)}; const {inout}rho: PSingle{}; const {in}z: PSingle{ dimension (n)}; const {out}dlamda: PSingle{ dimension (n)}; const {out}w: PSingle{ dimension (n)}; const {out}q2: PSingle{ dimension (n12+(n-n1)**2)}; const {out}indx: PInteger{ dimension (n)}; const {out}indxc: PInteger{ dimension (n)}; const {out}indxp: PInteger{ dimension (n)}; const {out}coltyp: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name slaed3
procedure slaed3_(const {in}k: PInteger{}; const {in}n: PInteger{}; const {in}n1: PInteger{}; const {out}d: PSingle{ dimension (n)}; const {out}q: PSingle{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {in}rho: PSingle{}; const {inout}dlamda: PSingle{ dimension (k)}; const {in}q2: PSingle{ dimension (ldq2*n)}; const {in}indx: PInteger{ dimension (n)}; const {in}ctot: PInteger{ dimension (4)}; const {inout}w: PSingle{ dimension (k)}; const {out}s: PSingle{ dimension (n1 + 1)*k}; const {out}info: PInteger{}); stdcall;



//file name slaed4
procedure slaed4_(const {in}n: PInteger{}; const {in}i: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}z: PSingle{ dimension (n)}; const {out}delta: PSingle{ dimension (n)}; const {in}rho: PSingle{}; const {out}dlam: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name slaed5
procedure slaed5_(const {in}i: PInteger{}; const {in}d: PSingle{ dimension (2)}; const {in}z: PSingle{ dimension (2)}; const {out}delta: PSingle{ dimension (2)}; const {in}rho: PSingle{}; const {out}dlam: PSingle{}); stdcall;



//file name slaed6
procedure slaed6_(const {in}kniter: PInteger{}; const {in}orgati: PBoolean{}; const {in}rho: PSingle{}; const {in}d: PSingle{ dimension (3)}; const {in}z: PSingle{ dimension (3)}; const {in}finit: PSingle{}; const {out}tau: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name slaed7
procedure slaed7_(const {in}icompq: PInteger{}; const {in}n: PInteger{}; const {in}qsiz: PInteger{}; const {in}tlvls: PInteger{}; const {in}curlvl: PInteger{}; const {in}curpbm: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}q: PSingle{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {out}indxq: PInteger{ dimension (n)}; const {in}rho: PSingle{}; const {in}cutpnt: PInteger{}; const {inout}qstore: PSingle{ dimension (n2+1)}; const {inout}qptr: PInteger{ dimension (n+2)}; const {in}prmptr: PInteger{ dimension (n lg n)}; const {in}perm: PInteger{ dimension (n lg n)}; const {in}givptr: PInteger{ dimension (n lg n)}; const {in}givcol: PInteger{ dimension (2 n lg n)}; const {in}givnum: PSingle{ dimension (2 n lg n)}; const {out}work: PSingle{ dimension (3*n+2*qsiz*n)}; const {out}iwork: PInteger{ dimension (4*n)}; const {out}info: PInteger{}); stdcall;



//file name slaed8
procedure slaed8_(const {in}icompq: PInteger{}; const {out}k: PInteger{}; const {in}n: PInteger{}; const {in}qsiz: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}q: PSingle{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {in}indxq: PInteger{ dimension (n)}; const {inout}rho: PSingle{}; const {in}cutpnt: PInteger{}; const {in}z: PSingle{ dimension (n)}; const {out}dlamda: PSingle{ dimension (n)}; const {out}q2: PSingle{ dimension (ldq2n)}; const {in}ldq2: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}perm: PInteger{ dimension (n)}; const {out}givptr: PInteger{}; const {out}givcol: PInteger{ dimension (2 n)}; const {out}givnum: PSingle{ dimension (2 n)}; const {out}indxp: PInteger{ dimension (n)}; const {out}indx: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name slaed9
procedure slaed9_(const {in}k: PInteger{}; const {in}kstart: PInteger{}; const {in}kstop: PInteger{}; const {in}n: PInteger{}; const {out}d: PSingle{ dimension (n)}; const {out}q: PSingle{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {in}rho: PSingle{}; const {in}dlamda: PSingle{ dimension (k)}; const {in}w: PSingle{ dimension (k)}; const {out}s: PSingle{ dimension (lds k)}; const {in}lds: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name slaeda
procedure slaeda_(const {in}n: PInteger{}; const {in}tlvls: PInteger{}; const {in}curlvl: PInteger{}; const {in}curpbm: PInteger{}; const {in}prmptr: PInteger{ dimension (n lg n)}; const {in}perm: PInteger{ dimension (n lg n)}; const {in}givptr: PInteger{ dimension (n lg n)}; const {in}givcol: PInteger{ dimension (2 n lg n)}; const {in}givnum: PSingle{ dimension (2 n lg n)}; const {in}q: PSingle{ dimension (n2)}; const {in}qptr: PInteger{ dimension (n+2)}; const {out}z: PSingle{ dimension (n)}; const {out}ztemp: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name slaein
procedure slaein_(const {in}rightv: PBoolean{}; const {in}noinit: PBoolean{}; const {in}n: PInteger{}; const {in}h: PSingle{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}wr: PSingle{}; const {in}wi: PSingle{}; const {inout}vr: PSingle{ dimension (n)}; const {inout}vi: PSingle{ dimension (n)}; const {out}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}work: PSingle{ dimension (n)}; const {in}eps3: PSingle{}; const {in}smlnum: PSingle{}; const {in}bignum: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name slaev2
procedure slaev2_(const {in}a: PSingle{}; const {in}b: PSingle{}; const {in}c: PSingle{}; const {out}rt1: PSingle{}; const {out}rt2: PSingle{}; const {out}cs1: PSingle{}; const {out}sn1: PSingle{}); stdcall;



//file name slaexc
procedure slaexc_(const {in}wantq: PBoolean{}; const {in}n: PInteger{}; const {inout}t: PSingle{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {inout}q: PSingle{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {in}j1: PInteger{}; const {in}n1: PInteger{}; const {in}n2: PInteger{}; const {out}work: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name slag2
procedure slag2_(const {in}a: PSingle{ dimension (lda 2)}; const {in}lda: PInteger{}; const {in}b: PSingle{ dimension (ldb 2)}; const {in}ldb: PInteger{}; const {in}safmin: PSingle{}; const {out}scale1: PSingle{}; const {out}scale2: PSingle{}; const {out}wr1: PSingle{}; const {out}wr2: PSingle{}; const {out}wi: PSingle{}); stdcall;



//file name slag2d
procedure slag2d_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}sa: PSingle{ dimension (ldsan)}; const {in}ldsa: PInteger{}; const {out}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name slags2
procedure slags2_(const {in}upper: PBoolean{}; const {in}a1: PSingle{}; const {in}a2: PSingle{}; const {in}a3: PSingle{}; const {in}b1: PSingle{}; const {in}b2: PSingle{}; const {in}b3: PSingle{}; const {out}csu: PSingle{}; const {out}snu: PSingle{}; const {out}csv: PSingle{}; const {out}snv: PSingle{}; const {out}csq: PSingle{}; const {out}snq: PSingle{}); stdcall;



//file name slagtf
procedure slagtf_(const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (n)}; const {in}lambda: PSingle{}; const {inout}b: PSingle{ dimension (n-1)}; const {inout}c: PSingle{ dimension (n-1)}; const {in}tol: PSingle{}; const {out}d: PSingle{ dimension (n-2)}; const {out}_in: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name slagtm
procedure slagtm_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}alpha: PSingle{}; const {in}dl: PSingle{ dimension (n-1)}; const {in}d: PSingle{ dimension (n)}; const {in}du: PSingle{ dimension (n-1)}; const {in}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {in}beta: PSingle{}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}); stdcall;



//file name slagts
procedure slagts_(const {in}job: PInteger{}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (n)}; const {in}b: PSingle{ dimension (n-1)}; const {in}c: PSingle{ dimension (n-1)}; const {in}d: PSingle{ dimension (n-2)}; const {in}_in: PInteger{ dimension (n)}; const {inout}y: PSingle{ dimension (n)}; const {inout}tol: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name slagv2
procedure slagv2_(const {inout}a: PSingle{ dimension (lda 2)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldb 2)}; const {in}ldb: PInteger{}; const {out}alphar: PSingle{ dimension (2)}; const {out}alphai: PSingle{ dimension (2)}; const {out}beta: PSingle{ dimension (2)}; const {out}csl: PSingle{}; const {out}snl: PSingle{}; const {out}csr: PSingle{}; const {out}snr: PSingle{}); stdcall;



//file name slahqr
procedure slahqr_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PSingle{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {out}wr: PSingle{ dimension (n)}; const {out}wi: PSingle{ dimension (n)}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PSingle{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name slahr2
procedure slahr2_(const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSingle{ dimension (ldan-k+1)}; const {in}lda: PInteger{}; const {out}tau: PSingle{ dimension (nb)}; const {out}t: PSingle{ dimension (ldtnb)}; const {in}ldt: PInteger{}; const {out}y: PSingle{ dimension (ldynb)}; const {in}ldy: PInteger{}); stdcall;



//file name slaic1
procedure slaic1_(const {in}job: PInteger{}; const {in}j: PInteger{}; const {in}x: PSingle{ dimension (j)}; const {in}sest: PSingle{}; const {in}w: PSingle{ dimension (j)}; const {in}gamma: PSingle{}; const {out}sestpr: PSingle{}; const {out}s: PSingle{}; const {out}c: PSingle{}); stdcall;



//file name slaisnan
function slaisnan_(const {in}sin1: PSingle{}; const {in}sin2: PSingle{}):Boolean{}; stdcall;



//file name slaln2
procedure slaln2_(const {in}ltrans: PBoolean{}; const {in}na: PInteger{}; const {in}nw: PInteger{}; const {in}smin: PSingle{}; const {in}ca: PSingle{}; const {in}a: PSingle{ dimension (ldana)}; const {in}lda: PInteger{}; const {in}d1: PSingle{}; const {in}d2: PSingle{}; const {in}b: PSingle{ dimension (ldbnw)}; const {in}ldb: PInteger{}; const {in}wr: PSingle{}; const {in}wi: PSingle{}; const {out}x: PSingle{ dimension (ldxnw)}; const {in}ldx: PInteger{}; const {out}scale: PSingle{}; const {out}xnorm: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name slals0
procedure slals0_(const {in}icompq: PInteger{}; const {in}nl: PInteger{}; const {in}nr: PInteger{}; const {in}sqre: PInteger{}; const {in}nrhs: PInteger{}; const {inout}b: PSingle{ dimension ( ldb nrhs )}; const {in}ldb: PInteger{}; const {out}bx: PSingle{ dimension ( ldbx nrhs )}; const {in}ldbx: PInteger{}; const {in}perm: PInteger{ dimension ( n )}; const {in}givptr: PInteger{}; const {in}givcol: PInteger{ dimension ( ldgcol 2 )}; const {in}ldgcol: PInteger{}; const {in}givnum: PSingle{ dimension ( ldgnum 2 )}; const {in}ldgnum: PInteger{}; const {in}poles: PSingle{ dimension ( ldgnum 2 )}; const {in}difl: PSingle{ dimension ( k )}; const {in}difr: PSingle{ dimension ( ldgnum 2 )}; const {in}z: PSingle{ dimension ( k )}; const {in}k: PInteger{}; const {in}c: PSingle{}; const {in}s: PSingle{}; const {out}work: PSingle{ dimension ( k )}; const {out}info: PInteger{}); stdcall;



//file name slalsa
procedure slalsa_(const {in}icompq: PInteger{}; const {in}smlsiz: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}b: PSingle{ dimension ( ldb nrhs )}; const {in}ldb: PInteger{}; const {out}bx: PSingle{ dimension ( ldbx nrhs )}; const {in}ldbx: PInteger{}; const {in}u: PSingle{ dimension ( ldu smlsiz )}; const {in}ldu: PInteger{ ldu =n}; const {in}vt: PSingle{ dimension ( ldu smlsiz+1 )}; const {in}k: PInteger{ dimension ( n )}; const {in}difl: PSingle{ dimension ( ldu nlvl )}; const {in}difr: PSingle{ dimension ( ldu 2 * nlvl )}; const {in}z: PSingle{ dimension ( ldu nlvl )}; const {in}poles: PSingle{ dimension ( ldu 2 * nlvl )}; const {in}givptr: PInteger{ dimension ( n )}; const {in}givcol: PInteger{ dimension ( ldgcol 2 * nlvl )}; const {in}ldgcol: PInteger{ ldgcol =n}; const {in}perm: PInteger{ dimension ( ldgcol nlvl )}; const {in}givnum: PSingle{ dimension ( ldu 2 * nlvl )}; const {in}c: PSingle{ dimension ( n )}; const {in}s: PSingle{ dimension ( n )}; const {out}work: PSingle{ dimension (n)}; const {out}iwork: PInteger{ dimension (3*n)}; const {out}info: PInteger{}); stdcall;



//file name slalsd
procedure slalsd_(const {in}uplo: PChar{*1}; const {in}smlsiz: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n-1)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {in}rcond: PSingle{}; const {out}rank: PInteger{}; const {out}work: PSingle{ dimension at least}; const {out}iwork: PInteger{ dimension at least}; const {out}info: PInteger{}); stdcall;



//file name slamrg
procedure slamrg_(const {in}n1: PInteger{}; const {in}n2: PInteger{}; const {in}a: PSingle{ dimension (n1+n2)}; const {in}strd1: PInteger{}; const {in}strd2: PInteger{}; const {out}index: PInteger{ dimension (n1+n2)}); stdcall;



//file name slamswlq
procedure slamswlq_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {in}a: PSingle{ dimension}; const {in}lda: PInteger{}; const {in}t: PSingle{ dimension}; const {in}ldt: PInteger{}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name slamtsqr
procedure slamtsqr_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {in}a: PSingle{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}t: PSingle{ dimension}; const {in}ldt: PInteger{}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name slaneg
function slaneg_(const {in}n: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}lld: PSingle{ dimension (n-1)}; const {in}sigma: PSingle{}; const {in}pivmin: PSingle{}; const {in}r: PInteger{}):Integer{}; stdcall;



//file name slangb
function slangb_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name slange
function slange_(const {in}norm: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name slangt
function slangt_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}dl: PSingle{ dimension (n-1)}; const {in}d: PSingle{ dimension (n)}; const {in}du: PSingle{ dimension (n-1)}):Single{}; stdcall;



//file name slanhs
function slanhs_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name slansb
function slansb_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name slansf
function slansf_(const {in}norm: PChar{*1}; const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension ( n*(n+1)/2 );}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name slansp
function slansp_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSingle{ dimension (n*(n+1)/2)}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name slanst
function slanst_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}e: PSingle{ dimension (n-1)}):Single{}; stdcall;



//file name slansy
function slansy_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name slantb
function slantb_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name slantp
function slantp_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSingle{ dimension (n*(n+1)/2)}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name slantr
function slantr_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}):Single{}; stdcall;



//file name slanv2
procedure slanv2_(const {inout}a: PSingle{}; const {inout}b: PSingle{}; const {inout}c: PSingle{}; const {inout}d: PSingle{}; const {out}rt1r: PSingle{}; const {out}rt1i: PSingle{}; const {out}rt2r: PSingle{}; const {out}rt2i: PSingle{}; const {out}cs: PSingle{}; const {out}sn: PSingle{}); stdcall;



//file name slaorhr_col_getrfnp
procedure slaorhr_col_getrfnp_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PSingle{ dimension min(mn)}; const {out}info: PInteger{}); stdcall;



//file name slaorhr_col_getrfnp2
procedure slaorhr_col_getrfnp2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PSingle{ dimension min(mn)}; const {out}info: PInteger{}); stdcall;



//file name slapll
procedure slapll_(const {in}n: PInteger{}; const {inout}x: PSingle{}; const {in}incx: PInteger{}; const {inout}y: PSingle{}; const {in}incy: PInteger{}; const {out}ssmin: PSingle{}); stdcall;



//file name slapmr
procedure slapmr_(const {in}forwrd: PBoolean{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}x: PSingle{ dimension (ldxn)}; const {in}ldx: PInteger{}; const {inout}k: PInteger{ dimension (m)}); stdcall;



//file name slapmt
procedure slapmt_(const {in}forwrd: PBoolean{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}x: PSingle{ dimension (ldxn)}; const {in}ldx: PInteger{}; const {inout}k: PInteger{ dimension (n)}); stdcall;



//file name slapy2
function slapy2_(const {in}x: PSingle{}; const {in}y: PSingle{}):Single{}; stdcall;



//file name slapy3
function slapy3_(const {in}x: PSingle{}; const {in}y: PSingle{}; const {in}z: PSingle{}):Single{}; stdcall;



//file name slaqgb
procedure slaqgb_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {inout}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}r: PSingle{ dimension (m)}; const {in}c: PSingle{ dimension (n)}; const {in}rowcnd: PSingle{}; const {in}colcnd: PSingle{}; const {in}amax: PSingle{}; const {out}equed: PChar{*1}); stdcall;



//file name slaqge
procedure slaqge_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}r: PSingle{ dimension (m)}; const {in}c: PSingle{ dimension (n)}; const {in}rowcnd: PSingle{}; const {in}colcnd: PSingle{}; const {in}amax: PSingle{}; const {out}equed: PChar{*1}); stdcall;



//file name slaqp2
procedure slaqp2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}offset: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}jpvt: PInteger{ dimension (n)}; const {out}tau: PSingle{ dimension (min(mn))}; const {inout}vn1: PSingle{ dimension (n)}; const {inout}vn2: PSingle{ dimension (n)}; const {out}work: PSingle{ dimension (n)}); stdcall;



//file name slaqps
procedure slaqps_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}offset: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}jpvt: PInteger{ dimension (n)}; const {out}tau: PSingle{ dimension (kb)}; const {inout}vn1: PSingle{ dimension (n)}; const {inout}vn2: PSingle{ dimension (n)}; const {inout}auxv: PSingle{ dimension (nb)}; const {inout}f: PSingle{ dimension (ldfnb)}; const {in}ldf: PInteger{}); stdcall;



//file name slaqr0
procedure slaqr0_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PSingle{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {out}wr: PSingle{ dimension (ihi)}; const {out}wi: PSingle{ dimension (ihi)}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PSingle{ dimension (ldzihi)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name slaqr1
procedure slaqr1_(const {in}n: PInteger{}; const {in}h: PSingle{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}sr1: PSingle{}; const {in}si1: PSingle{}; const {in}sr2: PSingle{}; const {in}si2: PSingle{}; const {out}v: PSingle{ dimension (n)}); stdcall;



//file name slaqr2
procedure slaqr2_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ktop: PInteger{}; const {in}kbot: PInteger{}; const {in}nw: PInteger{}; const {inout}h: PSingle{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PSingle{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}ns: PInteger{}; const {out}nd: PInteger{}; const {out}sr: PSingle{ dimension (kbot)}; const {out}si: PSingle{ dimension (kbot)}; const {out}v: PSingle{ dimension (ldvnw)}; const {in}ldv: PInteger{}; const {in}nh: PInteger{}; const {out}t: PSingle{ dimension (ldtnw)}; const {in}ldt: PInteger{}; const {in}nv: PInteger{}; const {out}wv: PSingle{ dimension (ldwvnw)}; const {in}ldwv: PInteger{}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}); stdcall;



//file name slaqr3
procedure slaqr3_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ktop: PInteger{}; const {in}kbot: PInteger{}; const {in}nw: PInteger{}; const {inout}h: PSingle{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PSingle{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}ns: PInteger{}; const {out}nd: PInteger{}; const {out}sr: PSingle{ dimension (kbot)}; const {out}si: PSingle{ dimension (kbot)}; const {out}v: PSingle{ dimension (ldvnw)}; const {in}ldv: PInteger{}; const {in}nh: PInteger{}; const {out}t: PSingle{ dimension (ldtnw)}; const {in}ldt: PInteger{}; const {in}nv: PInteger{}; const {out}wv: PSingle{ dimension (ldwvnw)}; const {in}ldwv: PInteger{}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}); stdcall;



//file name slaqr4
procedure slaqr4_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PSingle{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {out}wr: PSingle{ dimension (ihi)}; const {out}wi: PSingle{ dimension (ihi)}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PSingle{ dimension (ldzihi)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name slaqr5
procedure slaqr5_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}kacc22: PInteger{ with value 0 1 or 2}; const {in}n: PInteger{}; const {in}ktop: PInteger{}; const {in}kbot: PInteger{}; const {in}nshfts: PInteger{}; const {inout}sr: PSingle{ dimension (nshfts)}; const {inout}si: PSingle{ dimension (nshfts)}; const {inout}h: PSingle{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PSingle{ dimension (ldzihiz)}; const {in}ldz: PInteger{}; const {out}v: PSingle{ dimension (ldvnshfts/2)}; const {in}ldv: PInteger{}; const {out}u: PSingle{ dimension (ldu2*nshfts)}; const {in}ldu: PInteger{}; const {in}nv: PInteger{}; const {out}wv: PSingle{ dimension (ldwv2*nshfts)}; const {in}ldwv: PInteger{}; const {in}nh: PInteger{}; const {out}wh: PSingle{ dimension (ldwhnh)}; const {in}ldwh: PInteger{}); stdcall;



//file name slaqsb
procedure slaqsb_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}s: PSingle{ dimension (n)}; const {in}scond: PSingle{}; const {in}amax: PSingle{}; const {out}equed: PChar{*1}); stdcall;



//file name slaqsp
procedure slaqsp_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSingle{ dimension (n*(n+1)/2)}; const {in}s: PSingle{ dimension (n)}; const {in}scond: PSingle{}; const {in}amax: PSingle{}; const {out}equed: PChar{*1}); stdcall;



//file name slaqsy
procedure slaqsy_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}s: PSingle{ dimension (n)}; const {in}scond: PSingle{}; const {in}amax: PSingle{}; const {out}equed: PChar{*1}); stdcall;



//file name slaqtr
procedure slaqtr_(const {in}ltran: PBoolean{}; const {in}lreal: PBoolean{}; const {in}n: PInteger{}; const {in}t: PSingle{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {in}b: PSingle{ dimension (n)}; const {in}w: PSingle{}; const {out}scale: PSingle{}; const {inout}x: PSingle{ dimension (2*n)}; const {out}work: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name slar1v
procedure slar1v_(const {in}n: PInteger{}; const {in}b1: PInteger{}; const {in}bn: PInteger{}; const {in}lambda: PSingle{}; const {in}l: PSingle{ dimension (n-1)}; const {in}d: PSingle{ dimension (n)}; const {in}ld: PSingle{ dimension (n-1)}; const {in}lld: PSingle{ dimension (n-1)}; const {in}pivmin: PSingle{}; const {in}gaptol: PSingle{}; const {inout}z: PSingle{ dimension (n)}; const {in}wantnc: PBoolean{}; const {out}negcnt: PInteger{}; const {out}ztz: PSingle{}; const {out}mingma: PSingle{}; const {inout}r: PInteger{}; const {out}isuppz: PInteger{ dimension (2)}; const {out}nrminv: PSingle{}; const {out}resid: PSingle{}; const {out}rqcorr: PSingle{}; const {out}work: PSingle{ dimension (4*n)}); stdcall;



//file name slar2v
procedure slar2v_(const {in}n: PInteger{}; const {inout}x: PSingle{}; const {inout}y: PSingle{}; const {inout}z: PSingle{}; const {in}incx: PInteger{}; const {in}c: PSingle{ dimension (1+(n-1)*incc)}; const {in}s: PSingle{ dimension (1+(n-1)*incc)}; const {in}incc: PInteger{}); stdcall;



//file name slarf
procedure slarf_(const {in}side: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}v: PSingle{ dimension}; const {in}incv: PInteger{}; const {in}tau: PSingle{}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension});stdcall;



//file name slarfb
procedure slarfb_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}v: PSingle{ dimension}; const {in}ldv: PInteger{}; const {in}t: PSingle{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension (ldworkk)}; const {in}ldwork: PInteger{}); stdcall;



//file name slarfb_gett
procedure slarfb_gett_(const {in}ident: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}t: PSingle{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}work: PSingle{}; const {in}ldwork: PInteger{}); stdcall;



//file name slarfg
procedure slarfg_(const {in}n: PInteger{}; const {inout}alpha: PSingle{}; const {inout}x: PSingle{ dimension}; const {in}incx: PInteger{}; const {out}tau: PSingle{}); stdcall;



//file name slarfgp
procedure slarfgp_(const {in}n: PInteger{}; const {inout}alpha: PSingle{}; const {inout}x: PSingle{ dimension}; const {in}incx: PInteger{}; const {out}tau: PSingle{}); stdcall;



//file name slarft
procedure slarft_(const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}v: PSingle{ dimension}; const {in}ldv: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {out}t: PSingle{ dimension (ldtk)}; const {in}ldt: PInteger{}); stdcall;



//file name slarfx
procedure slarfx_(const {in}side: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}v: PSingle{ dimension (m) if side = 'l'}; const {in}tau: PSingle{}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension}); stdcall;



//file name slarfy
procedure slarfy_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}v: PSingle{ dimension}; const {in}incv: PInteger{}; const {in}tau: PSingle{}; const {inout}c: PSingle{ dimension (ldc n)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension (n)}); stdcall;



//file name slargv
procedure slargv_(const {in}n: PInteger{}; const {inout}x: PSingle{}; const {in}incx: PInteger{}; const {inout}y: PSingle{}; const {in}incy: PInteger{}; const {out}c: PSingle{ dimension (1+(n-1)*incc)}; const {in}incc: PInteger{}); stdcall;



//file name slarnv
procedure slarnv_(const {in}idist: PInteger{}; const {inout}iseed: PInteger{ dimension (4)}; const {in}n: PInteger{}; const {out}x: PSingle{ dimension (n)}); stdcall;



//file name slarra
procedure slarra_(const {in}n: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n)}; const {inout}e2: PSingle{ dimension (n)}; const {in}spltol: PSingle{}; const {in}tnrm: PSingle{}; const {out}nsplit: PInteger{}; const {out}isplit: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name slarrb
procedure slarrb_(const {in}n: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}lld: PSingle{ dimension (n-1)}; const {in}ifirst: PInteger{}; const {in}ilast: PInteger{}; const {in}rtol1: PSingle{}; const {in}rtol2: PSingle{}; const {in}offset: PInteger{}; const {inout}w: PSingle{ dimension (n)}; const {inout}wgap: PSingle{ dimension (n-1)}; const {inout}werr: PSingle{ dimension (n)}; const {out}work: PSingle{ dimension (2*n)}; const {out}iwork: PInteger{ dimension (2*n)}; const {in}pivmin: PSingle{}; const {in}spdiam: PSingle{}; const {in}twist: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name slarrc
procedure slarrc_(const {in}jobt: PChar{*1}; const {in}n: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}d: PSingle{ dimension (n)}; const {in}e: PSingle{ dimension (n)}; const {in}pivmin: PSingle{}; const {out}eigcnt: PInteger{}; const {out}lcnt: PInteger{}; const {out}rcnt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name slarrd
procedure slarrd_(const {in}range: PChar{*1}; const {in}order: PChar{*1}; const {in}n: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}gers: PSingle{ dimension (2*n)}; const {in}reltol: PSingle{}; const {in}d: PSingle{ dimension (n)}; const {in}e: PSingle{ dimension (n-1)}; const {in}e2: PSingle{ dimension (n-1)}; const {in}pivmin: PSingle{}; const {in}nsplit: PInteger{}; const {in}isplit: PInteger{ dimension (n)}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}werr: PSingle{ dimension (n)}; const {out}wl: PSingle{}; const {out}wu: PSingle{}; const {out}iblock: PInteger{ dimension (n)}; const {out}indexw: PInteger{ dimension (n)}; const {out}work: PSingle{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (3*n)}; const {out}info: PInteger{});   stdcall;


//file name slarre
procedure slarre_(const {in}range: PChar{*1}; const {in}n: PInteger{}; const {inout}vl: PSingle{}; const {inout}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n)}; const {inout}e2: PSingle{ dimension (n)}; const {in}rtol1: PSingle{}; const {in}rtol2: PSingle{}; const {in}spltol: PSingle{}; const {out}nsplit: PInteger{}; const {out}isplit: PInteger{ dimension (n)}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}werr: PSingle{ dimension (n)}; const {out}wgap: PSingle{ dimension (n)}; const {out}iblock: PInteger{ dimension (n)}; const {out}indexw: PInteger{ dimension (n)}; const {out}gers: PSingle{ dimension (2*n)}; const {out}pivmin: PSingle{}; const {out}work: PSingle{ dimension (6*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}info: PInteger{}); stdcall;



//file name slarrf
procedure slarrf_(const {in}n: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}l: PSingle{ dimension (n-1)}; const {in}ld: PSingle{ dimension (n-1)}; const {in}clstrt: PInteger{}; const {in}clend: PInteger{}; const {in}w: PSingle{ dimension}; const {inout}wgap: PSingle{ dimension}; const {in}werr: PSingle{ dimension}; const {in}spdiam: PSingle{}; const {in}clgapl: PSingle{}; const {in}clgapr: PSingle{}; const {in}pivmin: PSingle{}; const {out}sigma: PSingle{}; const {out}dplus: PSingle{ dimension (n)}; const {out}lplus: PSingle{ dimension (n-1)}; const {out}work: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name slarrj
procedure slarrj_(const {in}n: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}e2: PSingle{ dimension (n-1)}; const {in}ifirst: PInteger{}; const {in}ilast: PInteger{}; const {in}rtol: PSingle{}; const {in}offset: PInteger{}; const {inout}w: PSingle{ dimension (n)}; const {inout}werr: PSingle{ dimension (n)}; const {out}work: PSingle{ dimension (2*n)}; const {out}iwork: PInteger{ dimension (2*n)}; const {in}pivmin: PSingle{}; const {in}spdiam: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name slarrk
procedure slarrk_(const {in}n: PInteger{}; const {in}iw: PInteger{}; const {in}gl: PSingle{}; const {in}gu: PSingle{}; const {in}d: PSingle{ dimension (n)}; const {in}e2: PSingle{ dimension (n-1)}; const {in}pivmin: PSingle{}; const {in}reltol: PSingle{}; const {out}w: PSingle{}; const {out}werr: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name slarrr
procedure slarrr_(const {in}n: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name slarrv
procedure slarrv_(const {in}n: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {inout}d: PSingle{ dimension (n)}; const {inout}l: PSingle{ dimension (n)}; const {in}pivmin: PSingle{}; const {in}isplit: PInteger{ dimension (n)}; const {in}m: PInteger{}; const {in}dol: PInteger{}; const {in}dou: PInteger{}; const {in}minrgp: PSingle{}; const {in}rtol1: PSingle{}; const {in}rtol2: PSingle{}; const {inout}w: PSingle{ dimension (n)}; const {inout}werr: PSingle{ dimension (n)}; const {inout}wgap: PSingle{ dimension (n)}; const {in}iblock: PInteger{ dimension (n)}; const {in}indexw: PInteger{ dimension (n)}; const {in}gers: PSingle{ dimension (2*n)}; const {out}z: PSingle{ dimension (ldz max(1m) )}; const {in}ldz: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {out}work: PSingle{ dimension (12*n)}; const {out}iwork: PInteger{ dimension (7*n)}; const {out}info: PInteger{}); stdcall;



//file name slarscl2
procedure slarscl2_ (const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}d: PSingle{ length m}; const {inout}x: PSingle{ dimension (ldxn)}; const {in}ldx: PInteger{});  stdcall;



//file name slartg
procedure slartg_(const {in}f: PSingle{}; const {in}g: PSingle{}; const {out}cs: PSingle{}; const {out}sn: PSingle{}; const {out}r: PSingle{}); stdcall;



//file name slartgp
procedure slartgp_(const {in}f: PSingle{}; const {in}g: PSingle{}; const {out}cs: PSingle{}; const {out}sn: PSingle{}; const {out}r: PSingle{}); stdcall;



//file name slartgs
procedure slartgs_(const {in}x: PSingle{}; const {in}y: PSingle{}; const {in}sigma: PSingle{}; const {out}cs: PSingle{}; const {out}sn: PSingle{}); stdcall;



//file name slartv
procedure slartv_(const {in}n: PInteger{}; const {inout}x: PSingle{}; const {in}incx: PInteger{}; const {inout}y: PSingle{}; const {in}incy: PInteger{}; const {in}c: PSingle{ dimension (1+(n-1)*incc)}; const {in}s: PSingle{ dimension (1+(n-1)*incc)}; const {in}incc: PInteger{}); stdcall;



//file name slaruv
procedure slaruv_(const {inout}iseed: PInteger{ dimension (4)}; const {in}n: PInteger{}; const {out}x: PSingle{ dimension (n)}); stdcall;



//file name slarz
procedure slarz_(const {in}side: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {in}v: PSingle{ dimension (1+(l-1)*abs(incv))}; const {in}incv: PInteger{}; const {in}tau: PSingle{}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension}); stdcall;



//file name slarzb
procedure slarzb_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}v: PSingle{ dimension (ldvnv)}; const {in}ldv: PInteger{}; const {in}t: PSingle{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension (ldworkk)}; const {in}ldwork: PInteger{}); stdcall;



//file name slarzt
procedure slarzt_(const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}v: PSingle{ dimension}; const {in}ldv: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {out}t: PSingle{ dimension (ldtk)}; const {in}ldt: PInteger{}); stdcall;



//file name slas2
procedure slas2_(const {in}f: PSingle{}; const {in}g: PSingle{}; const {in}h: PSingle{}; const {out}ssmin: PSingle{}; const {out}ssmax: PSingle{}); stdcall;



//file name slascl
procedure slascl_(const {in}_type: PChar{*1}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}cfrom: PSingle{}; const {in}cto: PSingle{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;


//file name slascl2
procedure slascl2_ (const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}d: PSingle{ length m}; const {inout}x: PSingle{ dimension (ldxn)}; const {in}ldx: PInteger{});  stdcall;



//file name slasd0
procedure slasd0_(const {in}n: PInteger{}; const {in}sqre: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (m-1)}; const {out}u: PSingle{ dimension (ldu n)}; const {in}ldu: PInteger{}; const {out}vt: PSingle{ dimension (ldvt m)}; const {in}ldvt: PInteger{}; const {in}smlsiz: PInteger{}; const {out}iwork: PInteger{ dimension (8*n)}; const {out}work: PSingle{ dimension (3*m2+2*m)}; const {out}info: PInteger{}); stdcall;



//file name slasd1
procedure slasd1_(const {in}nl: PInteger{}; const {in}nr: PInteger{}; const {in}sqre: PInteger{}; const {inout}d: PSingle{ dimension (nl+nr+1)}; const {inout}alpha: PSingle{}; const {inout}beta: PSingle{}; const {inout}u: PSingle{ dimension (ldun)}; const {in}ldu: PInteger{}; const {inout}vt: PSingle{ dimension (ldvtm)}; const {in}ldvt: PInteger{}; const {inout}idxq: PInteger{ dimension (n)}; const {out}iwork: PInteger{ dimension (4*n)}; const {out}work: PSingle{ dimension (3*m2+2*m)}; const {out}info: PInteger{}); stdcall;



//file name slasd2
procedure slasd2_(const {in}nl: PInteger{}; const {in}nr: PInteger{}; const {in}sqre: PInteger{}; const {out}k: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (n)}; const {in}alpha: PSingle{}; const {in}beta: PSingle{}; const {inout}u: PSingle{ dimension (ldun)}; const {in}ldu: PInteger{}; const {inout}vt: PSingle{ dimension (ldvtm)}; const {in}ldvt: PInteger{}; const {out}dsigma: PSingle{ dimension (n)}; const {out}u2: PSingle{ dimension (ldu2n)}; const {in}ldu2: PInteger{}; const {out}vt2: PSingle{ dimension (ldvt2n)}; const {in}ldvt2: PInteger{}; const {out}idxp: PInteger{ dimension (n)}; const {out}idx: PInteger{ dimension (n)}; const {out}idxc: PInteger{ dimension (n)}; const {inout}idxq: PInteger{ dimension (n)}; const {out}coltyp: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name slasd3
procedure slasd3_(const {in}nl: PInteger{}; const {in}nr: PInteger{}; const {in}sqre: PInteger{}; const {in}k: PInteger{}; const {out}d: PSingle{ dimension(k)}; const {out}q: PSingle{ dimension (ldqk)}; const {in}ldq: PInteger{}; const {inout}dsigma: PSingle{ dimension(k)}; const {out}u: PSingle{ dimension (ldu n)}; const {in}ldu: PInteger{}; const {in}u2: PSingle{ dimension (ldu2 n)}; const {in}ldu2: PInteger{}; const {out}vt: PSingle{ dimension (ldvt m)}; const {in}ldvt: PInteger{}; const {inout}vt2: PSingle{ dimension (ldvt2 n)}; const {in}ldvt2: PInteger{}; const {in}idxc: PInteger{ dimension (n)}; const {in}ctot: PInteger{ dimension (4)}; const {inout}z: PSingle{ dimension (k)}; const {out}info: PInteger{}); stdcall;



//file name slasd4
procedure slasd4_(const {in}n: PInteger{}; const {in}i: PInteger{}; const {in}d: PSingle{ dimension ( n )}; const {in}z: PSingle{ dimension ( n )}; const {out}delta: PSingle{ dimension ( n )}; const {in}rho: PSingle{}; const {out}sigma: PSingle{}; const {out}work: PSingle{ dimension ( n )}; const {out}info: PInteger{}); stdcall;



//file name slasd5
procedure slasd5_(const {in}i: PInteger{}; const {in}d: PSingle{ dimension (2)}; const {in}z: PSingle{ dimension (2)}; const {out}delta: PSingle{ dimension (2)}; const {in}rho: PSingle{}; const {out}dsigma: PSingle{}; const {out}work: PSingle{ dimension (2)}); stdcall;



//file name slasd6
procedure slasd6_(const {in}icompq: PInteger{}; const {in}nl: PInteger{}; const {in}nr: PInteger{}; const {in}sqre: PInteger{}; const {inout}d: PSingle{ dimension (nl+nr+1)}; const {inout}vf: PSingle{ dimension (m)}; const {inout}vl: PSingle{ dimension (m)}; const {inout}alpha: PSingle{}; const {inout}beta: PSingle{}; const {inout}idxq: PInteger{ dimension (n)}; const {out}perm: PInteger{ dimension ( n )}; const {out}givptr: PInteger{}; const {out}givcol: PInteger{ dimension ( ldgcol 2 )}; const {in}ldgcol: PInteger{}; const {out}givnum: PSingle{ dimension ( ldgnum 2 )}; const {in}ldgnum: PInteger{}; const {out}poles: PSingle{ dimension ( ldgnum 2 )}; const {out}difl: PSingle{ dimension ( n )}; const {out}difr: PSingle{}; const {out}z: PSingle{ dimension ( m )}; const {out}k: PInteger{}; const {out}c: PSingle{}; const {out}s: PSingle{}; const {out}work: PSingle{ dimension ( 4 * m )}; const {out}iwork: PInteger{ dimension ( 3 * n )}; const {out}info: PInteger{}); stdcall;



//file name slasd7
procedure slasd7_(const {in}icompq: PInteger{}; const {in}nl: PInteger{}; const {in}nr: PInteger{}; const {in}sqre: PInteger{}; const {out}k: PInteger{}; const {inout}d: PSingle{ dimension ( n )}; const {out}z: PSingle{ dimension ( m )}; const {out}zw: PSingle{ dimension ( m )}; const {inout}vf: PSingle{ dimension ( m )}; const {out}vfw: PSingle{ dimension ( m )}; const {inout}vl: PSingle{ dimension ( m )}; const {out}vlw: PSingle{ dimension ( m )}; const {in}alpha: PSingle{}; const {in}beta: PSingle{}; const {out}dsigma: PSingle{ dimension ( n )}; const {out}idx: PInteger{ dimension ( n )}; const {out}idxp: PInteger{ dimension ( n )}; const {in}idxq: PInteger{ dimension ( n )}; const {out}perm: PInteger{ dimension ( n )}; const {out}givptr: PInteger{}; const {out}givcol: PInteger{ dimension ( ldgcol 2 )}; const {in}ldgcol: PInteger{}; const {out}givnum: PSingle{ dimension ( ldgnum 2 )}; const {in}ldgnum: PInteger{}; const {out}c: PSingle{}; const {out}s: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name slasd8
procedure slasd8_(const {in}icompq: PInteger{}; const {in}k: PInteger{}; const {out}d: PSingle{ dimension ( k )}; const {inout}z: PSingle{ dimension ( k )}; const {inout}vf: PSingle{ dimension ( k )}; const {inout}vl: PSingle{ dimension ( k )}; const {out}difl: PSingle{ dimension ( k )}; const {out}difr: PSingle{}; const {in}lddifr: PInteger{}; const {inout}dsigma: PSingle{ dimension ( k )}; const {out}work: PSingle{ dimension (3*k)}; const {out}info: PInteger{}); stdcall;



//file name slasda
procedure slasda_(const {in}icompq: PInteger{}; const {in}smlsiz: PInteger{}; const {in}n: PInteger{}; const {in}sqre: PInteger{}; const {inout}d: PSingle{ dimension ( n )}; const {in}e: PSingle{ dimension ( m-1 )}; const {out}u: PSingle{}; const {in}ldu: PInteger{ ldu =n}; const {out}vt: PSingle{}; const {out}k: PInteger{ dimension ( n )}; const {out}difl: PSingle{ dimension ( ldu nlvl )}; const {out}difr: PSingle{}; const {out}z: PSingle{}; const {out}poles: PSingle{}; const {out}givptr: PInteger{}; const {out}givcol: PInteger{}; const {in}ldgcol: PInteger{ ldgcol =n}; const {out}perm: PInteger{ dimension ( ldgcol nlvl )}; const {out}givnum: PSingle{}; const {out}c: PSingle{}; const {out}s: PSingle{ dimension ( n ) if}; const {out}work: PSingle{ dimension}; const {out}iwork: PInteger{ dimension (7*n)}; const {out}info: PInteger{}); stdcall;



//file name slasdq
procedure slasdq_(const {in}uplo: PChar{*1}; const {in}sqre: PInteger{}; const {in}n: PInteger{}; const {in}ncvt: PInteger{}; const {in}nru: PInteger{}; const {in}ncc: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{}; const {inout}vt: PSingle{ dimension (ldvt ncvt)}; const {in}ldvt: PInteger{}; const {inout}u: PSingle{ dimension (ldu n)}; const {in}ldu: PInteger{}; const {inout}c: PSingle{ dimension (ldc ncc)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension (4*n)}; const {out}info: PInteger{}); stdcall;



//file name slasdt
procedure slasdt_(const {in}n: PInteger{}; const {out}lvl: PInteger{}; const {out}nd: PInteger{}; const {out}inode: PInteger{ dimension ( n )}; const {out}ndiml: PInteger{ dimension ( n )}; const {out}ndimr: PInteger{ dimension ( n )}; const {in}msub: PInteger{}); stdcall;



//file name slaset
procedure slaset_(const {in}uplo: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}alpha: PSingle{}; const {in}beta: PSingle{}; const {out}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}); stdcall;



//file name slasq1
procedure slasq1_(const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n)}; const {out}work: PSingle{ dimension (4*n)}; const {out}info: PInteger{}); stdcall;



//file name slasq2
procedure slasq2_(const {in}n: PInteger{}; const {inout}z: PSingle{ dimension ( 4*n )}; const {out}info: PInteger{}); stdcall;



//file name slasq3
procedure slasq3_(const {in}i0: PInteger{}; const {inout}n0: PInteger{}; const {inout}z: PSingle{ dimension ( 4*n0 )}; const {inout}pp: PInteger{}; const {out}dmin: PSingle{}; const {out}sigma: PSingle{}; const {inout}desig: PSingle{}; const {in}qmax: PSingle{}; const {inout}nfail: PInteger{}; const {inout}iter: PInteger{}; const {inout}ndiv: PInteger{}; const {in}ieee: PBoolean{}; const {inout}ttype: PInteger{}; const {inout}dmin1: PSingle{}; const {inout}dmin2: PSingle{}; const {inout}dn: PSingle{}; const {inout}dn1: PSingle{}; const {inout}dn2: PSingle{}; const {inout}g: PSingle{}; const {inout}tau: PSingle{}); stdcall;



//file name slasq4
procedure slasq4_(const {in}i0: PInteger{}; const {in}n0: PInteger{}; const {in}z: PSingle{ dimension ( 4*n0 )}; const {in}pp: PInteger{}; const {in}n0in: PInteger{}; const {in}dmin: PSingle{}; const {in}dmin1: PSingle{}; const {in}dmin2: PSingle{}; const {in}dn: PSingle{}; const {in}dn1: PSingle{}; const {in}dn2: PSingle{}; const {out}tau: PSingle{}; const {out}ttype: PInteger{}; const {inout}g: PSingle{}); stdcall;



//file name slasq5
procedure slasq5_(const {in}i0: PInteger{}; const {in}n0: PInteger{}; const {in}z: PSingle{ dimension ( 4*n )}; const {in}pp: PInteger{}; const {in}tau: PSingle{}; const {in}sigma: PSingle{}; const {out}dmin: PSingle{}; const {out}dmin1: PSingle{}; const {out}dmin2: PSingle{}; const {out}dn: PSingle{}; const {out}dnm1: PSingle{}; const {out}dnm2: PSingle{}; const {in}ieee: PBoolean{}; const {in}eps: PSingle{}); stdcall;



//file name slasq6
procedure slasq6_(const {in}i0: PInteger{}; const {in}n0: PInteger{}; const {in}z: PSingle{ dimension ( 4*n )}; const {in}pp: PInteger{}; const {out}dmin: PSingle{}; const {out}dmin1: PSingle{}; const {out}dmin2: PSingle{}; const {out}dn: PSingle{}; const {out}dnm1: PSingle{}; const {out}dnm2: PSingle{}); stdcall;



//file name slasr
procedure slasr_(const {in}side: PChar{*1}; const {in}pivot: PChar{*1}; const {in}direct: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}c: PSingle{ dimension}; const {in}s: PSingle{ dimension}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}); stdcall;



//file name slasrt
procedure slasrt_(const {in}id: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name slassq
procedure slassq_(const {in}n: PInteger{}; const {in}x: PSingle{ dimension (1+(n-1)*incx)}; const {in}incx: PInteger{}; const {inout}scale: PSingle{}; const {inout}sumsq: PSingle{}); stdcall;



//file name slasv2
procedure slasv2_(const {in}f: PSingle{}; const {in}g: PSingle{}; const {in}h: PSingle{}; const {out}ssmin: PSingle{}; const {out}ssmax: PSingle{}; const {out}snl: PSingle{}; const {out}csl: PSingle{}; const {out}snr: PSingle{}; const {out}csr: PSingle{}); stdcall;



//file name slaswlq
procedure slaswlq_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSingle{}; const {in}ldt: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork:PInteger{}; const {out}info: PInteger{}); stdcall;



//file name slaswp
procedure slaswp_(const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}k1: PInteger{}; const {in}k2: PInteger{}; const {in}ipiv: PInteger{ dimension (k1+(k2-k1)*abs(incx))}; const {in}incx: PInteger{}); stdcall;



//file name slasy2
procedure slasy2_(const {in}ltranl: PBoolean{}; const {in}ltranr: PBoolean{}; const {in}isgn: PInteger{}; const {in}n1: PInteger{}; const {in}n2: PInteger{}; const {in}tl: PSingle{ dimension (ldtl2)}; const {in}ldtl: PInteger{}; const {in}tr: PSingle{ dimension (ldtr2)}; const {in}ldtr: PInteger{}; const {in}b: PSingle{ dimension (ldb2)}; const {in}ldb: PInteger{}; const {out}scale: PSingle{}; const {out}x: PSingle{ dimension (ldx2)}; const {in}ldx: PInteger{}; const {out}xnorm: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name slasyf
procedure slasyf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}w: PSingle{ dimension (ldwnb)}; const {in}ldw: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name slasyf_aa
procedure slasyf_aa_(const {in}uplo: PChar{*1}; const {in}j1: PInteger{}; const {in}m: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSingle{ dimension (ldam) for}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (m)}; const {inout}h: PSingle{ workspace dimension (ldhnb)}; const {in}ldh: PInteger{}; const {out}work: PSingle{ workspace dimension (m)}); stdcall;



//file name slasyf_rk
procedure slasyf_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PSingle{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}w: PSingle{ dimension (ldwnb)}; const {in}ldw: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name slasyf_rook
procedure slasyf_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}w: PSingle{ dimension (ldwnb)}; const {in}ldw: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name slatbs
procedure slatbs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}normin: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}x: PSingle{ dimension (n)}; const {out}scale: PSingle{}; const {inout}cnorm: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name slatdf
procedure slatdf_(const {in}ijob: PInteger{}; const {in}n: PInteger{}; const {in}z: PSingle{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {inout}rhs: PSingle{ dimension n}; const {inout}rdsum: PSingle{}; const {inout}rdscal: PSingle{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}jpiv: PInteger{ dimension (n)}); stdcall;



//file name slatps
procedure slatps_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}normin: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSingle{ dimension (n*(n+1)/2)}; const {inout}x: PSingle{ dimension (n)}; const {out}scale: PSingle{}; const {inout}cnorm: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name slatrd
procedure slatrd_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PSingle{ dimension (n-1)}; const {out}tau: PSingle{ dimension (n-1)}; const {out}w: PSingle{ dimension (ldwnb)}; const {in}ldw: PInteger{}); stdcall;



//file name slatrs
procedure slatrs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}normin: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}x: PSingle{ dimension (n)}; const {out}scale: PSingle{}; const {inout}cnorm: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name slatrz
procedure slatrz_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSingle{ dimension (m)}; const {out}work: PSingle{ dimension (m)}); stdcall;



//file name slatsqr
procedure slatsqr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSingle{}; const {in}ldt: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name slauu2
procedure slauu2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name slauum
procedure slauum_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sopgtr
procedure sopgtr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSingle{ dimension (n*(n+1)/2)}; const {in}tau: PSingle{ dimension (n-1)}; const {out}q: PSingle{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}work: PSingle{ dimension (n-1)}; const {out}info: PInteger{}); stdcall;



//file name sopmtr
procedure sopmtr_(const {in}side: PChar{*1}; const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}ap: PSingle{ dimension}; const {in}tau: PSingle{ dimension (m-1) if side = 'l'}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension}; const {out}info: PInteger{}); stdcall;



//file name sorbdb
procedure sorbdb_(const {in}trans: PChar{}; const {in}signs: PChar{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PSingle{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x12: PSingle{ dimension (ldx12m-q)}; const {in}ldx12: PInteger{}; const {inout}x21: PSingle{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {inout}x22: PSingle{ dimension (ldx22m-q)}; const {in}ldx22: PInteger{}; const {out}theta: PSingle{ dimension (q)}; const {out}phi: PSingle{ dimension (q-1)}; const {out}taup1: PSingle{ dimension (p)}; const {out}taup2: PSingle{ dimension (m-p)}; const {out}tauq1: PSingle{ dimension (q)}; const {out}tauq2: PSingle{ dimension (m-q)}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sorbdb1
procedure sorbdb1_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PSingle{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PSingle{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PSingle{ dimension (q)}; const {out}phi: PSingle{ dimension (q-1)}; const {out}taup1: PSingle{ dimension (p)}; const {out}taup2: PSingle{ dimension (m-p)}; const {out}tauq1: PSingle{ dimension (q)}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sorbdb2
procedure sorbdb2_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PSingle{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PSingle{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PSingle{ dimension (q)}; const {out}phi: PSingle{ dimension (q-1)}; const {out}taup1: PSingle{ dimension (p)}; const {out}taup2: PSingle{ dimension (m-p)}; const {out}tauq1: PSingle{ dimension (q)}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sorbdb3
procedure sorbdb3_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PSingle{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PSingle{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PSingle{ dimension (q)}; const {out}phi: PSingle{ dimension (q-1)}; const {out}taup1: PSingle{ dimension (p)}; const {out}taup2: PSingle{ dimension (m-p)}; const {out}tauq1: PSingle{ dimension (q)}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sorbdb4
procedure sorbdb4_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PSingle{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PSingle{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PSingle{ dimension (q)}; const {out}phi: PSingle{ dimension (q-1)}; const {out}taup1: PSingle{ dimension (p)}; const {out}taup2: PSingle{ dimension (m-p)}; const {out}tauq1: PSingle{ dimension (q)}; const {out}phantom: PSingle{ dimension (m)}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sorbdb5
procedure sorbdb5_(const {in}m1: PInteger{}; const {in}m2: PInteger{}; const {in}n: PInteger{}; const {inout}x1: PSingle{ dimension (m1)}; const {in}incx1: PInteger{}; const {inout}x2: PSingle{ dimension (m2)}; const {in}incx2: PInteger{}; const {in}q1: PSingle{ dimension (ldq1 n)}; const {in}ldq1: PInteger{}; const {in}q2: PSingle{ dimension (ldq2 n)}; const {in}ldq2: PInteger{}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sorbdb6
procedure sorbdb6_(const {in}m1: PInteger{}; const {in}m2: PInteger{}; const {in}n: PInteger{}; const {inout}x1: PSingle{ dimension (m1)}; const {in}incx1: PInteger{}; const {inout}x2: PSingle{ dimension (m2)}; const {in}incx2: PInteger{}; const {in}q1: PSingle{ dimension (ldq1 n)}; const {in}ldq1: PInteger{}; const {in}q2: PSingle{ dimension (ldq2 n)}; const {in}ldq2: PInteger{}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sorcsd
procedure sorcsd_(const {in}jobu1: PChar{}; const {in}jobu2: PChar{}; const {in}jobv1t: PChar{}; const {in}jobv2t: PChar{}; const {in}trans: PChar{}; const {in}signs: PChar{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PSingle{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x12: PSingle{ dimension (ldx12m-q)}; const {in}ldx12: PInteger{}; const {inout}x21: PSingle{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {inout}x22: PSingle{ dimension (ldx22m-q)}; const {in}ldx22: PInteger{}; const {out}theta: PSingle{ dimension (r) in which r =}; const {out}u1: PSingle{ dimension (ldu1p)}; const {in}ldu1: PInteger{}; const {out}u2: PSingle{ dimension (ldu2m-p)}; const {in}ldu2: PInteger{}; const {out}v1t: PSingle{ dimension (ldv1tq)}; const {in}ldv1t: PInteger{}; const {out}v2t: PSingle{ dimension (ldv2tm-q)}; const {in}ldv2t: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (m-min(p m-p q m-q))}; const {out}info: PInteger{}); stdcall;



//file name sorcsd2by1
procedure sorcsd2by1_(const {in}jobu1: PChar{}; const {in}jobu2: PChar{}; const {in}jobv1t: PChar{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PSingle{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PSingle{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PSingle{ dimension (r) in which r =}; const {out}u1: PSingle{ dimension (p)}; const {in}ldu1: PInteger{}; const {out}u2: PSingle{ dimension (m-p)}; const {in}ldu2: PInteger{}; const {out}v1t: PSingle{ dimension (q)}; const {in}ldv1t: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (m-min(pm-pqm-q))}; const {out}info: PInteger{}); stdcall;



//file name sorg2l
procedure sorg2l_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {out}work: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sorg2r
procedure sorg2r_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {out}work: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sorgbr
procedure sorgbr_(const {in}vect: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sorghr
procedure sorghr_(const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (n-1)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sorgl2
procedure sorgl2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {out}work: PSingle{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name sorglq
procedure sorglq_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sorgql
procedure sorgql_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sorgqr
procedure sorgqr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sorgr2
procedure sorgr2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {out}work: PSingle{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name sorgrq
procedure sorgrq_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sorgtr
procedure sorgtr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (n-1)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sorgtsqr
procedure sorgtsqr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}t: PSingle{}; const {in}ldt: PInteger{}; const {out}work: PSingle{ dimension (max(2lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sorgtsqr_row
procedure sorgtsqr_row_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}t: PSingle{}; const {in}ldt: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sorhr_col
procedure sorhr_col_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PSingle{}; const {in}ldt: PInteger{}; const {out}d: PSingle{ dimension min(mn)}; const {out}info: PInteger{}); stdcall;



//file name sorm2l
procedure sorm2l_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSingle{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension}; const {out}info: PInteger{}); stdcall;



//file name sorm2r
procedure sorm2r_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSingle{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension}; const {out}info: PInteger{}); stdcall;



//file name sorm22
procedure sorm22_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}n1: PInteger{}; const {in} n2: PInteger{}; const {in}q: PSingle{ dimension}; const {in}ldq: PInteger{}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sormbr
procedure sormbr_(const {in}vect: PChar{*1}; const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSingle{ dimension}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (min(nqk))}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sormhr
procedure sormhr_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {in}a: PSingle{ dimension}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sorml2
procedure sorml2_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSingle{ dimension}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension}; const {out}info: PInteger{}); stdcall;



//file name sormlq
procedure sormlq_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSingle{ dimension}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sormql
procedure sormql_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSingle{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sormqr
procedure sormqr_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSingle{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sormr2
procedure sormr2_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSingle{ dimension}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension}; const {out}info: PInteger{}); stdcall;



//file name sormr3
procedure sormr3_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}a: PSingle{ dimension}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension}; const {out}info: PInteger{}); stdcall;



//file name sormrq
procedure sormrq_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PSingle{ dimension}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sormrz
procedure sormrz_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}a: PSingle{ dimension}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension (k)}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sormtr
procedure sormtr_(const {in}side: PChar{*1}; const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension}; const {in}lda: PInteger{}; const {in}tau: PSingle{ dimension}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name spbcon
procedure spbcon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name spbequ
procedure spbequ_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}s: PSingle{ dimension (n)}; const {out}scond: PSingle{}; const {out}amax: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name spbrfs
procedure spbrfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PSingle{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name spbstf
procedure spbstf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name spbsv
procedure spbsv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name spbsvx
procedure spbsvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}afb: PSingle{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {inout}equed: PChar{*1}; const {inout}s: PSingle{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name spbtf2
procedure spbtf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name spbtrf
procedure spbtrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name spbtrs
procedure spbtrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name spftrf
procedure spftrf_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension ( n*(n+1)/2 );}; const {out}info: PInteger{}); stdcall;



//file name spftri
procedure spftri_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension ( n*(n+1)/2 )}; const {out}info: PInteger{}); stdcall;



//file name spftrs
procedure spftrs_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension ( n*(n+1)/2 )}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name spocon
procedure spocon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name spoequ
procedure spoequ_(const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PSingle{ dimension (n)}; const {out}scond: PSingle{}; const {out}amax: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name spoequb
procedure spoequb_(const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PSingle{ dimension (n)}; const {out}scond: PSingle{}; const {out}amax: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name sporfs
procedure sporfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sporfsx
procedure sporfsx_(const {in}uplo: PChar{*1}; const {in}equed: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}s: PSingle{ dimension (n)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}berr: PSingle{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PSingle{ dimension nparams}; const {out}work: PSingle{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sposv
procedure sposv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sposvx
procedure sposvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}equed: PChar{*1}; const {inout}s: PSingle{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sposvxx
procedure sposvxx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}equed: PChar{*1}; const {inout}s: PSingle{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}rpvgrw: PSingle{}; const {out}berr: PSingle{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PSingle{ dimension nparams}; const {out}work: PSingle{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name spotf2
procedure spotf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name spotrf
procedure spotrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name spotrf2
procedure spotrf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name spotri
procedure spotri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name spotrs
procedure spotrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sppcon
procedure sppcon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSingle{ dimension (n*(n+1)/2)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sppequ
procedure sppequ_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSingle{ dimension (n*(n+1)/2)}; const {out}s: PSingle{ dimension (n)}; const {out}scond: PSingle{}; const {out}amax: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name spprfs
procedure spprfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PSingle{ dimension (n*(n+1)/2)}; const {in}afp: PSingle{ dimension (n*(n+1)/2)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sppsv
procedure sppsv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ap: PSingle{ dimension (n*(n+1)/2)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sppsvx
procedure sppsvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ap: PSingle{ dimension (n*(n+1)/2)}; const {inout}afp: PSingle{ dimension (n*(n+1)/2)}; const {inout}equed: PChar{*1}; const {inout}s: PSingle{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name spptrf
procedure spptrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSingle{ dimension (n*(n+1)/2)}; const {out}info: PInteger{}); stdcall;



//file name spptri
procedure spptri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSingle{ dimension (n*(n+1)/2)}; const {out}info: PInteger{}); stdcall;



//file name spptrs
procedure spptrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PSingle{ dimension (n*(n+1)/2)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name spstf2
procedure spstf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {out}piv: PInteger{ dimension (n)}; const {out}rank: PInteger{}; const {in}tol: PSingle{}; const {in}lda: PInteger{}; const {out}work: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name spstrf
procedure spstrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}piv: PInteger{ dimension (n)}; const {out}rank: PInteger{}; const {in}tol: PSingle{}; const {out}work: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name sptcon
procedure sptcon_(const {in}n: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}e: PSingle{ dimension (n-1)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name spteqr
procedure spteqr_(const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n-1)}; const {inout}z: PSingle{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (4*n)}; const {out}info: PInteger{}); stdcall;



//file name sptrfs
procedure sptrfs_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}e: PSingle{ dimension (n-1)}; const {in}df: PSingle{ dimension (n)}; const {in}ef: PSingle{ dimension (n-1)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name sptsv
procedure sptsv_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n-1)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sptsvx
procedure sptsvx_(const {in}fact: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}e: PSingle{ dimension (n-1)}; const {inout}df: PSingle{ dimension (n)}; const {inout}ef: PSingle{ dimension (n-1)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name spttrf
procedure spttrf_(const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n-1)}; const {out}info: PInteger{}); stdcall;



//file name spttrs
procedure spttrs_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}e: PSingle{ dimension (n-1)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sptts2
procedure sptts2_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}e: PSingle{ dimension (n-1)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}); stdcall;



//file name srscl
procedure srscl_(const {in}n: PInteger{}; const {in}sa: PSingle{}; const {inout}sx: PSingle{ dimension}; const {in}incx: PInteger{}); stdcall;



//file name ssb2st_kernels
procedure  ssb2st_kernels( const {in}uplo: PChar{*1}; const {in}wantz: PBoolean{ which indicate if eigenvalue are requested or both}; const {in}ttype: PInteger{}; const {in}st: PInteger{}; const {in}ed: PInteger{}; const {in}sweep: PInteger{}; const {in}n: PInteger{ the order of the matrix a}; const {in}nb: PInteger{ the size of the band}; const {in}ib: PInteger{}; a: PSingle{ a pointer to the matrix a}; const {in}lda: PInteger{ the leading dimension of the matrix a}; const {out}v: PSingle{ dimension 2*n if eigenvalues only are}; const {out}tau: PSingle{ dimension (2*n)}; const {in}ldvt: PInteger{}; const {out}work: PSingle{ workspace of size nb});  stdcall;



//file name ssbev
procedure ssbev_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSingle{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (max(13*n-2))}; const {out}info: PInteger{}); stdcall;



//file name ssbev_2stage
procedure ssbev_2stage_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSingle{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssbevd
procedure ssbevd_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSingle{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSingle{}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssbevd_2stage
procedure ssbevd_2stage_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSingle{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension lwork}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssbevx
procedure ssbevx_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSingle{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}q: PSingle{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssbevx_2stage
procedure ssbevx_2stage_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSingle{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}q: PSingle{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssbgst
procedure ssbgst_(const {in}vect: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ka: PInteger{}; const {in}kb: PInteger{}; const {inout}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}bb: PSingle{ dimension (ldbbn)}; const {in}ldbb: PInteger{}; const {out}x: PSingle{ dimension (ldxn)}; const {in}ldx: PInteger{}; const {out}work: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name ssbgv
procedure ssbgv_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ka: PInteger{}; const {in}kb: PInteger{}; const {inout}ab: PSingle{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {inout}bb: PSingle{ dimension (ldbb n)}; const {in}ldbb: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (3*n)}; const {out}info: PInteger{}); stdcall;



//file name ssbgvd
procedure ssbgvd_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ka: PInteger{}; const {in}kb: PInteger{}; const {inout}ab: PSingle{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {inout}bb: PSingle{ dimension (ldbb n)}; const {in}ldbb: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssbgvx
procedure ssbgvx_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ka: PInteger{}; const {in}kb: PInteger{}; const {inout}ab: PSingle{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {inout}bb: PSingle{ dimension (ldbb n)}; const {in}ldbb: PInteger{}; const {out}q: PSingle{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name ssbtrd
procedure ssbtrd_(const {in}vect: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}d: PSingle{ dimension (n)}; const {out}e: PSingle{ dimension (n-1)}; const {inout}q: PSingle{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}work: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssfrk
procedure ssfrk_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}alpha: PSingle{}; const {in}a: PSingle{ dimension (ldaka)}; const {in}lda: PInteger{}; const {in}beta: PSingle{}; const {inout}c: PSingle{ dimension (nt)}); stdcall;



//file name sspcon
procedure sspcon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSingle{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSingle{ dimension (2*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sspev
procedure sspev_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSingle{ dimension (n*(n+1)/2)}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (3*n)}; const {out}info: PInteger{}); stdcall;



//file name sspevd
procedure sspevd_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSingle{ dimension (n*(n+1)/2)}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sspevx
procedure sspevx_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSingle{ dimension (n*(n+1)/2)}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (8*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sspgst
procedure sspgst_(const {in}itype: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSingle{ dimension (n*(n+1)/2)}; const {in}bp: PSingle{ dimension (n*(n+1)/2)}; const {out}info: PInteger{}); stdcall;



//file name sspgv
procedure sspgv_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSingle{ dimension (n*(n+1)/2)}; const {inout}bp: PSingle{ dimension (n*(n+1)/2)}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (3*n)}; const {out}info: PInteger{}); stdcall;



//file name sspgvd
procedure sspgvd_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSingle{ dimension (n*(n+1)/2)}; const {inout}bp: PSingle{ dimension (n*(n+1)/2)}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sspgvx
procedure sspgvx_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSingle{ dimension (n*(n+1)/2)}; const {inout}bp: PSingle{ dimension (n*(n+1)/2)}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (8*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssprfs
procedure ssprfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PSingle{ dimension (n*(n+1)/2)}; const {in}afp: PSingle{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name sspsv
procedure sspsv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ap: PSingle{ dimension (n*(n+1)/2)}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sspsvx
procedure sspsvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PSingle{ dimension (n*(n+1)/2)}; const {inout}afp: PSingle{ dimension (n*(n+1)/2)}; const {inout}ipiv: PInteger{ dimension (n)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssptrd
procedure ssptrd_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSingle{ dimension (n*(n+1)/2)}; const {out}d: PSingle{ dimension (n)}; const {out}e: PSingle{ dimension (n-1)}; const {out}tau: PSingle{ dimension (n-1)}; const {out}info: PInteger{}); stdcall;



//file name ssptrf
procedure ssptrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSingle{ dimension (n*(n+1)/2)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssptri
procedure ssptri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSingle{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssptrs
procedure ssptrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PSingle{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sstebz
procedure sstebz_(const {in}range: PChar{*1}; const {in}order: PChar{*1}; const {in}n: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {in}d: PSingle{ dimension (n)}; const {in}e: PSingle{ dimension (n-1)}; const {out}m: PInteger{}; const {out}nsplit: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}iblock: PInteger{ dimension (n)}; const {out}isplit: PInteger{ dimension (n)}; const {out}work: PSingle{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (3*n)}; const {out}info: PInteger{}); stdcall;



//file name sstedc
procedure sstedc_(const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n-1)}; const {inout}z: PSingle{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sstegr
procedure sstegr_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n)}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz max(1m) )}; const {in}ldz: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (liwork)}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sstein
procedure sstein_(const {in}n: PInteger{}; const {in}d: PSingle{ dimension (n)}; const {in}e: PSingle{ dimension (n-1)}; const {in}m: PInteger{}; const {in}w: PSingle{ dimension (n)}; const {in}iblock: PInteger{ dimension (n)}; const {in}isplit: PInteger{ dimension (n)}; const {out}z: PSingle{ dimension (ldz m)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (5*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}ifail: PInteger{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name sstemr
procedure sstemr_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n)}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz max(1m) )}; const {in}ldz: PInteger{}; const {in}nzc: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {inout}tryrac: PBoolean{}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (liwork)}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssteqr
procedure ssteqr_(const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n-1)}; const {inout}z: PSingle{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (max(12*n-2))}; const {out}info: PInteger{}); stdcall;



//file name ssterf
procedure ssterf_(const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n-1)}; const {out}info: PInteger{}); stdcall;



//file name sstev
procedure sstev_(const {in}jobz: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n-1)}; const {out}z: PSingle{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (max(12*n-2))}; const {out}info: PInteger{}); stdcall;



//file name sstevd
procedure sstevd_(const {in}jobz: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (n-1)}; const {out}z: PSingle{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PSingle{}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sstevr
procedure sstevr_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (max(1n-1))}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz max(1m) )}; const {in}ldz: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name sstevx
procedure sstevx_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PSingle{ dimension (n)}; const {inout}e: PSingle{ dimension (max(1n-1))}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz max(1m) )}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (5*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssycon
procedure ssycon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSingle{ dimension (2*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssycon_3
procedure ssycon_3_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PSingle{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSingle{ dimension (2*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssycon_rook
procedure ssycon_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PSingle{}; const {out}rcond: PSingle{}; const {out}work: PSingle{ dimension (2*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssyconv
procedure ssyconv_(const {in}uplo: PChar{*1}; const {in}way: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}e: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssyconvf
procedure ssyconvf_(const {in}uplo: PChar{*1}; const {in}way: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}e: PSingle{ dimension (n)}; const {inout}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssyconvf_rook
procedure ssyconvf_rook_(const {in}uplo: PChar{*1}; const {in}way: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}e: PSingle{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssyequb
procedure ssyequb_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PSingle{ dimension (n)}; const {out}scond: PSingle{}; const {out}amax: PSingle{}; const {out}work: PSingle{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name ssyev
procedure ssyev_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssyev_2stage
procedure ssyev_2stage_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}work: PSingle{ dimension lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssyevd
procedure ssyevd_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}work: PSingle{}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssyevd_2stage
procedure ssyevd_2stage_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}work: PSingle{}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssyevr
procedure ssyevr_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssyevr_2stage
procedure ssyevr_2stage_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssyevx
procedure ssyevx_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssyevx_2stage
procedure ssyevx_2stage_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssygs2
procedure ssygs2_(const {in}itype: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssygst
procedure ssygst_(const {in}itype: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssygv
procedure ssygv_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssygv_2stage
procedure ssygv_2stage_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssygvd
procedure ssygvd_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssygvx
procedure ssygvx_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {in}vl: PSingle{}; const {in}vu: PSingle{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PSingle{}; const {out}m: PInteger{}; const {out}w: PSingle{ dimension (n)}; const {out}z: PSingle{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssyrfs
procedure ssyrfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssyrfsx
procedure ssyrfsx_(const {in}uplo: PChar{*1}; const {in}equed: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}s: PSingle{ dimension (n)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}berr: PSingle{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PSingle{ dimension nparams}; const {out}work: PSingle{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssysv
procedure ssysv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssysv_aa
procedure ssysv_aa_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssysv_aa_2stage
procedure ssysv_aa_2stage_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tb: PSingle{ dimension (ltb)}; const {in}ltb: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}ipiv2: PInteger{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSingle{ workspace of size lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssysv_rk
procedure ssysv_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PSingle{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSingle{ dimension ( max(1lwork) )}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssysv_rook
procedure ssysv_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssysvx
procedure ssysvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssysvxx
procedure ssysvxx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PSingle{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}s: PSingle{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PSingle{}; const {out}rpvgrw: PSingle{}; const {out}berr: PSingle{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PSingle{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PSingle{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PSingle{ dimension nparams}; const {out}work: PSingle{ dimension (4*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssyswapr
procedure ssyswapr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}i1: PInteger{}; const {in}i2: PInteger{}); stdcall;



//file name ssytd2
procedure ssytd2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PSingle{ dimension (n)}; const {out}e: PSingle{ dimension (n-1)}; const {out}tau: PSingle{ dimension (n-1)}; const {out}info: PInteger{}); stdcall;



//file name ssytf2
procedure ssytf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssytf2_rk
procedure ssytf2_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PSingle{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssytf2_rook
procedure ssytf2_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssytrd
procedure ssytrd_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PSingle{ dimension (n)}; const {out}e: PSingle{ dimension (n-1)}; const {out}tau: PSingle{ dimension (n-1)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssytrd_2stage
procedure ssytrd_2stage_(const {in}vect: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PSingle{ dimension (n)}; const {out}e: PSingle{ dimension (n-1)}; const {out}tau: PSingle{ dimension (n-kd)}; const {out}hous2: PSingle{ dimension (lhous2)}; const {in}lhous2: PInteger{}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssytrd_sb2st
procedure ssytrd_sb2st_(const {in}stage1: PChar{*1}; const {in}vect: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}d: PSingle{ dimension (n)}; const {out}e: PSingle{ dimension (n-1)}; const {out}hous: PSingle{ dimension lhous that}; const {in}lhous: PInteger{}; const {out}work: PSingle{ dimension lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;


//file name ssytrd_sy2sb
procedure ssytrd_sy2sb_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}tau: PSingle{ dimension (n-kd)}; const {out}work: PSingle{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssytrf
procedure ssytrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssytrf_aa
procedure ssytrf_aa_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssytrf_aa_2stage
procedure ssytrf_aa_2stage_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tb: PSingle{ dimension (ltb)}; const {in}ltb: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}ipiv2: PInteger{ dimension (n)}; const {out}work: PSingle{ workspace of size lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;


//file name ssytrf_rk
procedure ssytrf_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PSingle{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PSingle{ dimension ( max(1lwork) )}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssytrf_rook
procedure ssytrf_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssytri
procedure ssytri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssytri_3
procedure ssytri_3_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PSingle{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSingle{ dimension (n+nb+1)*(nb+3)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssytri_3x
procedure ssytri_3x_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PSingle{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSingle{ dimension (n+nb+1nb+3)}; const {in}nb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssytri_rook
procedure ssytri_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ssytri2
procedure ssytri2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSingle{ dimension (n+nb+1)*(nb+3)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssytri2x
procedure ssytri2x_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PSingle{ dimension (n+nb+1nb+3)}; const {in}nb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssytrs
procedure ssytrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssytrs_3
procedure ssytrs_3_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PSingle{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssytrs_aa
procedure ssytrs_aa_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssytrs_aa_2stage
procedure ssytrs_aa_2stage_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tb: PSingle{ dimension (ltb)}; const {in}ltb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}ipiv2: PInteger{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssytrs_rook
procedure ssytrs_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ssytrs2
procedure ssytrs2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name stbcon
procedure stbcon_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}rcond: PSingle{}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name stbrfs
procedure stbrfs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {in}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name stbtrs
procedure stbtrs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PSingle{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name stfsm
procedure stfsm_(const {in}transr: PChar{*1}; const {in}side: PChar{*1}; const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}alpha: PSingle{}; const {in}a: PSingle{ dimension (nt)}; const {inout}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}); stdcall;



//file name stftri
procedure stftri_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (nt);}; const {out}info: PInteger{}); stdcall;



//file name stfttp
procedure stfttp_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}arf: PSingle{ dimension ( n*(n+1)/2 )}; const {out}ap: PSingle{ dimension ( n*(n+1)/2 )}; const {out}info: PInteger{}); stdcall;



//file name stfttr
procedure stfttr_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}arf: PSingle{ dimension (n*(n+1)/2)}; const {out}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name stgevc
procedure stgevc_(const {in}side: PChar{*1}; const {in}howmny: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}s: PSingle{ dimension (ldsn)}; const {in}lds: PInteger{}; const {in}p: PSingle{ dimension (ldpn)}; const {in}ldp: PInteger{}; const {inout}vl: PSingle{ dimension (ldvlmm)}; const {in}ldvl: PInteger{}; const {inout}vr: PSingle{ dimension (ldvrmm)}; const {in}ldvr: PInteger{}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PSingle{ dimension (6*n)}; const {out}info: PInteger{}); stdcall;



//file name stgex2
procedure stgex2_(const {in}wantq: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {inout}q: PSingle{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {inout}z: PSingle{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {in}j1: PInteger{}; const {in}n1: PInteger{}; const {in}n2: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name stgexc
procedure stgexc_(const {in}wantq: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {inout}q: PSingle{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {inout}z: PSingle{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {inout}ifst: PInteger{}; const {inout}ilst: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name stgsen
procedure stgsen_(const {in}ijob: PInteger{}; const {in}wantq: PBoolean{}; const {in}wantz: PBoolean{}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension(ldan)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension(ldbn)}; const {in}ldb: PInteger{}; const {out}alphar: PSingle{ dimension (n)}; const {out}alphai: PSingle{ dimension (n)}; const {out}beta: PSingle{ dimension (n)}; const {inout}q: PSingle{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {inout}z: PSingle{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}m: PInteger{}; const {out}pl: PSingle{}; const {out}pr: PSingle{}; const {out}dif: PSingle{ dimension (2)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name stgsja
procedure stgsja_(const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}jobq: PChar{*1}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {in}tola: PSingle{}; const {in}tolb: PSingle{}; const {out}alpha: PSingle{ dimension (n)}; const {out}beta: PSingle{ dimension (n)}; const {inout}u: PSingle{ dimension (ldum)}; const {in}ldu: PInteger{}; const {inout}v: PSingle{ dimension (ldvp)}; const {in}ldv: PInteger{}; const {inout}q: PSingle{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}work: PSingle{ dimension (2*n)}; const {out}ncycle: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name stgsna
procedure stgsna_(const {in}job: PChar{*1}; const {in}howmny: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {in}vl: PSingle{ dimension (ldvlm)}; const {in}ldvl: PInteger{}; const {in}vr: PSingle{ dimension (ldvrm)}; const {in}ldvr: PInteger{}; const {out}s: PSingle{ dimension (mm)}; const {out}dif: PSingle{ dimension (mm)}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (n + 6)}; const {out}info: PInteger{}); stdcall;



//file name stgsy2
procedure stgsy2_(const {in}trans: PChar{*1}; const {in}ijob: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (lda m)}; const {in}lda: PInteger{}; const {in}b: PSingle{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {inout}c: PSingle{ dimension (ldc n)}; const {in}ldc: PInteger{}; const {in}d: PSingle{ dimension (ldd m)}; const {in}ldd: PInteger{}; const {in}e: PSingle{ dimension (lde n)}; const {in}lde: PInteger{}; const {inout}f: PSingle{ dimension (ldf n)}; const {in}ldf: PInteger{}; const {out}scale: PSingle{}; const {inout}rdsum: PSingle{}; const {inout}rdscal: PSingle{}; const {out}iwork: PInteger{ dimension (m+n+2)}; const {out}pq: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name stgsyl
procedure stgsyl_(const {in}trans: PChar{*1}; const {in}ijob: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (lda m)}; const {in}lda: PInteger{}; const {in}b: PSingle{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {inout}c: PSingle{ dimension (ldc n)}; const {in}ldc: PInteger{}; const {in}d: PSingle{ dimension (ldd m)}; const {in}ldd: PInteger{}; const {in}e: PSingle{ dimension (lde n)}; const {in}lde: PInteger{}; const {inout}f: PSingle{ dimension (ldf n)}; const {in}ldf: PInteger{}; const {out}dif: PSingle{}; const {out}scale: PSingle{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (m+n+6)}; const {out}info: PInteger{}); stdcall;



//file name stpcon
procedure stpcon_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSingle{ dimension (n*(n+1)/2)}; const {out}rcond: PSingle{}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name stplqt
procedure stplqt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {in}mb: PInteger{}; const {inout}a: PSingle{ dimension (ldam)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}t: PSingle{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}work: PSingle{ dimension (mb*m)}; const {out}info: PInteger{}); stdcall;



//file name stplqt2
procedure stplqt2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {inout}a: PSingle{ dimension (ldam)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}t: PSingle{ dimension (ldtm)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name stpmlqt
procedure stpmlqt_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}mb: PInteger{}; const {in}v: PSingle{ dimension (ldvk)}; const {in}ldv: PInteger{}; const {in}t: PSingle{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}a: PSingle{ dimension}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}work: PSingle{ the dimension of work is}; const {out}info: PInteger{}); stdcall;



//file name stpmqrt
procedure stpmqrt_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}nb: PInteger{}; const {in}v: PSingle{ dimension (ldvk)}; const {in}ldv: PInteger{}; const {in}t: PSingle{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}a: PSingle{ dimension}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}work: PSingle{ the dimension of work is}; const {out}info: PInteger{}); stdcall;



//file name stpqrt
procedure stpqrt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}t: PSingle{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}work: PSingle{ dimension (nb*n)}; const {out}info: PInteger{}); stdcall;



//file name stpqrt2
procedure stpqrt2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}t: PSingle{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name stprfb
procedure stprfb_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}v: PSingle{ dimension}; const {in}ldv: PInteger{}; const {in}t: PSingle{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}a: PSingle{ dimension}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}work: PSingle{ dimension}; const {in}ldwork: PInteger{}); stdcall;



//file name stprfs
procedure stprfs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PSingle{ dimension (n*(n+1)/2)}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {in}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name stptri
procedure stptri_(const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PSingle{ dimension (n*(n+1)/2)}; const {out}info: PInteger{}); stdcall;



//file name stptrs
procedure stptrs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PSingle{ dimension (n*(n+1)/2)}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name stpttf
procedure stpttf_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSingle{ dimension ( n*(n+1)/2 )}; const {out}arf: PSingle{ dimension ( n*(n+1)/2 )}; const {out}info: PInteger{}); stdcall;



//file name stpttr
procedure stpttr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PSingle{ dimension ( n*(n+1)/2 )}; const {out}a: PSingle{ dimension ( lda n )}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name strcon
procedure strcon_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}rcond: PSingle{}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name strevc
procedure strevc_(const {in}side: PChar{*1}; const {in}howmny: PChar{*1}; const {inout}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}t: PSingle{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {inout}vl: PSingle{ dimension (ldvlmm)}; const {in}ldvl: PInteger{}; const {inout}vr: PSingle{ dimension (ldvrmm)}; const {in}ldvr: PInteger{}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PSingle{ dimension (3*n)}; const {out}info: PInteger{}); stdcall;



//file name strevc3
procedure strevc3_(const {in}side: PChar{*1}; const {in}howmny: PChar{*1}; const {inout}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}t: PSingle{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {inout}vl: PSingle{ dimension (ldvlmm)}; const {in}ldvl: PInteger{}; const {inout}vr: PSingle{ dimension (ldvrmm)}; const {in}ldvr: PInteger{}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name strexc
procedure strexc_(const {in}compq: PChar{*1}; const {in}n: PInteger{}; const {inout}t: PSingle{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {inout}q: PSingle{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {inout}ifst: PInteger{}; const {inout}ilst: PInteger{}; const {out}work: PSingle{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name strrfs
procedure strrfs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {in}x: PSingle{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PSingle{ dimension (nrhs)}; const {out}berr: PSingle{ dimension (nrhs)}; const {out}work: PSingle{ dimension (3*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name strsen
procedure strsen_(const {in}job: PChar{*1}; const {in}compq: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {inout}t: PSingle{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {inout}q: PSingle{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}wr: PSingle{ dimension (n)}; const {out}wi: PSingle{ dimension (n)}; const {out}m: PInteger{}; const {out}s: PSingle{}; const {out}sep: PSingle{}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name strsna
procedure strsna_(const {in}job: PChar{*1}; const {in}howmny: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}t: PSingle{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {in}vl: PSingle{ dimension (ldvlm)}; const {in}ldvl: PInteger{}; const {in}vr: PSingle{ dimension (ldvrm)}; const {in}ldvr: PInteger{}; const {out}s: PSingle{ dimension (mm)}; const {out}sep: PSingle{ dimension (mm)}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PSingle{ dimension (ldworkn+6)}; const {in}ldwork: PInteger{}; const {out}iwork: PInteger{ dimension (2*(n-1))}; const {out}info: PInteger{}); stdcall;



//file name strsyl
procedure strsyl_(const {in}trana: PChar{*1}; const {in}tranb: PChar{*1}; const {in}isgn: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldam)}; const {in}lda: PInteger{}; const {in}b: PSingle{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {inout}c: PSingle{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}scale: PSingle{}; const {out}info: PInteger{}); stdcall;



//file name strti2
procedure strti2_(const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name strtri
procedure strtri_(const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name strtrs
procedure strtrs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PSingle{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name strttf
procedure strttf_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}arf: PSingle{ dimension (nt)}; const {out}info: PInteger{}); stdcall;



//file name strttp
procedure strttp_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ap: PSingle{ dimension (n*(n+1)/2)}; const {out}info: PInteger{}); stdcall;



//file name stzrzf
procedure stzrzf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PSingle{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PSingle{ dimension (m)}; const {out}work: PSingle{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name xerbla
procedure xerbla_(const {in}srname: PChar{*(*)}; const {in}info: PInteger{}); stdcall;



//file name xerbla_array
procedure xerbla_array_(const {in}srname_array: PChar{(1) array dimension (srname_len)}; const {in}srname_len: PInteger{}; const {in}info: PInteger{}); stdcall;



//file name zbbcsd
procedure zbbcsd_(const {in}jobu1: PChar{}; const {in}jobu2: PChar{}; const {in}jobv1t: PChar{}; const {in}jobv2t: PChar{}; const {in}trans: PChar{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}theta: PDouble{ dimension (q)}; const {inout}phi: PDouble{ dimension (q-1)}; const {inout}u1: PDComplex{ dimension (ldu1p)}; const {in}ldu1: PInteger{}; const {inout}u2: PDComplex{ dimension (ldu2m-p)}; const {in}ldu2: PInteger{}; const {inout}v1t: PDComplex{ dimension (ldv1tq)}; const {in}ldv1t: PInteger{}; const {inout}v2t: PDComplex{ dimension (ldv2tm-q)}; const {in}ldv2t: PInteger{}; const {out}b11d: PDouble{ dimension (q)}; const {out}b11e: PDouble{ dimension (q-1)}; const {out}b12d: PDouble{ dimension (q)}; const {out}b12e: PDouble{ dimension (q-1)}; const {out}b21d: PDouble{ dimension (q)}; const {out}b21e: PDouble{ dimension (q-1)}; const {out}b22d: PDouble{ dimension (q)}; const {out}b22e: PDouble{ dimension (q-1)}; const {out}rwork: PDouble{ dimension (max(1lrwork))}; const {in}lrwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zbdsqr
procedure zbdsqr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ncvt: PInteger{}; const {in}nru: PInteger{}; const {in}ncc: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n-1)}; const {inout}vt: PDComplex{ dimension (ldvt ncvt)}; const {in}ldvt: PInteger{}; const {inout}u: PDComplex{ dimension (ldu n)}; const {in}ldu: PInteger{}; const {inout}c: PDComplex{ dimension (ldc ncc)}; const {in}ldc: PInteger{}; const {out}rwork: PDouble{ dimension (4*n)}; const {out}info: PInteger{}); stdcall;



//file name zcgesv
procedure zcgesv_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}work: PDComplex{ dimension (nnrhs)}; const {out}swork: PSComplex{ dimension (n*(n+nrhs))}; const {out}rwork: PDouble{ dimension (n)}; const {out}iter: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zcposv
procedure zcposv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{}; const {in}lda: PInteger{}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}work: PDComplex{ dimension (nnrhs)}; const {out}swork: PSComplex{ dimension (n*(n+nrhs))}; const {out}rwork: PDouble{ dimension (n)}; const {out}iter: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zdrscl
procedure zdrscl_(const {in}n: PInteger{}; const {in}sa: PDouble{}; const {inout}sx: PDComplex{ dimension}; const {in}incx: PInteger{}); stdcall;



//file name zgbbrd
procedure zgbbrd_(const {in}vect: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}ncc: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {inout}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}d: PDouble{ dimension (min(mn))}; const {out}e: PDouble{ dimension (min(mn)-1)}; const {out}q: PDComplex{ dimension (ldqm)}; const {in}ldq: PInteger{}; const {out}pt: PDComplex{ dimension (ldptn)}; const {in}ldpt: PInteger{}; const {inout}c: PDComplex{ dimension (ldcncc)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension (max(mn))}; const {out}rwork: PDouble{ dimension (max(mn))}; const {out}info: PInteger{}); stdcall;



//file name zgbcon
procedure zgbcon_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zgbequ
procedure zgbequ_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}r: PDouble{ dimension (m)}; const {out}c: PDouble{ dimension (n)}; const {out}rowcnd: PDouble{}; const {out}colcnd: PDouble{}; const {out}amax: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name zgbequb
procedure zgbequb_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}r: PDouble{ dimension (m)}; const {out}c: PDouble{ dimension (n)}; const {out}rowcnd: PDouble{}; const {out}colcnd: PDouble{}; const {out}amax: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name zgbrfs
procedure zgbrfs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PDComplex{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zgbrfsx
procedure zgbrfsx_(const {in}trans: PChar{*1}; const {in}equed: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PDComplex{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}r: PDouble{ dimension (n)}; const {inout}c: PDouble{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}berr: PDouble{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PDouble{ dimension nparams}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zgbsv
procedure zgbsv_(const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgbsvx
procedure zgbsvx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}afb: PDComplex{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}r: PDouble{ dimension (n)}; const {inout}c: PDouble{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zgbsvxx
procedure zgbsvxx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}afb: PDComplex{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}r: PDouble{ dimension (n)}; const {inout}c: PDouble{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}rpvgrw: PDouble{}; const {out}berr: PDouble{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PDouble{ dimension nparams}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zgbtf2
procedure zgbtf2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {inout}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name zgbtrf
procedure zgbtrf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {inout}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name zgbtrs
procedure zgbtrs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgebak
procedure zgebak_(const {in}job: PChar{*1}; const {in}side: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {in}scale: PDouble{ dimension (n)}; const {in}m: PInteger{}; const {inout}v: PDComplex{ dimension (ldvm)}; const {in}ldv: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgebal
procedure zgebal_(const {in}job: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ilo: PInteger{}; const {out}ihi: PInteger{}; const {out}scale: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zgebd2
procedure zgebd2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PDouble{ dimension (min(mn))}; const {out}e: PDouble{ dimension (min(mn)-1)}; const {out}tauq: PDComplex{ dimension (min(mn))}; const {out}taup: PDComplex{ dimension (min(mn))}; const {out}work: PDComplex{ dimension (max(mn))}; const {out}info: PInteger{}); stdcall;



//file name zgebrd
procedure zgebrd_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PDouble{ dimension (min(mn))}; const {out}e: PDouble{ dimension (min(mn)-1)}; const {out}tauq: PDComplex{ dimension (min(mn))}; const {out}taup: PDComplex{ dimension (min(mn))}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgecon
procedure zgecon_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zgeequ
procedure zgeequ_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}r: PDouble{ dimension (m)}; const {out}c: PDouble{ dimension (n)}; const {out}rowcnd: PDouble{}; const {out}colcnd: PDouble{}; const {out}amax: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name zgeequb
procedure zgeequb_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}r: PDouble{ dimension (m)}; const {out}c: PDouble{ dimension (n)}; const {out}rowcnd: PDouble{}; const {out}colcnd: PDouble{}; const {out}amax: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name zgees
procedure zgees_(const {in}jobvs: PChar{*1}; const {in}sort: PChar{*1}; const {in}select: TLFunc<PDComplex>{ of one PDComplex{ argument}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}sdim: PInteger{}; const {out}w: PDComplex{ dimension (n)}; const {out}vs: PDComplex{ dimension (ldvsn)}; const {in}ldvs: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (n)}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zgeesx
procedure zgeesx_(const {in}jobvs: PChar{*1}; const {in}sort: PChar{*1}; const {in}select: TLFunc<PDComplex>{ of one PDComplex{ argument}; const {in}sense: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}sdim: PInteger{}; const {out}w: PDComplex{ dimension (n)}; const {out}vs: PDComplex{ dimension (ldvsn)}; const {in}ldvs: PInteger{}; const {out}rconde: PDouble{}; const {out}rcondv: PDouble{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (n)}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zgeev
procedure zgeev_(const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}w: PDComplex{ dimension (n)}; const {out}vl: PDComplex{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PDComplex{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zgeevx
procedure zgeevx_(const {in}balanc: PChar{*1}; const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}sense: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}w: PDComplex{ dimension (n)}; const {out}vl: PDComplex{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PDComplex{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}ilo: PInteger{}; const {out}ihi: PInteger{}; const {out}scale: PDouble{ dimension (n)}; const {out}abnrm: PDouble{}; const {out}rconde: PDouble{ dimension (n)}; const {out}rcondv: PDouble{ dimension (n)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zgehd2
procedure zgehd2_(const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDComplex{ dimension (n-1)}; const {out}work: PDComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zgehrd
procedure zgehrd_(const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDComplex{ dimension (n-1)}; const {out}work: PDComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgejsv
procedure zgejsv_(const {in}joba: PChar{*1}; const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}jobr: PChar{*1}; const {in}jobt: PChar{*1}; const {in}jobp: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}sva: PDouble{ dimension (n)}; const {out}u: PDComplex{ dimension ( ldu n )}; const {in}ldu: PInteger{}; const {out}v: PDComplex{ dimension ( ldv n )}; const {in}ldv: PInteger{}; const {out}cwork: PDComplex{ dimension (max(2lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (max(7lwork))}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ of dimension at least 4 that further depends }; const {out}info: PInteger{});stdcall;



//file name zgelq
procedure zgelq_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDComplex{ dimension (max(5tsize))}; const {in}tsize: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgelq2
procedure zgelq2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDComplex{ dimension (min(mn))}; const {out}work: PDComplex{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name zgelqf
procedure zgelqf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDComplex{ dimension (min(mn))}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgelqt
procedure zgelqt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDComplex{ dimension (ldtmin(mn))}; const {in}ldt: PInteger{}; const {out}work: PDComplex{ dimension (mb*n)}; const {out}info: PInteger{}); stdcall;



//file name zgelqt3
procedure zgelqt3_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgels
procedure zgels_(const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgelsd
procedure zgelsd_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}s: PDouble{ dimension (min(mn))}; const {in}rcond: PDouble{}; const {out}rank: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (max(1lrwork))}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {out}info: PInteger{});stdcall;



//file name zgelss
procedure zgelss_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}s: PDouble{ dimension (min(mn))}; const {in}rcond: PDouble{}; const {out}rank: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (5*min(mn))}; const {out}info: PInteger{}); stdcall;



//file name zgelsy
procedure zgelsy_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}jpvt: PInteger{ dimension (n)}; const {in}rcond: PDouble{}; const {out}rank: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zgemlq
procedure zgemlq_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDComplex{ dimension}; const {in}lda: PInteger{}; const {in}t: PDComplex{ dimension (max(5tsize))}; const {in}tsize: PInteger{}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgemlqt
procedure zgemlqt_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}mb: PInteger{}; const {in}v: PDComplex{ dimension}; const {in}ldv: PInteger{}; const {in}t: PDComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ the dimension of}; const {out}info: PInteger{}); stdcall;



//file name zgemqr
procedure zgemqr_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDComplex{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}t: PDComplex{ dimension (max(5tsize))}; const {in}tsize: PInteger{}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgemqrt
procedure zgemqrt_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}nb: PInteger{}; const {in}v: PDComplex{ dimension (ldvk)}; const {in}ldv: PInteger{}; const {in}t: PDComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ the dimension of work is}; const {out}info: PInteger{}); stdcall;



//file name zgeql2
procedure zgeql2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDComplex{ dimension (min(mn))}; const {out}work: PDComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zgeqlf
procedure zgeqlf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDComplex{ dimension (min(mn))}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgeqp3
procedure zgeqp3_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}jpvt: PInteger{ dimension (n)}; const {out}tau: PDComplex{ dimension (min(mn))}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zgeqr
procedure zgeqr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDComplex{ dimension (max(5tsize))}; const {in}tsize: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgeqr2
procedure zgeqr2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDComplex{ dimension (min(mn))}; const {out}work: PDComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zgeqr2p
procedure zgeqr2p_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDComplex{ dimension (min(mn))}; const {out}work: PDComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zgeqrf
procedure zgeqrf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDComplex{ dimension (min(mn))}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgeqrfp
procedure zgeqrfp_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDComplex{ dimension (min(mn))}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgeqrt
procedure zgeqrt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDComplex{ dimension (ldtmin(mn))}; const {in}ldt: PInteger{}; const {out}work: PDComplex{ dimension (nb*n)}; const {out}info: PInteger{}); stdcall;



//file name zgeqrt2
procedure zgeqrt2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgeqrt3
procedure zgeqrt3_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgerfs
procedure zgerfs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zgerfsx
procedure zgerfsx_(const {in}trans: PChar{*1}; const {in}equed: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}r: PDouble{ dimension (n)}; const {in}c: PDouble{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}berr: PDouble{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PDouble{ dimension nparams}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zgerq2
procedure zgerq2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDComplex{ dimension (min(mn))}; const {out}work: PDComplex{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name zgerqf
procedure zgerqf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDComplex{ dimension (min(mn))}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgesc2
procedure zgesc2_(const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}rhs: PDComplex{ dimension n}; const {in}ipiv: PInteger{ dimension (n)}; const {in}jpiv: PInteger{ dimension (n)}; const {out}scale: PDouble{}); stdcall;



//file name zgesdd
procedure zgesdd_(const {in}jobz: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PDouble{ dimension (min(mn))}; const {out}u: PDComplex{ dimension (lduucol)}; const {in}ldu: PInteger{}; const {out}vt: PDComplex{ dimension (ldvtn)}; const {in}ldvt: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (max(1lrwork))}; const {out}iwork: PInteger{ dimension (8*min(mn))}; const {out}info: PInteger{}); stdcall;



//file name zgesv
procedure zgesv_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgesvd
procedure zgesvd_(const {in}jobu: PChar{*1}; const {in}jobvt: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PDouble{ dimension (min(mn))}; const {out}u: PDComplex{ dimension (lduucol)}; const {in}ldu: PInteger{}; const {out}vt: PDComplex{ dimension (ldvtn)}; const {in}ldvt: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (5*min(mn))}; const {out}info: PInteger{}); stdcall;



//file name zgesvdq
procedure zgesvdq_(const {in}joba: PChar{*1}; const {in}jobp: PChar{*1}; const {in}jobr: PChar{*1}; const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ of dimensions lda x n}; const {in}lda: PInteger{}; const {out}s: PDouble{ of dimension n}; const {out}u: PDComplex{ dimension}; const {in}ldu: PInteger{}; const {out}v: PDComplex{ dimension}; const {in}ldv: PInteger{}; const {out}numrank: PInteger{}; const {out}iwork: PInteger{ dimension (max(1 liwork))}; const {in}liwork: PInteger{}; const {out}cwork: PSComplex{*12 array dimension (max(2 lcwork)) used as a workspace}; const {inout}lcwork: PInteger{}; const {out}rwork: PDouble{ dimension (max(1 lrwork))}; const {in}lrwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgesvdx
procedure zgesvdx_(const {in}jobu: PChar{*1}; const {in}jobvt: PChar{*1}; const {in}range: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {out}ns: PInteger{}; const {out}s: PDouble{ dimension (min(mn))}; const {out}u: PDComplex{ dimension (lduucol)}; const {in}ldu: PInteger{}; const {out}vt: PDComplex{ dimension (ldvtn)}; const {in}ldvt: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (max(1lrwork))}; const {out}iwork: PInteger{ dimension (12*min(mn))}; const {out}info: PInteger{}); stdcall;



//file name zgesvj
procedure zgesvj_(const {in}joba: PChar{*1}; const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}sva: PDouble{ dimension (n)}; const {in}mv: PInteger{}; const {inout}v: PDComplex{ dimension (ldvn)}; const {in}ldv: PInteger{}; const {inout}cwork: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {inout}rwork: PDouble{ dimension (max(6lrwork))}; const {in}lrwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgesvx
procedure zgesvx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}r: PDouble{ dimension (n)}; const {inout}c: PDouble{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zgesvxx
procedure zgesvxx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}r: PDouble{ dimension (n)}; const {inout}c: PDouble{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}rpvgrw: PDouble{}; const {out}berr: PDouble{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PDouble{ dimension nparams}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zgetc2
procedure zgetc2_(const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}jpiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zgetf2
procedure zgetf2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name zgetrf
procedure zgetrf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name zgetrf2
procedure zgetrf2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (min(mn))}; const {out}info: PInteger{}); stdcall;



//file name zgetri
procedure zgetri_(const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgetrs
procedure zgetrs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgetsls
procedure zgetsls_(const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgetsqrhrt
procedure zgetsqrhrt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb1: PInteger{}; const {in}nb1: PInteger{}; const {in}nb2: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDComplex{ dimension (ldtn))}; const {in}ldt: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zggbak
procedure zggbak_(const {in}job: PChar{*1}; const {in}side: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {in}lscale: PDouble{ dimension (n)}; const {in}rscale: PDouble{ dimension (n)}; const {in}m: PInteger{}; const {inout}v: PDComplex{ dimension (ldvm)}; const {in}ldv: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zggbal
procedure zggbal_(const {in}job: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}ilo: PInteger{}; const {out}ihi: PInteger{}; const {out}lscale: PDouble{ dimension (n)}; const {out}rscale: PDouble{ dimension (n)}; const {out}work: PDouble{ dimension (lwork)}; const {out}info: PInteger{}); stdcall;



//file name zgges
procedure zgges_(const {in}jobvsl: PChar{*1}; const {in}jobvsr: PChar{*1}; const {in}sort: PChar{*1}; const {in}selctg: TLFunc<PDComplex, PDComplex>{ of two PDComplex{ arguments}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}sdim: PInteger{}; const {out}alpha: PDComplex{ dimension (n)}; const {out}beta: PDComplex{ dimension (n)}; const {out}vsl: PDComplex{ dimension (ldvsln)}; const {in}ldvsl: PInteger{}; const {out}vsr: PDComplex{ dimension (ldvsrn)}; const {in}ldvsr: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (8*n)}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zgges3
procedure zgges3_(const {in}jobvsl: PChar{*1}; const {in}jobvsr: PChar{*1}; const {in}sort: PChar{*1}; const {in}selctg: TLFunc<PDComplex, PDComplex>{ of two PDComplex{ arguments}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}sdim: PInteger{}; const {out}alpha: PDComplex{ dimension (n)}; const {out}beta: PDComplex{ dimension (n)}; const {out}vsl: PDComplex{ dimension (ldvsln)}; const {in}ldvsl: PInteger{}; const {out}vsr: PDComplex{ dimension (ldvsrn)}; const {in}ldvsr: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (8*n)}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zggesx
procedure zggesx_(const {in}jobvsl: PChar{*1}; const {in}jobvsr: PChar{*1}; const {in}sort: PChar{*1}; const {in}selctg: TLFunc<PDComplex, PDComplex>{ of two PDComplex{ arguments}; const {in}sense: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}sdim: PInteger{}; const {out}alpha: PDComplex{ dimension (n)}; const {out}beta: PDComplex{ dimension (n)}; const {out}vsl: PDComplex{ dimension (ldvsln)}; const {in}ldvsl: PInteger{}; const {out}vsr: PDComplex{ dimension (ldvsrn)}; const {in}ldvsr: PInteger{}; const {out}rconde: PDouble{ dimension ( 2 )}; const {out}rcondv: PDouble{ dimension ( 2 )}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension ( 8*n )}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zggev
procedure zggev_(const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}alpha: PDComplex{ dimension (n)}; const {out}beta: PDComplex{ dimension (n)}; const {out}vl: PDComplex{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PDComplex{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (8*n)}; const {out}info: PInteger{}); stdcall;



//file name zggev3
procedure zggev3_(const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}alpha: PDComplex{ dimension (n)}; const {out}beta: PDComplex{ dimension (n)}; const {out}vl: PDComplex{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PDComplex{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (8*n)}; const {out}info: PInteger{}); stdcall;



//file name zggevx
procedure zggevx_(const {in}balanc: PChar{*1}; const {in}jobvl: PChar{*1}; const {in}jobvr: PChar{*1}; const {in}sense: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}alpha: PDComplex{ dimension (n)}; const {out}beta: PDComplex{ dimension (n)}; const {out}vl: PDComplex{ dimension (ldvln)}; const {in}ldvl: PInteger{}; const {out}vr: PDComplex{ dimension (ldvrn)}; const {in}ldvr: PInteger{}; const {out}ilo: PInteger{}; const {out}ihi: PInteger{}; const {out}lscale: PDouble{ dimension (n)}; const {out}rscale: PDouble{ dimension (n)}; const {out}abnrm: PDouble{}; const {out}bbnrm: PDouble{}; const {out}rconde: PDouble{ dimension (n)}; const {out}rcondv: PDouble{ dimension (n)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (lrwork)}; const {out}iwork: PInteger{ dimension (n+2)}; const {out}bwork: PBoolean{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zggglm
procedure zggglm_(const {in}n: PInteger{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {inout}a: PDComplex{ dimension (ldam)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbp)}; const {in}ldb: PInteger{}; const {inout}d: PDComplex{ dimension (n)}; const {out}x: PDComplex{ dimension (m)}; const {out}y: PDComplex{ dimension (p)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgghd3
procedure zgghd3_(const {in}compq: PChar{*1}; const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {inout}q: PDComplex{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {inout}z: PDComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgghrd
procedure zgghrd_(const {in}compq: PChar{*1}; const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {inout}q: PDComplex{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {inout}z: PDComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgglse
procedure zgglse_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}p: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {inout}c: PDComplex{ dimension (m)}; const {inout}d: PDComplex{ dimension (p)}; const {out}x: PDComplex{ dimension (n)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zggqrf
procedure zggqrf_(const {in}n: PInteger{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {inout}a: PDComplex{ dimension (ldam)}; const {in}lda: PInteger{}; const {out}taua: PDComplex{ dimension (min(nm))}; const {inout}b: PDComplex{ dimension (ldbp)}; const {in}ldb: PInteger{}; const {out}taub: PDComplex{ dimension (min(np))}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zggrqf
procedure zggrqf_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}taua: PDComplex{ dimension (min(mn))}; const {inout}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}taub: PDComplex{ dimension (min(pn))}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zggsvd3
procedure zggsvd3_(const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}jobq: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}p: PInteger{}; const {out}k: PInteger{}; const {out}l: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}alpha: PDouble{ dimension (n)}; const {out}beta: PDouble{ dimension (n)}; const {out}u: PDComplex{ dimension (ldum)}; const {in}ldu: PInteger{}; const {out}v: PDComplex{ dimension (ldvp)}; const {in}ldv: PInteger{}; const {out}q: PDComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (2*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zggsvp3
procedure zggsvp3_(const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}jobq: PChar{*1}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {in}tola: PDouble{}; const {in}tolb: PDouble{}; const {out}k: PInteger{}; const {out}l: PInteger{}; const {out}u: PDComplex{ dimension (ldum)}; const {in}ldu: PInteger{}; const {out}v: PDComplex{ dimension (ldvp)}; const {in}ldv: PInteger{}; const {out}q: PDComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}iwork: PInteger{ dimension (n)}; const {out}rwork: PDouble{ dimension (2*n)}; const {out}tau: PDComplex{ dimension (n)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgsvj0
procedure zgsvj0_(const {in}jobv: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}d: PDComplex{ dimension (n)}; const {inout}sva: PDouble{ dimension (n)}; const {in}mv: PInteger{}; const {inout}v: PDComplex{ dimension (ldvn)}; const {in}ldv: PInteger{}; const {in}eps: PDouble{}; const {in}sfmin: PDouble{}; const {in}tol: PDouble{}; const {in}nsweep: PInteger{}; const {out}work: PDComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgsvj1
procedure zgsvj1_(const {in}jobv: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}n1: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}d: PDComplex{ dimension (n)}; const {inout}sva: PDouble{ dimension (n)}; const {in}mv: PInteger{}; const {inout}v: PDComplex{ dimension (ldvn)}; const {in}ldv: PInteger{}; const {in}eps: PDouble{}; const {in}sfmin: PDouble{}; const {in}tol: PDouble{}; const {in}nsweep: PInteger{}; const {out}work: PDComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgtcon
procedure zgtcon_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}dl: PDComplex{ dimension (n-1)}; const {in}d: PDComplex{ dimension (n)}; const {in}du: PDComplex{ dimension (n-1)}; const {in}du2: PDComplex{ dimension (n-2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zgtrfs
procedure zgtrfs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}dl: PDComplex{ dimension (n-1)}; const {in}d: PDComplex{ dimension (n)}; const {in}du: PDComplex{ dimension (n-1)}; const {in}dlf: PDComplex{ dimension (n-1)}; const {in}df: PDComplex{ dimension (n)}; const {in}duf: PDComplex{ dimension (n-1)}; const {in}du2: PDComplex{ dimension (n-2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zgtsv
procedure zgtsv_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}dl: PDComplex{ dimension (n-1)}; const {inout}d: PDComplex{ dimension (n)}; const {inout}du: PDComplex{ dimension (n-1)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgtsvx
procedure zgtsvx_(const {in}fact: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}dl: PDComplex{ dimension (n-1)}; const {in}d: PDComplex{ dimension (n)}; const {in}du: PDComplex{ dimension (n-1)}; const {inout}dlf: PDComplex{ dimension (n-1)}; const {inout}df: PDComplex{ dimension (n)}; const {inout}duf: PDComplex{ dimension (n-1)}; const {inout}du2: PDComplex{ dimension (n-2)}; const {inout}ipiv: PInteger{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zgttrf
procedure zgttrf_(const {in}n: PInteger{}; const {inout}dl: PDComplex{ dimension (n-1)}; const {inout}d: PDComplex{ dimension (n)}; const {inout}du: PDComplex{ dimension (n-1)}; const {out}du2: PDComplex{ dimension (n-2)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zgttrs
procedure zgttrs_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}dl: PDComplex{ dimension (n-1)}; const {in}d: PDComplex{ dimension (n)}; const {in}du: PDComplex{ dimension (n-1)}; const {in}du2: PDComplex{ dimension (n-2)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zgtts2
procedure zgtts2_(const {in}itrans: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}dl: PDComplex{ dimension (n-1)}; const {in}d: PDComplex{ dimension (n)}; const {in}du: PDComplex{ dimension (n-1)}; const {in}du2: PDComplex{ dimension (n-2)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}); stdcall;



//file name zhb2st_kernels
procedure  zhb2st_kernels(
const {in}uplo: PChar{*1}; const {in}wantz: PBoolean{ which indicate if eigenvalue are requested or both}; const {in}ttype: PInteger{}; const {in}st: PInteger{}; const {in}ed: PInteger{}; const {in}sweep: PInteger{}; const {in}n: PInteger{ the order of the matrix a}; const {in}nb: PInteger{ the size of the band}; const {in}ib: PInteger{}; a: PDComplex{ a pointer to the matrix a}; const {in}lda: PInteger{ the leading dimension of the matrix a}; const {out}v: PDComplex{ dimension 2*n if eigenvalues only are}; const {out}tau: PDComplex{ dimension (2*n)}; const {in}ldvt: PInteger{}; const {out}work: PDComplex{ workspace of size nb});  stdcall;



//file name zhbev
procedure zhbev_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDComplex{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (n)}; const {out}rwork: PDouble{ dimension (max(13*n-2))}; const {out}info: PInteger{}); stdcall;



//file name zhbev_2stage
procedure zhbev_2stage_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDComplex{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension lwork}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (max(13*n-2))}; const {out}info: PInteger{}); stdcall;



//file name zhbevd
procedure zhbevd_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDComplex{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhbevd_2stage
procedure zhbevd_2stage_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDComplex{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhbevx
procedure zhbevx_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDComplex{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}q: PDComplex{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (n)}; const {out}rwork: PDouble{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhbevx_2stage
procedure zhbevx_2stage_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDComplex{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {out}q: PDComplex{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhbgst
procedure zhbgst_(const {in}vect: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ka: PInteger{}; const {in}kb: PInteger{}; const {inout}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}bb: PDComplex{ dimension (ldbbn)}; const {in}ldbb: PInteger{}; const {out}x: PDComplex{ dimension (ldxn)}; const {in}ldx: PInteger{}; const {out}work: PDComplex{ dimension (n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhbgv
procedure zhbgv_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ka: PInteger{}; const {in}kb: PInteger{}; const {inout}ab: PDComplex{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {inout}bb: PDComplex{ dimension (ldbb n)}; const {in}ldbb: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (n)}; const {out}rwork: PDouble{ dimension (3*n)}; const {out}info: PInteger{}); stdcall;



//file name zhbgvd
procedure zhbgvd_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ka: PInteger{}; const {in}kb: PInteger{}; const {inout}ab: PDComplex{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {inout}bb: PDComplex{ dimension (ldbb n)}; const {in}ldbb: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (max(1lrwork))}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhbgvx
procedure zhbgvx_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ka: PInteger{}; const {in}kb: PInteger{}; const {inout}ab: PDComplex{ dimension (ldab n)}; const {in}ldab: PInteger{}; const {inout}bb: PDComplex{ dimension (ldbb n)}; const {in}ldbb: PInteger{}; const {out}q: PDComplex{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (n)}; const {out}rwork: PDouble{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhbtrd
procedure zhbtrd_(const {in}vect: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}d: PDouble{ dimension (n)}; const {out}e: PDouble{ dimension (n-1)}; const {inout}q: PDComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}work: PDComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhecon
procedure zhecon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zhecon_3
procedure zhecon_3_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PDComplex{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zhecon_rook
procedure zhecon_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zheequb
procedure zheequb_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PDouble{ dimension (n)}; const {out}scond: PDouble{}; const {out}amax: PDouble{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zheev
procedure zheev_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (max(1 3*n-2))}; const {out}info: PInteger{}); stdcall;



//file name zheev_2stage
procedure zheev_2stage_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (max(1 3*n-2))}; const {out}info: PInteger{}); stdcall;



//file name zheevd
procedure zheevd_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zheevd_2stage
procedure zheevd_2stage_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zheevr
procedure zheevr_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (max(1lrwork))}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zheevr_2stage
procedure zheevr_2stage_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (max(1lrwork))}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zheevx
procedure zheevx_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zheevx_2stage
procedure zheevx_2stage_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhegs2
procedure zhegs2_(const {in}itype: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhegst
procedure zhegst_(const {in}itype: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhegv
procedure zhegv_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (max(1 3*n-2))}; const {out}info: PInteger{}); stdcall;



//file name zhegv_2stage
procedure zhegv_2stage_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (max(1 3*n-2))}; const {out}info: PInteger{}); stdcall;



//file name zhegvd
procedure zhegvd_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (max(1lrwork))}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhegvx
procedure zhegvx_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zherfs
procedure zherfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zherfsx
procedure zherfsx_(const {in}uplo: PChar{*1}; const {in}equed: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}s: PDouble{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}berr: PDouble{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PDouble{ dimension nparams}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zhesv
procedure zhesv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhesv_aa
procedure zhesv_aa_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhesv_aa_2stage
procedure zhesv_aa_2stage_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tb: PDComplex{ dimension (ltb)}; const {in}ltb: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}ipiv2: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{ workspace of size lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhesv_rk
procedure zhesv_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PDComplex{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{ dimension ( max(1lwork) )}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhesv_rook
procedure zhesv_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhesvx
procedure zhesvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhesvxx
procedure zhesvxx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}s: PDouble{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}rpvgrw: PDouble{}; const {out}berr: PDouble{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PDouble{ dimension nparams}; const {out}work: PDComplex{ dimension (5*n)}; const {out}rwork: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zheswapr
procedure zheswapr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}i1: PInteger{}; const {in}i2: PInteger{}); stdcall;



//file name zhetd2
procedure zhetd2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PDouble{ dimension (n)}; const {out}e: PDouble{ dimension (n-1)}; const {out}tau: PDComplex{ dimension (n-1)}; const {out}info: PInteger{}); stdcall;



//file name zhetf2
procedure zhetf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhetf2_rk
procedure zhetf2_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PDComplex{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhetf2_rook
procedure zhetf2_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhetrd
procedure zhetrd_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PDouble{ dimension (n)}; const {out}e: PDouble{ dimension (n-1)}; const {out}tau: PDComplex{ dimension (n-1)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhetrd_2stage
procedure zhetrd_2stage_(const {in}vect: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PDouble{ dimension (n)}; const {out}e: PDouble{ dimension (n-1)}; const {out}tau: PDComplex{ dimension (n-kd)}; const {out}hous2: PDComplex{ dimension (lhous2)}; const {in}lhous2: PInteger{}; const {out}work: PDComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhetrd_hb2st
procedure zhetrd_hb2st_(const {in}stage1: PChar{*1}; const {in}vect: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}d: PDouble{ dimension (n)}; const {out}e: PDouble{ dimension (n-1)}; const {out}hous: PDComplex{ dimension lhous that}; const {in}lhous: PInteger{}; const {out}work: PDComplex{ dimension lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;


//file name zhetrd_he2hb
procedure zhetrd_he2hb_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}tau: PDComplex{ dimension (n-kd)}; const {out}work: PDComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhetrf
procedure zhetrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhetrf_aa
procedure zhetrf_aa_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhetrf_aa_2stage
procedure zhetrf_aa_2stage_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tb: PDComplex{ dimension (ltb)}; const {in}ltb: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}ipiv2: PInteger{ dimension (n)}; const {out}work: PDComplex{ workspace of size lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;


//file name zhetrf_rk
procedure zhetrf_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PDComplex{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension ( max(1lwork) )}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhetrf_rook
procedure zhetrf_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhetri
procedure zhetri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhetri_3
procedure zhetri_3_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PDComplex{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (n+nb+1)*(nb+3)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhetri_3x
procedure zhetri_3x_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PDComplex{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (n+nb+1nb+3)}; const {in}nb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhetri_rook
procedure zhetri_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhetri2
procedure zhetri2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (n+nb+1)*(nb+3)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhetri2x
procedure zhetri2x_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (n+nb+1nb+3)}; const {in}nb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhetrs
procedure zhetrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhetrs_3
procedure zhetrs_3_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PDComplex{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhetrs_aa
procedure zhetrs_aa_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhetrs_aa_2stage
procedure zhetrs_aa_2stage_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tb: PDComplex{ dimension (ltb)}; const {in}ltb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}ipiv2: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhetrs_rook
procedure zhetrs_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhetrs2
procedure zhetrs2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhfrk
procedure zhfrk_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}alpha: PDouble{}; const {in}a: PDComplex{ dimension (ldaka)}; const {in}lda: PInteger{}; const {in}beta: PDouble{}; const {inout}c: PDComplex{ dimension (n*(n+1)/2)}); stdcall;



//file name zhgeqz
procedure zhgeqz_(const {in}job: PChar{*1}; const {in}compq: PChar{*1}; const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PDComplex{ dimension (ldh n)}; const {in}ldh: PInteger{}; const {inout}t: PDComplex{ dimension (ldt n)}; const {in}ldt: PInteger{}; const {out}alpha: PDComplex{ dimension (n)}; const {out}beta: PDComplex{ dimension (n)}; const {inout}q: PDComplex{ dimension (ldq n)}; const {in}ldq: PInteger{}; const {inout}z: PDComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhpcon
procedure zhpcon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zhpev
procedure zhpev_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (max(1 2*n-1))}; const {out}rwork: PDouble{ dimension (max(1 3*n-2))}; const {out}info: PInteger{}); stdcall;



//file name zhpevd
procedure zhpevd_(const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (max(1lrwork))}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhpevx
procedure zhpevx_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz max(1m))}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhpgst
procedure zhpgst_(const {in}itype: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {in}bp: PDComplex{ dimension (n*(n+1)/2)}; const {out}info: PInteger{}); stdcall;



//file name zhpgv
procedure zhpgv_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {inout}bp: PDComplex{ dimension (n*(n+1)/2)}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (max(1 2*n-1))}; const {out}rwork: PDouble{ dimension (max(1 3*n-2))}; const {out}info: PInteger{}); stdcall;



//file name zhpgvd
procedure zhpgvd_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {inout}bp: PDComplex{ dimension (n*(n+1)/2)}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (max(1lrwork))}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhpgvx
procedure zhpgvx_(const {in}itype: PInteger{}; const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {inout}bp: PDComplex{ dimension (n*(n+1)/2)}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (7*n)}; const {out}iwork: PInteger{ dimension (5*n)}; const {out}ifail: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhprfs
procedure zhprfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {in}afp: PDComplex{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhpsv
procedure zhpsv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhpsvx
procedure zhpsvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {inout}afp: PDComplex{ dimension (n*(n+1)/2)}; const {inout}ipiv: PInteger{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhptrd
procedure zhptrd_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {out}d: PDouble{ dimension (n)}; const {out}e: PDouble{ dimension (n-1)}; const {out}tau: PDComplex{ dimension (n-1)}; const {out}info: PInteger{}); stdcall;



//file name zhptrf
procedure zhptrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhptri
procedure zhptri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zhptrs
procedure zhptrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zhsein
procedure zhsein_(const {in}side: PChar{*1}; const {in}eigsrc: PChar{*1}; const {in}initv: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}h: PDComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {inout}w: PDComplex{ dimension (n)}; const {inout}vl: PDComplex{ dimension (ldvlmm)}; const {in}ldvl: PInteger{}; const {inout}vr: PDComplex{ dimension (ldvrmm)}; const {in}ldvr: PInteger{}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PDComplex{ dimension (n*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}ifaill: PInteger{ dimension (mm)}; const {out}ifailr: PInteger{ dimension (mm)}; const {out}info: PInteger{}); stdcall;



//file name zhseqr
procedure zhseqr_(const {in}job: PChar{*1}; const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PDComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {out}w: PDComplex{ dimension (n)}; const {inout}z: PDComplex{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zla_gbamv
procedure zla_gbamv_(const {in}trans: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}alpha: PDouble{}; const {in}ab: PDComplex{ dimension ( ldab n )}; const {in}ldab: PInteger{}; const {in}x: PDComplex{ dimension}; const {in}incx: PInteger{}; const {in}beta: PDouble{}; const {inout}y: PDouble{ dimension}; const {in}incy: PInteger{}); stdcall;



//file name zla_gbrcond_c
function zla_gbrcond_c_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PDComplex{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}c: PDouble{ dimension (n)}; const {in}capply: PBoolean{}; const {out}info: PInteger{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}):Double{}; stdcall;



//file name zla_gbrcond_x
function zla_gbrcond_x_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PDComplex{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}x: PDComplex{ dimension (n)}; const {out}info: PInteger{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}):Double{}; stdcall;



//file name zla_gbrfsx_extended
procedure zla_gbrfsx_extended_(const {in}prec_type: PInteger{}; const {in}trans_type: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PDComplex{ dimension (ldafn)}; const {in}ldafb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}colequ: PBoolean{}; const {in}c: PDouble{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}y: PDComplex{ dimension (ldynrhs)}; const {in}ldy: PInteger{}; const {out}berr_out: PDouble{ dimension (nrhs)}; const {in}n_norms: PInteger{}; const {inout}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {inout}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}res: PDComplex{ dimension (n)}; const {in}ayb: PDouble{ dimension (n)}; const {in}dy: PDComplex{ dimension (n)}; const {in}y_tail: PDComplex{ dimension (n)}; const {in}rcond: PDouble{}; const {in}ithresh: PInteger{}; const {in}rthresh: PDouble{}; const {in}dz_ub: PDouble{}; const {in}ignore_cwise: PBoolean{}; const {out}info: PInteger{}); stdcall;



//file name zla_gbrpvgrw
function zla_gbrpvgrw_(const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ncols: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PDComplex{ dimension (ldafbn)}; const {in}ldafb: PInteger{}):Double{}; stdcall;



//file name zla_geamv
procedure zla_geamv_ (const {in}trans: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}alpha: PDouble{}; const {in}a: PDComplex{ dimension ( lda n )}; const {in}lda: PInteger{}; const {in}x: PDComplex{ dimension at least}; const {in}incx: PInteger{}; const {in}beta: PDouble{}; const {inout}y: PDouble{ dimension}; const {in}incy: PInteger{});  stdcall;



//file name zla_gercond_c
function zla_gercond_c_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}c: PDouble{ dimension (n)}; const {in}capply: PBoolean{}; const {out}info: PInteger{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}):Double{}; stdcall;



//file name zla_gercond_x
function zla_gercond_x_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}x: PDComplex{ dimension (n)}; const {out}info: PInteger{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}):Double{}; stdcall;



//file name zla_gerfsx_extended
procedure zla_gerfsx_extended_(const {in}prec_type: PInteger{}; const {in}trans_type: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}colequ: PBoolean{}; const {in}c: PDouble{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}y: PDComplex{ dimension (ldynrhs)}; const {in}ldy: PInteger{}; const {out}berr_out: PDouble{ dimension (nrhs)}; const {in}n_norms: PInteger{}; const {inout}errs_n: PDouble{ dimension (nrhs n_err_bnds)}; const {inout}errs_c: PDouble{ dimension (nrhs n_err_bnds)}; const {in}res: PDComplex{ dimension (n)}; const {in}ayb: PDouble{ dimension (n)}; const {in}dy: PDComplex{ dimension (n)}; const {in}y_tail: PDComplex{ dimension (n)}; const {in}rcond: PDouble{}; const {in}ithresh: PInteger{}; const {in}rthresh: PDouble{}; const {in}dz_ub: PDouble{}; const {in}ignore_cwise: PBoolean{}; const {out}info: PInteger{});stdcall;



//file name zla_gerpvgrw
function zla_gerpvgrw_(const {in}n: PInteger{}; const {in}ncols: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}):Double{}; stdcall;



//file name zla_heamv
procedure zla_heamv_(const {in}uplo: PInteger{}; const {in}n: PInteger{}; const {in}alpha: PDouble{ }; const {in}a: PDComplex{ dimension ( lda n )}; const {in}lda: PInteger{}; const {in}x: PDComplex{ dimension at least}; const {in}incx: PInteger{}; const {in}beta: PDouble{ }; const {inout}y: PDouble{ dimension}; const {in}incy: PInteger{}); stdcall;



//file name zla_hercond_c
function zla_hercond_c_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}c: PDouble{ dimension (n)}; const {in}capply: PBoolean{}; const {out}info: PInteger{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}):Double{}; stdcall;



//file name zla_hercond_x
function zla_hercond_x_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}x: PDComplex{ dimension (n)}; const {out}info: PInteger{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}):Double{}; stdcall;



//file name zla_herfsx_extended
procedure zla_herfsx_extended_(const {in}prec_type: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}colequ: PBoolean{}; const {in}c: PDouble{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}y: PDComplex{ dimension (ldynrhs)}; const {in}ldy: PInteger{}; const {out}berr_out: PDouble{ dimension (nrhs)}; const {in}n_norms: PInteger{}; const {inout}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {inout}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}res: PDComplex{ dimension (n)}; const {in}ayb: PDouble{ dimension (n)}; const {in}dy: PDComplex{ dimension (n)}; const {in}y_tail: PDComplex{ dimension (n)}; const {in}rcond: PDouble{}; const {in}ithresh: PInteger{}; const {in}rthresh: PDouble{}; const {in}dz_ub: PDouble{}; const {in}ignore_cwise: PBoolean{}; const {out}info: PInteger{});stdcall;



//file name zla_herpvgrw
function zla_herpvgrw_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}info: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDouble{ dimension (2*n)}):Double{}; stdcall;



//file name zla_lin_berr
procedure zla_lin_berr_ (const {in}n: PInteger{}; const {in}nz: PInteger{}; const {in}nrhs: PInteger{}; const {in}res: PDComplex{ dimension (nnrhs)}; const {in}ayb: PDouble{ dimension (n nrhs)}; const {out}berr: PDouble{ dimension (nrhs)});  stdcall;



//file name zla_porcond_c
function zla_porcond_c_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}c: PDouble{ dimension (n)}; const {in}capply: PBoolean{}; const {out}info: PInteger{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}):Double{}; stdcall;



//file name zla_porcond_x
function zla_porcond_x_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}x: PDComplex{ dimension (n)}; const {out}info: PInteger{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}):Double{}; stdcall;



//file name zla_porfsx_extended
procedure zla_porfsx_extended_(const {in}prec_type: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}colequ: PBoolean{}; const {in}c: PDouble{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}y: PDComplex{ dimension (ldynrhs)}; const {in}ldy: PInteger{}; const {out}berr_out: PDouble{ dimension (nrhs)}; const {in}n_norms: PInteger{}; const {inout}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {inout}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}res: PDComplex{ dimension (n)}; const {in}ayb: PDouble{ dimension (n)}; const {in}dy: PDComplex{ precision array dimension (n)}; const {in}y_tail: PDComplex{ dimension (n)}; const {in}rcond: PDouble{}; const {in}ithresh: PInteger{}; const {in}rthresh: PDouble{}; const {in}dz_ub: PDouble{}; const {in}ignore_cwise: PBoolean{}; const {out}info: PInteger{});stdcall;



//file name zla_porpvgrw
function zla_porpvgrw_(const {in}uplo: PChar{*1}; const {in}ncols: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {out}work: PDouble{ dimension (2*n)}):Double{}; stdcall;



//file name zla_syamv
procedure zla_syamv_(const {in}uplo: PInteger{}; const {in}n: PInteger{}; const {in}alpha: PDouble{ }; const {in}a: PDComplex{ dimension ( lda n )}; const {in}lda: PInteger{}; const {in}x: PDComplex{ dimension at least}; const {in}incx: PInteger{}; const {in}beta: PDouble{ }; const {inout}y: PDouble{ dimension}; const {in}incy: PInteger{}); stdcall;



//file name zla_syrcond_c
function zla_syrcond_c_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}c: PDouble{ dimension (n)}; const {in}capply: PBoolean{}; const {out}info: PInteger{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}):Double{}; stdcall;



//file name zla_syrcond_x
function zla_syrcond_x_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}x: PDComplex{ dimension (n)}; const {out}info: PInteger{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}):Double{}; stdcall;



//file name zla_syrfsx_extended
procedure zla_syrfsx_extended_(const {in}prec_type: PInteger{}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}colequ: PBoolean{}; const {in}c: PDouble{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}y: PDComplex{ dimension (ldynrhs)}; const {in}ldy: PInteger{}; const {out}berr_out: PDouble{ dimension (nrhs)}; const {in}n_norms: PInteger{}; const {inout}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {inout}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}res: PDComplex{ dimension (n)}; const {in}ayb: PDouble{ dimension (n)}; const {in}dy: PDComplex{ dimension (n)}; const {in}y_tail: PDComplex{ dimension (n)}; const {in}rcond: PDouble{}; const {in}ithresh: PInteger{}; const {in}rthresh: PDouble{}; const {in}dz_ub: PDouble{}; const {in}ignore_cwise: PBoolean{}; const {out}info: PInteger{}); stdcall;



//file name zla_syrpvgrw
function zla_syrpvgrw_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}info: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDouble{ dimension (2*n)}):Double{}; stdcall;



//file name zla_wwaddw
procedure zla_wwaddw_(const {in}n: PInteger{}; const {inout}x: PDComplex{ dimension (n)}; const {inout}y: PDComplex{ dimension (n)}; const {in}w: PDComplex{ dimension (n)}); stdcall;



//file name zlabrd
procedure zlabrd_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PDouble{ dimension (nb)}; const {out}e: PDouble{ dimension (nb)}; const {out}tauq: PDComplex{ dimension (nb)}; const {out}taup: PDComplex{ dimension (nb)}; const {out}x: PDComplex{ dimension (ldxnb)}; const {in}ldx: PInteger{}; const {out}y: PDComplex{ dimension (ldynb)}; const {in}ldy: PInteger{}); stdcall;



//file name zlacgv
procedure zlacgv_(const {in}n: PInteger{}; const {inout}x: PDComplex{ dimension}; const {in}incx: PInteger{}); stdcall;



//file name zlacn2
procedure zlacn2_(const {in}n: PInteger{}; const {out}v: PDComplex{ dimension (n)}; const {inout}x: PDComplex{ dimension (n)}; const {inout}est: PDouble{}; const {inout}kase: PInteger{}; const {inout}isave: PInteger{ dimension (3)}); stdcall;



//file name zlacon
procedure zlacon_(const {in}n: PInteger{}; const {out}v: PDComplex{ dimension (n)}; const {inout}x: PDComplex{ dimension (n)}; const {inout}est: PDouble{}; const {inout}kase: PInteger{}); stdcall;



//file name zlacp2
procedure zlacp2_(const {in}uplo: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}); stdcall;



//file name zlacpy
procedure zlacpy_(const {in}uplo: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}); stdcall;



//file name zlacrm
procedure zlacrm_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (lda n)}; const {in}lda: PInteger{}; const {in}b: PDouble{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}c: PDComplex{ dimension (ldc n)}; const {in}ldc: PInteger{}; const {out}rwork: PDouble{ dimension (2*m*n)}); stdcall;



//file name zlacrt
procedure zlacrt_(const {in}n: PInteger{}; const {inout}cx: PDComplex{ dimension (n)}; const {in}incx: PInteger{}; const {inout}cy: PDComplex{ dimension (n)}; const {in}incy: PInteger{}; const {in}c: PDComplex{}; const {in}s: PDComplex{}); stdcall;



//file name zladiv
function zladiv_(const {in}x: PDComplex{}; const {in}y: PDComplex{}):PDComplex{}; stdcall;



//file name zlaed0
procedure zlaed0_(const {in}qsiz: PInteger{}; const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n-1)}; const {inout}q: PDComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}iwork: PInteger{}; const {out}rwork: PDouble{}; const {out}qstore: PDComplex{ dimension (ldqs n)}; const {in}ldqs: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zlaed7
procedure zlaed7_(const {in}n: PInteger{}; const {in}cutpnt: PInteger{}; const {in}qsiz: PInteger{}; const {in}tlvls: PInteger{}; const {in}curlvl: PInteger{}; const {in}curpbm: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}q: PDComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {in}rho: PDouble{}; const {out}indxq: PInteger{ dimension (n)}; const {out}iwork: PInteger{ dimension (4*n)}; const {out}rwork: PDouble{}; const {out}work: PDComplex{ dimension (qsiz*n)}; const {inout}qstore: PDouble{ dimension (n2+1)}; const {inout}qptr: PInteger{ dimension (n+2)}; const {in}prmptr: PInteger{ dimension (n lg n)}; const {in}perm: PInteger{ dimension (n lg n)}; const {in}givptr: PInteger{ dimension (n lg n)}; const {in}givcol: PInteger{ dimension (2 n lg n)}; const {in}givnum: PDouble{ dimension (2 n lg n)}; const {out}info: PInteger{}); stdcall;



//file name zlaed8
procedure zlaed8_(const {out}k: PInteger{}; const {in}n: PInteger{}; const {in}qsiz: PInteger{}; const {inout}q: PDComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}rho: PDouble{}; const {in}cutpnt: PInteger{}; const {in}z: PDouble{ dimension (n)}; const {out}dlamda: PDouble{ dimension (n)}; const {out}q2: PDComplex{ dimension (ldq2n)}; const {in}ldq2: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}indxp: PInteger{ dimension (n)}; const {out}indx: PInteger{ dimension (n)}; const {in}indxq: PInteger{ dimension (n)}; const {out}perm: PInteger{ dimension (n)}; const {out}givptr: PInteger{}; const {out}givcol: PInteger{ dimension (2 n)}; const {out}givnum: PDouble{ dimension (2 n)}; const {out}info: PInteger{}); stdcall;



//file name zlaein
procedure zlaein_(const {in}rightv: PBoolean{}; const {in}noinit: PBoolean{}; const {in}n: PInteger{}; const {in}h: PDComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}w: PDComplex{}; const {inout}v: PDComplex{ dimension (n)}; const {out}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}rwork: PDouble{ dimension (n)}; const {in}eps3: PDouble{}; const {in}smlnum: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name zlaesy
procedure zlaesy_(const {in}a: PDComplex{}; const {in}b: PDComplex{}; const {in}c: PDComplex{}; const {out}rt1: PDComplex{}; const {out}rt2: PDComplex{}; const {out}evscal: PDComplex{}; const {out}cs1: PDComplex{}; const {out}sn1: PDComplex{}); stdcall;



//file name zlaev2
procedure zlaev2_(const {in}a: PDComplex{}; const {in}b: PDComplex{}; const {in}c: PDComplex{}; const {out}rt1: PDouble{}; const {out}rt2: PDouble{}; const {out}cs1: PDouble{}; const {out}sn1: PDComplex{}); stdcall;



//file name zlag2c
procedure zlag2c_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}sa: PSComplex{ dimension (ldsan)}; const {in}ldsa: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zlags2
procedure zlags2_(const {in}upper: PBoolean{}; const {in}a1: PDouble{}; const {in}a2: PDComplex{}; const {in}a3: PDouble{}; const {in}b1: PDouble{}; const {in}b2: PDComplex{}; const {in}b3: PDouble{}; const {out}csu: PDouble{}; const {out}snu: PDComplex{}; const {out}csv: PDouble{}; const {out}snv: PDComplex{}; const {out}csq: PDouble{}; const {out}snq: PDComplex{}); stdcall;



//file name zlagtm
procedure zlagtm_(const {in}trans: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}alpha: PDouble{}; const {in}dl: PDComplex{ dimension (n-1)}; const {in}d: PDComplex{ dimension (n)}; const {in}du: PDComplex{ dimension (n-1)}; const {in}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {in}beta: PDouble{}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}); stdcall;



//file name zlahef
procedure zlahef_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}w: PDComplex{ dimension (ldwnb)}; const {in}ldw: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zlahef_aa
procedure zlahef_aa_(const {in}uplo: PChar{*1}; const {in}j1: PInteger{}; const {in}m: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDComplex{ dimension (ldam) for}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}h: PDComplex{ workspace dimension (ldhnb)}; const {in}ldh: PInteger{}; const {out}work: PDComplex{ workspace dimension (m)}); stdcall;



//file name zlahef_rk
procedure zlahef_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PDComplex{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}w: PDComplex{ dimension (ldwnb)}; const {in}ldw: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zlahef_rook
procedure zlahef_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}w: PDComplex{ dimension (ldwnb)}; const {in}ldw: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zlahqr
procedure zlahqr_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PDComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {out}w: PDComplex{ dimension (n)}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PDComplex{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zlahr2
procedure zlahr2_(const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDComplex{ dimension (ldan-k+1)}; const {in}lda: PInteger{}; const {out}tau: PDComplex{ dimension (nb)}; const {out}t: PDComplex{ dimension (ldtnb)}; const {in}ldt: PInteger{}; const {out}y: PDComplex{ dimension (ldynb)}; const {in}ldy: PInteger{}); stdcall;



//file name zlaic1
procedure zlaic1_(const {in}job: PInteger{}; const {in}j: PInteger{}; const {in}x: PDComplex{ dimension (j)}; const {in}sest: PDouble{}; const {in}w: PDComplex{ dimension (j)}; const {in}gamma: PDComplex{}; const {out}sestpr: PDouble{}; const {out}s: PDComplex{}; const {out}c: PDComplex{}); stdcall;



//file name zlals0
procedure zlals0_(const {in}icompq: PInteger{}; const {in}nl: PInteger{}; const {in}nr: PInteger{}; const {in}sqre: PInteger{}; const {in}nrhs: PInteger{}; const {inout}b: PDComplex{ dimension ( ldb nrhs )}; const {in}ldb: PInteger{}; const {out}bx: PDComplex{ dimension ( ldbx nrhs )}; const {in}ldbx: PInteger{}; const {in}perm: PInteger{ dimension ( n )}; const {in}givptr: PInteger{}; const {in}givcol: PInteger{ dimension ( ldgcol 2 )}; const {in}ldgcol: PInteger{}; const {in}givnum: PDouble{ dimension ( ldgnum 2 )}; const {in}ldgnum: PInteger{}; const {in}poles: PDouble{ dimension ( ldgnum 2 )}; const {in}difl: PDouble{ dimension ( k )}; const {in}difr: PDouble{ dimension ( ldgnum 2 )}; const {in}z: PDouble{ dimension ( k )}; const {in}k: PInteger{}; const {in}c: PDouble{}; const {in}s: PDouble{}; const {out}rwork: PDouble{ dimension}; const {out}info: PInteger{}); stdcall;



//file name zlalsa
procedure zlalsa_(const {in}icompq: PInteger{}; const {in}smlsiz: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}b: PDComplex{ dimension ( ldb nrhs )}; const {in}ldb: PInteger{}; const {out}bx: PDComplex{ dimension ( ldbx nrhs )}; const {in}ldbx: PInteger{}; const {in}u: PDouble{ dimension ( ldu smlsiz )}; const {in}ldu: PInteger{ ldu =n}; const {in}vt: PDouble{ dimension ( ldu smlsiz+1 )}; const {in}k: PInteger{ dimension ( n )}; const {in}difl: PDouble{ dimension ( ldu nlvl )}; const {in}difr: PDouble{ dimension ( ldu 2 * nlvl )}; const {in}z: PDouble{ dimension ( ldu nlvl )}; const {in}poles: PDouble{ dimension ( ldu 2 * nlvl )}; const {in}givptr: PInteger{ dimension ( n )}; const {in}givcol: PInteger{ dimension ( ldgcol 2 * nlvl )}; const {in}ldgcol: PInteger{ ldgcol =n}; const {in}perm: PInteger{ dimension ( ldgcol nlvl )}; const {in}givnum: PDouble{ dimension ( ldu 2 * nlvl )}; const {in}c: PDouble{ dimension ( n )}; const {in}s: PDouble{ dimension ( n )}; const {out}rwork: PDouble{ dimension at least}; const {out}iwork: PInteger{ dimension (3*n)}; const {out}info: PInteger{}); stdcall;



//file name zlalsd
procedure zlalsd_(const {in}uplo: PChar{*1}; const {in}smlsiz: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n-1)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {in}rcond: PDouble{}; const {out}rank: PInteger{}; const {out}work: PDComplex{ dimension (n * nrhs)}; const {out}rwork: PDouble{ dimension at least}; const {out}iwork: PInteger{ dimension at least}; const {out}info: PInteger{}); stdcall;



//file name zlamswlq
procedure zlamswlq_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {in}a: PDComplex{ dimension}; const {in}lda: PInteger{}; const {in}t: PDComplex{ dimension}; const {in}ldt: PInteger{}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zlamtsqr
procedure zlamtsqr_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {in}a: PDComplex{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}t: PDComplex{ dimension}; const {in}ldt: PInteger{}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zlangb
function zlangb_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name zlange
function zlange_(const {in}norm: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name zlangt
function zlangt_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}dl: PDComplex{ dimension (n-1)}; const {in}d: PDComplex{ dimension (n)}; const {in}du: PDComplex{ dimension (n-1)}):Double{}; stdcall;



//file name zlanhb
function zlanhb_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name zlanhe
function zlanhe_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name zlanhf
function zlanhf_(const {in}norm: PChar{}; const {in}transr: PChar{}; const {in}uplo: PChar{}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension ( n*(n+1)/2 );}; const {out}work: PDouble{ dimension (lwork)}):Double{}; stdcall;



//file name zlanhp
function zlanhp_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name zlanhs
function zlanhs_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name zlanht
function zlanht_(const {in}norm: PChar{*1}; const {in}n: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}e: PDComplex{ dimension (n-1)}):Double{}; stdcall;



//file name zlansb
function zlansb_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name zlansp
function zlansp_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name zlansy
function zlansy_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name zlantb
function zlantb_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name zlantp
function zlantp_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name zlantr
function zlantr_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}work: PDouble{ dimension (max(1lwork))}):Double{}; stdcall;



//file name zlapll
procedure zlapll_(const {in}n: PInteger{}; const {inout}x: PDComplex{ dimension (1+(n-1)*incx)}; const {in}incx: PInteger{}; const {inout}y: PDComplex{ dimension (1+(n-1)*incy)}; const {in}incy: PInteger{}; const {out}ssmin: PDouble{}); stdcall;



//file name zlapmr
procedure zlapmr_(const {in}forwrd: PBoolean{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}x: PDComplex{ dimension (ldxn)}; const {in}ldx: PInteger{}; const {inout}k: PInteger{ dimension (m)}); stdcall;



//file name zlapmt
procedure zlapmt_(const {in}forwrd: PBoolean{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}x: PDComplex{ dimension (ldxn)}; const {in}ldx: PInteger{}; const {inout}k: PInteger{ dimension (n)}); stdcall;



//file name zlaqgb
procedure zlaqgb_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {inout}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}r: PDouble{ dimension (m)}; const {in}c: PDouble{ dimension (n)}; const {in}rowcnd: PDouble{}; const {in}colcnd: PDouble{}; const {in}amax: PDouble{}; const {out}equed: PChar{*1}); stdcall;



//file name zlaqge
procedure zlaqge_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}r: PDouble{ dimension (m)}; const {in}c: PDouble{ dimension (n)}; const {in}rowcnd: PDouble{}; const {in}colcnd: PDouble{}; const {in}amax: PDouble{}; const {out}equed: PChar{*1}); stdcall;



//file name zlaqhb
procedure zlaqhb_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}s: PDouble{ dimension (n)}; const {in}scond: PDouble{}; const {in}amax: PDouble{}; const {out}equed: PChar{*1}); stdcall;



//file name zlaqhe
procedure zlaqhe_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}s: PDouble{ dimension (n)}; const {in}scond: PDouble{}; const {in}amax: PDouble{}; const {out}equed: PChar{*1}); stdcall;



//file name zlaqhp
procedure zlaqhp_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {in}s: PDouble{ dimension (n)}; const {in}scond: PDouble{}; const {in}amax: PDouble{}; const {out}equed: PChar{*1}); stdcall;



//file name zlaqp2
procedure zlaqp2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}offset: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}jpvt: PInteger{ dimension (n)}; const {out}tau: PDComplex{ dimension (min(mn))}; const {inout}vn1: PDouble{ dimension (n)}; const {inout}vn2: PDouble{ dimension (n)}; const {out}work: PDComplex{ dimension (n)}); stdcall;



//file name zlaqps
procedure zlaqps_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}offset: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}jpvt: PInteger{ dimension (n)}; const {out}tau: PDComplex{ dimension (kb)}; const {inout}vn1: PDouble{ dimension (n)}; const {inout}vn2: PDouble{ dimension (n)}; const {inout}auxv: PDComplex{ dimension (nb)}; const {inout}f: PDComplex{ dimension (ldfnb)}; const {in}ldf: PInteger{}); stdcall;



//file name zlaqr0
procedure zlaqr0_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PDComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {out}w: PDComplex{ dimension (n)}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PDComplex{ dimension (ldzihi)}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zlaqr1
procedure zlaqr1_(const {in}n: PInteger{}; const {in}h: PDComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}s1: PDComplex{}; const {in}s2: PDComplex{}; const {out}v: PDComplex{ dimension (n)}); stdcall;



//file name zlaqr2
procedure zlaqr2_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ktop: PInteger{}; const {in}kbot: PInteger{}; const {in}nw: PInteger{}; const {inout}h: PDComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PDComplex{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}ns: PInteger{}; const {out}nd: PInteger{}; const {out}sh: PDComplex{ dimension (kbot)}; const {out}v: PDComplex{ dimension (ldvnw)}; const {in}ldv: PInteger{}; const {in}nh: PInteger{}; const {out}t: PDComplex{ dimension (ldtnw)}; const {in}ldt: PInteger{}; const {in}nv: PInteger{}; const {out}wv: PDComplex{ dimension (ldwvnw)}; const {in}ldwv: PInteger{}; const {out}work: PDComplex{ dimension (lwork)}; const {in}lwork: PInteger{}); stdcall;



//file name zlaqr3
procedure zlaqr3_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ktop: PInteger{}; const {in}kbot: PInteger{}; const {in}nw: PInteger{}; const {inout}h: PDComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PDComplex{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}ns: PInteger{}; const {out}nd: PInteger{}; const {out}sh: PDComplex{ dimension (kbot)}; const {out}v: PDComplex{ dimension (ldvnw)}; const {in}ldv: PInteger{}; const {in}nh: PInteger{}; const {out}t: PDComplex{ dimension (ldtnw)}; const {in}ldt: PInteger{}; const {in}nv: PInteger{}; const {out}wv: PDComplex{ dimension (ldwvnw)}; const {in}ldwv: PInteger{}; const {out}work: PDComplex{ dimension (lwork)}; const {in}lwork: PInteger{}); stdcall;



//file name zlaqr4
procedure zlaqr4_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}h: PDComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {out}w: PDComplex{ dimension (n)}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PDComplex{ dimension (ldzihi)}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zlaqr5
procedure zlaqr5_(const {in}wantt: PBoolean{}; const {in}wantz: PBoolean{}; const {in}kacc22: PInteger{ with value 0 1 or 2}; const {in}n: PInteger{}; const {in}ktop: PInteger{}; const {in}kbot: PInteger{}; const {in}nshfts: PInteger{}; const {inout}s: PDComplex{ dimension (nshfts)}; const {inout}h: PDComplex{ dimension (ldhn)}; const {in}ldh: PInteger{}; const {in}iloz: PInteger{}; const {in}ihiz: PInteger{}; const {inout}z: PDComplex{ dimension (ldzihiz)}; const {in}ldz: PInteger{}; const {out}v: PDComplex{ dimension (ldvnshfts/2)}; const {in}ldv: PInteger{}; const {out}u: PDComplex{ dimension (ldu2*nshfts)}; const {in}ldu: PInteger{}; const {in}nv: PInteger{}; const {out}wv: PDComplex{ dimension (ldwv2*nshfts)}; const {in}ldwv: PInteger{}; const {in}nh: PInteger{}; const {out}wh: PDComplex{ dimension (ldwhnh)}; const {in}ldwh: PInteger{}); stdcall;



//file name zlaqsb
procedure zlaqsb_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}s: PDouble{ dimension (n)}; const {in}scond: PDouble{}; const {in}amax: PDouble{}; const {out}equed: PChar{*1}); stdcall;



//file name zlaqsp
procedure zlaqsp_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {in}s: PDouble{ dimension (n)}; const {in}scond: PDouble{}; const {in}amax: PDouble{}; const {out}equed: PChar{*1}); stdcall;



//file name zlaqsy
procedure zlaqsy_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}s: PDouble{ dimension (n)}; const {in}scond: PDouble{}; const {in}amax: PDouble{}; const {out}equed: PChar{*1}); stdcall;



//file name zlar1v
procedure zlar1v_(const {in}n: PInteger{}; const {in}b1: PInteger{}; const {in}bn: PInteger{}; const {in}lambda: PDouble{}; const {in}l: PDouble{ dimension (n-1)}; const {in}d: PDouble{ dimension (n)}; const {in}ld: PDouble{ dimension (n-1)}; const {in}lld: PDouble{ dimension (n-1)}; const {in}pivmin: PDouble{}; const {in}gaptol: PDouble{}; const {inout}z: PDComplex{ dimension (n)}; const {in}wantnc: PBoolean{}; const {out}negcnt: PInteger{}; const {out}ztz: PDouble{}; const {out}mingma: PDouble{}; const {inout}r: PInteger{}; const {out}isuppz: PInteger{ dimension (2)}; const {out}nrminv: PDouble{}; const {out}resid: PDouble{}; const {out}rqcorr: PDouble{}; const {out}work: PDouble{ dimension (4*n)}); stdcall;



//file name zlar2v
procedure zlar2v_(const {in}n: PInteger{}; const {inout}x: PDComplex{ dimension (1+(n-1)*incx)}; const {inout}y: PDComplex{ dimension (1+(n-1)*incx)}; const {inout}z: PDComplex{ dimension (1+(n-1)*incx)}; const {in}incx: PInteger{}; const {in}c: PDouble{ dimension (1+(n-1)*incc)}; const {in}s: PDComplex{ dimension (1+(n-1)*incc)}; const {in}incc: PInteger{}); stdcall;



//file name zlarcm
procedure zlarcm_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDouble{ dimension (lda m)}; const {in}lda: PInteger{}; const {in}b: PDComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {out}c: PDComplex{ dimension (ldc n)}; const {in}ldc: PInteger{}; const {out}rwork: PDouble{ dimension (2*m*n)}); stdcall;



//file name zlarf
procedure zlarf_(const {in}side: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}v: PDComplex{ dimension}; const {in}incv: PInteger{}; const {in}tau: PDComplex{}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension}); stdcall;



//file name zlarfb
procedure zlarfb_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}v: PDComplex{ dimension}; const {in}ldv: PInteger{}; const {in}t: PDComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension (ldworkk)}; const {in}ldwork: PInteger{}); stdcall;



//file name zlarfb_gett
procedure zlarfb_gett_(const {in}ident: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}t: PDComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{}; const {in}ldwork: PInteger{}); stdcall;



//file name zlarfg
procedure zlarfg_(const {in}n: PInteger{}; const {inout}alpha: PDComplex{}; const {inout}x: PDComplex{ dimension}; const {in}incx: PInteger{}; const {out}tau: PDComplex{}); stdcall;



//file name zlarfgp
procedure zlarfgp_(const {in}n: PInteger{}; const {inout}alpha: PDComplex{}; const {inout}x: PDComplex{ dimension}; const {in}incx: PInteger{}; const {out}tau: PDComplex{}); stdcall;



//file name zlarft
procedure zlarft_(const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}v: PDComplex{ dimension}; const {in}ldv: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {out}t: PDComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}); stdcall;



//file name zlarfx
procedure zlarfx_(const {in}side: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}v: PDComplex{ dimension (m) if side = 'l'}; const {in}tau: PDComplex{}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension (n) if side = 'l'}); stdcall;



//file name zlarfy
procedure zlarfy_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}v: PDComplex{ dimension}; const {in}incv: PInteger{}; const {in}tau: PDComplex{}; const {inout}c: PDComplex{ dimension (ldc n)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension (n)}); stdcall;



//file name zlargv
procedure zlargv_(const {in}n: PInteger{}; const {inout}x: PDComplex{ dimension (1+(n-1)*incx)}; const {in}incx: PInteger{}; const {inout}y: PDComplex{ dimension (1+(n-1)*incy)}; const {in}incy: PInteger{}; const {out}c: PDouble{ dimension (1+(n-1)*incc)}; const {in}incc: PInteger{}); stdcall;



//file name zlarnv
procedure zlarnv_(const {in}idist: PInteger{}; const {inout}iseed: PInteger{ dimension (4)}; const {in}n: PInteger{}; const {out}x: PDComplex{ dimension (n)}); stdcall;



//file name zlarrv
procedure zlarrv_(const {in}n: PInteger{}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {inout}d: PDouble{ dimension (n)}; const {inout}l: PDouble{ dimension (n)}; const {in}pivmin: PDouble{}; const {in}isplit: PInteger{ dimension (n)}; const {in}m: PInteger{}; const {in}dol: PInteger{}; const {in}dou: PInteger{}; const {in}minrgp: PDouble{}; const {in}rtol1: PDouble{}; const {in}rtol2: PDouble{}; const {inout}w: PDouble{ dimension (n)}; const {inout}werr: PDouble{ dimension (n)}; const {inout}wgap: PDouble{ dimension (n)}; const {in}iblock: PInteger{ dimension (n)}; const {in}indexw: PInteger{ dimension (n)}; const {in}gers: PDouble{ dimension (2*n)}; const {out}z: PDComplex{ dimension (ldz max(1m) )}; const {in}ldz: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {out}work: PDouble{ dimension (12*n)}; const {out}iwork: PInteger{ dimension (7*n)}; const {out}info: PInteger{}); stdcall;



//file name zlarscl2
procedure zlarscl2_ (const {in}m: PInteger{};
 const {in}n: PInteger{}; const {in}d: PDouble{ length m}; const {inout}x: PDComplex{ dimension (ldxn)}; const {in}ldx: PInteger{});  stdcall;



//file name zlartg
procedure zlartg_(const {in}f: PDComplex{}; const {in}g: PDComplex{}; const {out}cs: PDouble{}; const {out}sn: PDComplex{}; const {out}r: PDComplex{}); stdcall;



//file name zlartv
procedure zlartv_(const {in}n: PInteger{}; const {inout}x: PDComplex{ dimension (1+(n-1)*incx)}; const {in}incx: PInteger{}; const {inout}y: PDComplex{ dimension (1+(n-1)*incy)}; const {in}incy: PInteger{}; const {in}c: PDouble{ dimension (1+(n-1)*incc)}; const {in}s: PDComplex{ dimension (1+(n-1)*incc)}; const {in}incc: PInteger{}); stdcall;



//file name zlarz
procedure zlarz_(const {in}side: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {in}v: PDComplex{ dimension (1+(l-1)*abs(incv))}; const {in}incv: PInteger{}; const {in}tau: PDComplex{}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension}); stdcall;



//file name zlarzb
procedure zlarzb_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}v: PDComplex{ dimension (ldvnv)}; const {in}ldv: PInteger{}; const {in}t: PDComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension (ldworkk)}; const {in}ldwork: PInteger{}); stdcall;



//file name zlarzt
procedure zlarzt_(const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}v: PDComplex{ dimension}; const {in}ldv: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {out}t: PDComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}); stdcall;



//file name zlascl
procedure zlascl_(const {in}_type: PChar{*1}; const {in}kl: PInteger{}; const {in}ku: PInteger{}; const {in}cfrom: PDouble{}; const {in}cto: PDouble{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{});  stdcall;


//file name zlascl2
procedure zlascl2_ (const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}d: PDouble{ length m}; const {inout}x: PDComplex{ dimension (ldxn)}; const {in}ldx: PInteger{});  stdcall;



//file name zlaset
procedure zlaset_(const {in}uplo: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}alpha: PDComplex{}; const {in}beta: PDComplex{}; const {out}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}); stdcall;



//file name zlasr
procedure zlasr_(const {in}side: PChar{*1}; const {in}pivot: PChar{*1}; const {in}direct: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}c: PDouble{ dimension}; const {in}s: PDouble{ dimension}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}); stdcall;



//file name zlassq
procedure zlassq_(const {in}n: PInteger{}; const {in}x: PDComplex{ dimension (1+(n-1)*incx)}; const {in}incx: PInteger{}; const {inout}scale: PDouble{}; const {inout}sumsq: PDouble{}); stdcall;



//file name zlaswlq
procedure zlaswlq_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDComplex{}; const {in}ldt: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zlaswp
procedure zlaswp_(const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}k1: PInteger{}; const {in}k2: PInteger{}; const {in}ipiv: PInteger{ dimension (k1+(k2-k1)*abs(incx))}; const {in}incx: PInteger{}); stdcall;



//file name zlasyf
procedure zlasyf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}w: PDComplex{ dimension (ldwnb)}; const {in}ldw: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zlasyf_aa
procedure zlasyf_aa_(const {in}uplo: PChar{*1}; const {in}j1: PInteger{}; const {in}m: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDComplex{ dimension (ldam) for}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (m)}; const {inout}h: PDComplex{ workspace dimension (ldhnb)}; const {in}ldh: PInteger{}; const {out}work: PDComplex{ workspace dimension (m)}); stdcall;



//file name zlasyf_rk
procedure zlasyf_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PDComplex{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}w: PDComplex{ dimension (ldwnb)}; const {in}ldw: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zlasyf_rook
procedure zlasyf_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {out}kb: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}w: PDComplex{ dimension (ldwnb)}; const {in}ldw: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zlat2c
procedure zlat2c_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}sa: PSComplex{ dimension (ldsan)}; const {in}ldsa: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zlatbs
procedure zlatbs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}normin: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}x: PDComplex{ dimension (n)}; const {out}scale: PDouble{}; const {inout}cnorm: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zlatdf
procedure zlatdf_(const {in}ijob: PInteger{}; const {in}n: PInteger{}; const {in}z: PDComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {inout}rhs: PDComplex{ dimension (n)}; const {inout}rdsum: PDouble{}; const {inout}rdscal: PDouble{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}jpiv: PInteger{ dimension (n)}); stdcall;



//file name zlatps
procedure zlatps_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}normin: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {inout}x: PDComplex{ dimension (n)}; const {out}scale: PDouble{}; const {inout}cnorm: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zlatrd
procedure zlatrd_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PDouble{ dimension (n-1)}; const {out}tau: PDComplex{ dimension (n-1)}; const {out}w: PDComplex{ dimension (ldwnb)}; const {in}ldw: PInteger{}); stdcall;



//file name zlatrs
procedure zlatrs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}normin: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}x: PDComplex{ dimension (n)}; const {out}scale: PDouble{}; const {inout}cnorm: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zlatrz
procedure zlatrz_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDComplex{ dimension (m)}; const {out}work: PDComplex{ dimension (m)}); stdcall;



//file name zlatsqr
procedure zlatsqr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDComplex{}; const {in}ldt: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zlaunhr_col_getrfnp
procedure zlaunhr_col_getrfnp_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PDComplex{ dimension min(mn)}; const {out}info: PInteger{}); stdcall;



//file name zlaunhr_col_getrfnp2
procedure zlaunhr_col_getrfnp2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}d: PDComplex{ dimension min(mn)}; const {out}info: PInteger{}); stdcall;



//file name zlauu2
procedure zlauu2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zlauum
procedure zlauum_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zpbcon
procedure zpbcon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zpbequ
procedure zpbequ_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}s: PDouble{ dimension (n)}; const {out}scond: PDouble{}; const {out}amax: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name zpbrfs
procedure zpbrfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}afb: PDComplex{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zpbstf
procedure zpbstf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zpbsv
procedure zpbsv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zpbsvx
procedure zpbsvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}afb: PDComplex{ dimension (ldafbn)}; const {in}ldafb: PInteger{}; const {inout}equed: PChar{*1}; const {inout}s: PDouble{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zpbtf2
procedure zpbtf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zpbtrf
procedure zpbtrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {inout}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zpbtrs
procedure zpbtrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zpftrf
procedure zpftrf_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension ( n*(n+1)/2 );}; const {out}info: PInteger{}); stdcall;



//file name zpftri
procedure zpftri_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension ( n*(n+1)/2 );}; const {out}info: PInteger{}); stdcall;



//file name zpftrs
procedure zpftrs_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension ( n*(n+1)/2 );}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zpocon
procedure zpocon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zpoequ
procedure zpoequ_(const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PDouble{ dimension (n)}; const {out}scond: PDouble{}; const {out}amax: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name zpoequb
procedure zpoequb_(const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PDouble{ dimension (n)}; const {out}scond: PDouble{}; const {out}amax: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name zporfs
procedure zporfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zporfsx
procedure zporfsx_(const {in}uplo: PChar{*1}; const {in}equed: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}s: PDouble{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}berr: PDouble{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PDouble{ dimension nparams}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zposv
procedure zposv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zposvx
procedure zposvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}equed: PChar{*1}; const {inout}s: PDouble{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zposvxx
procedure zposvxx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}equed: PChar{*1}; const {inout}s: PDouble{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}rpvgrw: PDouble{}; const {out}berr: PDouble{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PDouble{ dimension nparams}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zpotf2
procedure zpotf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zpotrf
procedure zpotrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zpotrf2
procedure zpotrf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zpotri
procedure zpotri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zpotrs
procedure zpotrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zppcon
procedure zppcon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zppequ
procedure zppequ_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {out}s: PDouble{ dimension (n)}; const {out}scond: PDouble{}; const {out}amax: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name zpprfs
procedure zpprfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {in}afp: PDComplex{ dimension (n*(n+1)/2)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zppsv
procedure zppsv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zppsvx
procedure zppsvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {inout}afp: PDComplex{ dimension (n*(n+1)/2)}; const {inout}equed: PChar{*1}; const {inout}s: PDouble{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zpptrf
procedure zpptrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {out}info: PInteger{}); stdcall;



//file name zpptri
procedure zpptri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {out}info: PInteger{}); stdcall;



//file name zpptrs
procedure zpptrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zpstf2
procedure zpstf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {out}piv: PInteger{ dimension (n)}; const {out}rank: PInteger{}; const {in}tol: PDouble{}; const {in}lda: PInteger{}; const {out}work: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zpstrf
procedure zpstrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}piv: PInteger{ dimension (n)}; const {out}rank: PInteger{}; const {in}tol: PDouble{}; const {out}work: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zptcon
procedure zptcon_(const {in}n: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}e: PDComplex{ dimension (n-1)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zpteqr
procedure zpteqr_(const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n-1)}; const {inout}z: PDComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (4*n)}; const {out}info: PInteger{}); stdcall;



//file name zptrfs
procedure zptrfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}e: PDComplex{ dimension (n-1)}; const {in}df: PDouble{ dimension (n)}; const {in}ef: PDComplex{ dimension (n-1)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zptsv
procedure zptsv_(const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDComplex{ dimension (n-1)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zptsvx
procedure zptsvx_(const {in}fact: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}e: PDComplex{ dimension (n-1)}; const {inout}df: PDouble{ dimension (n)}; const {inout}ef: PDComplex{ dimension (n-1)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zpttrf
procedure zpttrf_(const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDComplex{ dimension (n-1)}; const {out}info: PInteger{}); stdcall;



//file name zpttrs
procedure zpttrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}e: PDComplex{ dimension (n-1)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zptts2
procedure zptts2_(const {in}iuplo: PInteger{}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}e: PDComplex{ dimension (n-1)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}); stdcall;



//file name zrot
procedure zrot_(const {in}n: PInteger{}; const {inout}cx: PDComplex{ dimension (n)}; const {in}incx: PInteger{}; const {inout}cy: PDComplex{ dimension (n)}; const {in}incy: PInteger{}; const {in}c: PDouble{}; const {in}s: PDComplex{}); stdcall;



//file name zspcon
procedure zspcon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zspmv
procedure zspmv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}alpha: PDComplex{}; const {in}ap: PDComplex{ dimension at least}; const {in}x: PDComplex{ dimension at least}; const {in}incx: PInteger{}; const {in}beta: PDComplex{}; const {inout}y: PDComplex{ dimension at least}; const {in}incy: PInteger{}); stdcall;



//file name zspr
procedure zspr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}alpha: PDComplex{}; const {in}x: PDComplex{ dimension at least}; const {in}incx: PInteger{}; const {inout}ap: PDComplex{ dimension at least}); stdcall;



//file name zsprfs
procedure zsprfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {in}afp: PDComplex{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zspsv
procedure zspsv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zspsvx
procedure zspsvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {inout}afp: PDComplex{ dimension (n*(n+1)/2)}; const {inout}ipiv: PInteger{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zsptrf
procedure zsptrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zsptri
procedure zsptri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zsptrs
procedure zsptrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zstedc
procedure zstedc_(const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n-1)}; const {inout}z: PDComplex{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (max(1lrwork))}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zstegr
procedure zstegr_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n)}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {in}abstol: PDouble{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz max(1m) )}; const {in}ldz: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (liwork)}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zstein
procedure zstein_(const {in}n: PInteger{}; const {in}d: PDouble{ dimension (n)}; const {in}e: PDouble{ dimension (n-1)}; const {in}m: PInteger{}; const {in}w: PDouble{ dimension (n)}; const {in}iblock: PInteger{ dimension (n)}; const {in}isplit: PInteger{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz m)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (5*n)}; const {out}iwork: PInteger{ dimension (n)}; const {out}ifail: PInteger{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name zstemr
procedure zstemr_(const {in}jobz: PChar{*1}; const {in}range: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n)}; const {in}vl: PDouble{}; const {in}vu: PDouble{}; const {in}il: PInteger{}; const {in}iu: PInteger{}; const {out}m: PInteger{}; const {out}w: PDouble{ dimension (n)}; const {out}z: PDComplex{ dimension (ldz max(1m) )}; const {in}ldz: PInteger{}; const {in}nzc: PInteger{}; const {out}isuppz: PInteger{ dimension ( 2*max(1m) )}; const {inout}tryrac: PBoolean{}; const {out}work: PDouble{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (liwork)}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zsteqr
procedure zsteqr_(const {in}compz: PChar{*1}; const {in}n: PInteger{}; const {inout}d: PDouble{ dimension (n)}; const {inout}e: PDouble{ dimension (n-1)}; const {inout}z: PDComplex{ dimension (ldz n)}; const {in}ldz: PInteger{}; const {out}work: PDouble{ dimension (max(12*n-2))}; const {out}info: PInteger{}); stdcall;



//file name zsycon
procedure zsycon_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zsycon_3
procedure zsycon_3_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PDComplex{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zsycon_rook
procedure zsycon_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}anorm: PDouble{}; const {out}rcond: PDouble{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zsyconv
procedure zsyconv_(const {in}uplo: PChar{*1}; const {in}way: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}e: PDComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zsyconvf
procedure zsyconvf_(const {in}uplo: PChar{*1}; const {in}way: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}e: PDComplex{ dimension (n)}; const {inout}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zsyconvf_rook
procedure zsyconvf_rook_(const {in}uplo: PChar{*1}; const {in}way: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}e: PDComplex{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zsyequb
procedure zsyequb_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}s: PDouble{ dimension (n)}; const {out}scond: PDouble{}; const {out}amax: PDouble{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zsymv
procedure zsymv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}alpha: PDComplex{}; const {in}a: PDComplex{ dimension ( lda n )}; const {in}lda: PInteger{}; const {in}x: PDComplex{ dimension at least}; const {in}incx: PInteger{}; const {in}beta: PDComplex{}; const {inout}y: PDComplex{ dimension at least}; const {in}incy: PInteger{}); stdcall;



//file name zsyr
procedure zsyr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}alpha: PDComplex{}; const {in}x: PDComplex{ dimension at least}; const {in}incx: PInteger{}; const {inout}a: PDComplex{ dimension ( lda n )}; const {in}lda: PInteger{}); stdcall;



//file name zsyrfs
procedure zsyrfs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zsyrfsx
procedure zsyrfsx_(const {in}uplo: PChar{*1}; const {in}equed: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}s: PDouble{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {inout}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}berr: PDouble{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PDouble{ dimension nparams}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zsysv
procedure zsysv_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zsysv_aa
procedure zsysv_aa_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zsysv_aa_2stage
procedure zsysv_aa_2stage_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tb: PDComplex{ dimension (ltb)}; const {in}ltb: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}ipiv2: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{ workspace of size lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zsysv_rk
procedure zsysv_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PDComplex{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{ dimension ( max(1lwork) )}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zsysv_rook
procedure zsysv_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zsysvx
procedure zsysvx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zsysvxx
procedure zsysvxx_(const {in}fact: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}af: PDComplex{ dimension (ldafn)}; const {in}ldaf: PInteger{}; const {inout}ipiv: PInteger{ dimension (n)}; const {inout}equed: PChar{*1}; const {inout}s: PDouble{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}rcond: PDouble{}; const {out}rpvgrw: PDouble{}; const {out}berr: PDouble{ dimension (nrhs)}; const {in}n_err_bnds: PInteger{}; const {out}err_bnds_norm: PDouble{ dimension (nrhs n_err_bnds)}; const {out}err_bnds_comp: PDouble{ dimension (nrhs n_err_bnds)}; const {in}nparams: PInteger{}; const {inout}params: PDouble{ dimension nparams}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zsyswapr
procedure zsyswapr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}i1: PInteger{}; const {in}i2: PInteger{}); stdcall;



//file name zsytf2
procedure zsytf2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zsytf2_rk
procedure zsytf2_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PDComplex{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zsytf2_rook
procedure zsytf2_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zsytrf
procedure zsytrf_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zsytrf_aa
procedure zsytrf_aa_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zsytrf_aa_2stage
procedure zsytrf_aa_2stage_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tb: PDComplex{ dimension (ltb)}; const {in}ltb: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}ipiv2: PInteger{ dimension (n)}; const {out}work: PDComplex{ workspace of size lwork}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;


//file name zsytrf_rk
procedure zsytrf_rk_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}e: PDComplex{ dimension (n)}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension ( max(1lwork) )}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zsytrf_rook
procedure zsytrf_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zsytri
procedure zsytri_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name zsytri_3
procedure zsytri_3_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PDComplex{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (n+nb+1)*(nb+3)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zsytri_3x
procedure zsytri_3x_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PDComplex{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (n+nb+1nb+3)}; const {in}nb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zsytri_rook
procedure zsytri_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zsytri2
procedure zsytri2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (n+nb+1)*(nb+3)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zsytri2x
procedure zsytri2x_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {out}work: PDComplex{ dimension (n+nb+1nb+3)}; const {in}nb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zsytrs
procedure zsytrs_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zsytrs_3
procedure zsytrs_3_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}e: PDComplex{ dimension (n)}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zsytrs_aa
procedure zsytrs_aa_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zsytrs_aa_2stage
procedure zsytrs_aa_2stage_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tb: PDComplex{ dimension (ltb)}; const {in}ltb: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {in}ipiv2: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zsytrs_rook
procedure zsytrs_rook_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zsytrs2
procedure zsytrs2_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}ipiv: PInteger{ dimension (n)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ztbcon
procedure ztbcon_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {out}rcond: PDouble{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ztbrfs
procedure ztbrfs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {in}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ztbtrs
procedure ztbtrs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}kd: PInteger{}; const {in}nrhs: PInteger{}; const {in}ab: PDComplex{ dimension (ldabn)}; const {in}ldab: PInteger{}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ztfsm
procedure ztfsm_(const {in}transr: PChar{*1}; const {in}side: PChar{*1}; const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}alpha: PDComplex{}; const {in}a: PDComplex{ dimension (n*(n+1)/2)}; const {inout}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}); stdcall;



//file name ztftri
procedure ztftri_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension ( n*(n+1)/2 );}; const {out}info: PInteger{}); stdcall;



//file name ztfttp
procedure ztfttp_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}arf: PDComplex{ dimension ( n*(n+1)/2 )}; const {out}ap: PDComplex{ dimension ( n*(n+1)/2 )}; const {out}info: PInteger{}); stdcall;



//file name ztfttr
procedure ztfttr_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}arf: PDComplex{ dimension ( n*(n+1)/2 )}; const {out}a: PDComplex{ dimension ( lda n )}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ztgevc
procedure ztgevc_(const {in}side: PChar{*1}; const {in}howmny: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}s: PDComplex{ dimension (ldsn)}; const {in}lds: PInteger{}; const {in}p: PDComplex{ dimension (ldpn)}; const {in}ldp: PInteger{}; const {inout}vl: PDComplex{ dimension (ldvlmm)}; const {in}ldvl: PInteger{}; const {inout}vr: PDComplex{ dimension (ldvrmm)}; const {in}ldvr: PInteger{}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (2*n)}; const {out}info: PInteger{}); stdcall;



//file name ztgex2
procedure ztgex2_(const {in}wantq: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimensions (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimensions (ldbn)}; const {in}ldb: PInteger{}; const {inout}q: PDComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {inout}z: PDComplex{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {in}j1: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ztgexc
procedure ztgexc_(const {in}wantq: PBoolean{}; const {in}wantz: PBoolean{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {inout}q: PDComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {inout}z: PDComplex{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {in}ifst: PInteger{}; const {inout}ilst: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ztgsen
procedure ztgsen_(const {in}ijob: PInteger{}; const {in}wantq: PBoolean{}; const {in}wantz: PBoolean{}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension(ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension(ldbn)}; const {in}ldb: PInteger{}; const {out}alpha: PDComplex{ dimension (n)}; const {out}beta: PDComplex{ dimension (n)}; const {inout}q: PDComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {inout}z: PDComplex{ dimension (ldzn)}; const {in}ldz: PInteger{}; const {out}m: PInteger{}; const {out}pl: PDouble{}; const {out}pr: PDouble{}; const {out}dif: PDouble{ dimension (2)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (max(1liwork))}; const {in}liwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ztgsja
procedure ztgsja_(const {in}jobu: PChar{*1}; const {in}jobv: PChar{*1}; const {in}jobq: PChar{*1}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {in}tola: PDouble{}; const {in}tolb: PDouble{}; const {out}alpha: PDouble{ dimension (n)}; const {out}beta: PDouble{ dimension (n)}; const {inout}u: PDComplex{ dimension (ldum)}; const {in}ldu: PInteger{}; const {inout}v: PDComplex{ dimension (ldvp)}; const {in}ldv: PInteger{}; const {inout}q: PDComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}ncycle: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ztgsna
procedure ztgsna_(const {in}job: PChar{*1}; const {in}howmny: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {in}vl: PDComplex{ dimension (ldvlm)}; const {in}ldvl: PInteger{}; const {in}vr: PDComplex{ dimension (ldvrm)}; const {in}ldvr: PInteger{}; const {out}s: PDouble{ dimension (mm)}; const {out}dif: PDouble{ dimension (mm)}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (n+2)}; const {out}info: PInteger{}); stdcall;



//file name ztgsy2
procedure ztgsy2_(const {in}trans: PChar{*1}; const {in}ijob: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (lda m)}; const {in}lda: PInteger{}; const {in}b: PDComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {inout}c: PDComplex{ dimension (ldc n)}; const {in}ldc: PInteger{}; const {in}d: PDComplex{ dimension (ldd m)}; const {in}ldd: PInteger{}; const {in}e: PDComplex{ dimension (lde n)}; const {in}lde: PInteger{}; const {inout}f: PDComplex{ dimension (ldf n)}; const {in}ldf: PInteger{}; const {out}scale: PDouble{}; const {inout}rdsum: PDouble{}; const {inout}rdscal: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name ztgsyl
procedure ztgsyl_(const {in}trans: PChar{*1}; const {in}ijob: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (lda m)}; const {in}lda: PInteger{}; const {in}b: PDComplex{ dimension (ldb n)}; const {in}ldb: PInteger{}; const {inout}c: PDComplex{ dimension (ldc n)}; const {in}ldc: PInteger{}; const {in}d: PDComplex{ dimension (ldd m)}; const {in}ldd: PInteger{}; const {in}e: PDComplex{ dimension (lde n)}; const {in}lde: PInteger{}; const {inout}f: PDComplex{ dimension (ldf n)}; const {in}ldf: PInteger{}; const {out}dif: PDouble{}; const {out}scale: PDouble{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}iwork: PInteger{ dimension (m+n+2)}; const {out}info: PInteger{}); stdcall;



//file name ztpcon
procedure ztpcon_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {out}rcond: PDouble{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ztplqt
procedure ztplqt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {in}mb: PInteger{}; const {inout}a: PDComplex{ dimension (ldam)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}t: PDComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}work: PDComplex{ dimension (mb*m)}; const {out}info: PInteger{}); stdcall;



//file name ztplqt2
procedure ztplqt2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {inout}a: PDComplex{ dimension (ldam)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}t: PDComplex{ dimension (ldtm)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ztpmlqt
procedure ztpmlqt_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}mb: PInteger{}; const {in}v: PDComplex{ dimension (ldvk)}; const {in}ldv: PInteger{}; const {in}t: PDComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}a: PDComplex{ dimension}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{ the dimension of work is}; const {out}info: PInteger{}); stdcall;



//file name ztpmqrt
procedure ztpmqrt_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}nb: PInteger{}; const {in}v: PDComplex{ dimension (ldvk)}; const {in}ldv: PInteger{}; const {in}t: PDComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}a: PDComplex{ dimension}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{ the dimension of work is}; const {out}info: PInteger{}); stdcall;



//file name ztpqrt
procedure ztpqrt_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}t: PDComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}work: PDComplex{ dimension (nb*n)}; const {out}info: PInteger{}); stdcall;



//file name ztpqrt2
procedure ztpqrt2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}l: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}t: PDComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ztprfb
procedure ztprfb_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}direct: PChar{*1}; const {in}storev: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}v: PDComplex{ dimension}; const {in}ldv: PInteger{}; const {in}t: PDComplex{ dimension (ldtk)}; const {in}ldt: PInteger{}; const {inout}a: PDComplex{ dimension}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {out}work: PDComplex{ dimension}; const {in}ldwork: PInteger{}); stdcall;



//file name ztprfs
procedure ztprfs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {in}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ztptri
procedure ztptri_(const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {inout}ap: PDComplex{ dimension (n*(n+1)/2)}; const {out}info: PInteger{}); stdcall;



//file name ztptrs
procedure ztptrs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ztpttf
procedure ztpttf_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDComplex{ dimension ( n*(n+1)/2 )}; const {out}arf: PDComplex{ dimension ( n*(n+1)/2 )}; const {out}info: PInteger{}); stdcall;



//file name ztpttr
procedure ztpttr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDComplex{ dimension ( n*(n+1)/2 )}; const {out}a: PDComplex{ dimension ( lda n )}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ztrcon
procedure ztrcon_(const {in}norm: PChar{*1}; const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}rcond: PDouble{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ztrevc
procedure ztrevc_(const {in}side: PChar{*1}; const {in}howmny: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {inout}t: PDComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {inout}vl: PDComplex{ dimension (ldvlmm)}; const {in}ldvl: PInteger{}; const {inout}vr: PDComplex{ dimension (ldvrmm)}; const {in}ldvr: PInteger{}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ztrevc3
procedure ztrevc3_(const {in}side: PChar{*1}; const {in}howmny: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {inout}t: PDComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {inout}vl: PDComplex{ dimension (ldvlmm)}; const {in}ldvl: PInteger{}; const {inout}vr: PDComplex{ dimension (ldvrmm)}; const {in}ldvr: PInteger{}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (lrwork)}; const {in}lrwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ztrexc
procedure ztrexc_(const {in}compq: PChar{*1}; const {in}n: PInteger{}; const {inout}t: PDComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {inout}q: PDComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {in}ifst: PInteger{}; const {in}ilst: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ztrrfs
procedure ztrrfs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {in}x: PDComplex{ dimension (ldxnrhs)}; const {in}ldx: PInteger{}; const {out}ferr: PDouble{ dimension (nrhs)}; const {out}berr: PDouble{ dimension (nrhs)}; const {out}work: PDComplex{ dimension (2*n)}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ztrsen
procedure ztrsen_(const {in}job: PChar{*1}; const {in}compq: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {inout}t: PDComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {inout}q: PDComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}w: PDComplex{ dimension (n)}; const {out}m: PInteger{}; const {out}s: PDouble{}; const {out}sep: PDouble{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ztrsna
procedure ztrsna_(const {in}job: PChar{*1}; const {in}howmny: PChar{*1}; const {in}select: PBoolean{ dimension (n)}; const {in}n: PInteger{}; const {in}t: PDComplex{ dimension (ldtn)}; const {in}ldt: PInteger{}; const {in}vl: PDComplex{ dimension (ldvlm)}; const {in}ldvl: PInteger{}; const {in}vr: PDComplex{ dimension (ldvrm)}; const {in}ldvr: PInteger{}; const {out}s: PDouble{ dimension (mm)}; const {out}sep: PDouble{ dimension (mm)}; const {in}mm: PInteger{}; const {out}m: PInteger{}; const {out}work: PDComplex{ dimension (ldworkn+6)}; const {in}ldwork: PInteger{}; const {out}rwork: PDouble{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name ztrsyl
procedure ztrsyl_(const {in}trana: PChar{*1}; const {in}tranb: PChar{*1}; const {in}isgn: PInteger{}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldam)}; const {in}lda: PInteger{}; const {in}b: PDComplex{ dimension (ldbn)}; const {in}ldb: PInteger{}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}scale: PDouble{}; const {out}info: PInteger{}); stdcall;



//file name ztrti2
procedure ztrti2_(const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ztrtri
procedure ztrtri_(const {in}uplo: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ztrtrs
procedure ztrtrs_(const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}diag: PChar{*1}; const {in}n: PInteger{}; const {in}nrhs: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {inout}b: PDComplex{ dimension (ldbnrhs)}; const {in}ldb: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name ztrttf
procedure ztrttf_(const {in}transr: PChar{*1}; const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension ( lda n )}; const {in}lda: PInteger{}; const {out}arf: PDComplex{ dimension ( n*(n+1)/2 )}; const {out}info: PInteger{}); stdcall;



//file name ztrttp
procedure ztrttp_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}ap: PDComplex{ dimension ( n*(n+1)/2 )}; const {out}info: PInteger{}); stdcall;



//file name ztzrzf
procedure ztzrzf_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}tau: PDComplex{ dimension (m)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zunbdb
procedure zunbdb_(const {in}trans: PChar{}; const {in}signs: PChar{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PDComplex{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x12: PDComplex{ dimension (ldx12m-q)}; const {in}ldx12: PInteger{}; const {inout}x21: PDComplex{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {inout}x22: PDComplex{ dimension (ldx22m-q)}; const {in}ldx22: PInteger{}; const {out}theta: PDouble{ dimension (q)}; const {out}phi: PDouble{ dimension (q-1)}; const {out}taup1: PDComplex{ dimension (p)}; const {out}taup2: PDComplex{ dimension (m-p)}; const {out}tauq1: PDComplex{ dimension (q)}; const {out}tauq2: PDComplex{ dimension (m-q)}; const {out}work: PDComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zunbdb1
procedure zunbdb1_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PDComplex{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PDComplex{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PDouble{ dimension (q)}; const {out}phi: PDouble{ dimension (q-1)}; const {out}taup1: PDComplex{ dimension (p)}; const {out}taup2: PDComplex{ dimension (m-p)}; const {out}tauq1: PDComplex{ dimension (q)}; const {out}work: PDComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zunbdb2
procedure zunbdb2_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PDComplex{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PDComplex{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PDouble{ dimension (q)}; const {out}phi: PDouble{ dimension (q-1)}; const {out}taup1: PDComplex{ dimension (p)}; const {out}taup2: PDComplex{ dimension (m-p)}; const {out}tauq1: PDComplex{ dimension (q)}; const {out}work: PDComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zunbdb3
procedure zunbdb3_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PDComplex{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PDComplex{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PDouble{ dimension (q)}; const {out}phi: PDouble{ dimension (q-1)}; const {out}taup1: PDComplex{ dimension (p)}; const {out}taup2: PDComplex{ dimension (m-p)}; const {out}tauq1: PDComplex{ dimension (q)}; const {out}work: PDComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zunbdb4
procedure zunbdb4_(const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PDComplex{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PDComplex{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PDouble{ dimension (q)}; const {out}phi: PDouble{ dimension (q-1)}; const {out}taup1: PDComplex{ dimension (p)}; const {out}taup2: PDComplex{ dimension (m-p)}; const {out}tauq1: PDComplex{ dimension (q)}; const {out}phantom: PDComplex{ dimension (m)}; const {out}work: PDComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zunbdb5
procedure zunbdb5_(const {in}m1: PInteger{}; const {in}m2: PInteger{}; const {in}n: PInteger{}; const {inout}x1: PDComplex{ dimension (m1)}; const {in}incx1: PInteger{}; const {inout}x2: PDComplex{ dimension (m2)}; const {in}incx2: PInteger{}; const {in}q1: PDComplex{ dimension (ldq1 n)}; const {in}ldq1: PInteger{}; const {in}q2: PDComplex{ dimension (ldq2 n)}; const {in}ldq2: PInteger{}; const {out}work: PDComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zunbdb6
procedure zunbdb6_(const {in}m1: PInteger{}; const {in}m2: PInteger{}; const {in}n: PInteger{}; const {inout}x1: PDComplex{ dimension (m1)}; const {in}incx1: PInteger{}; const {inout}x2: PDComplex{ dimension (m2)}; const {in}incx2: PInteger{}; const {in}q1: PDComplex{ dimension (ldq1 n)}; const {in}ldq1: PInteger{}; const {in}q2: PDComplex{ dimension (ldq2 n)}; const {in}ldq2: PInteger{}; const {out}work: PDComplex{ dimension (lwork)}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zuncsd
procedure zuncsd_(const {in}jobu1: PChar{}; const {in}jobu2: PChar{}; const {in}jobv1t: PChar{}; const {in}jobv2t: PChar{}; const {in}trans: PChar{}; const {in}signs: PChar{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PDComplex{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x12: PDComplex{ dimension (ldx12m-q)}; const {in}ldx12: PInteger{}; const {inout}x21: PDComplex{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {inout}x22: PDComplex{ dimension (ldx22m-q)}; const {in}ldx22: PInteger{}; const {out}theta: PDouble{ dimension (r) in which r =}; const {out}u1: PDComplex{ dimension (ldu1p)}; const {in}ldu1: PInteger{}; const {out}u2: PDComplex{ dimension (ldu2m-p)}; const {in}ldu2: PInteger{}; const {out}v1t: PDComplex{ dimension (ldv1tq)}; const {in}ldv1t: PInteger{}; const {out}v2t: PDComplex{ dimension (ldv2tm-q)}; const {in}ldv2t: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension max(1lrwork)}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (m-min(pm-pqm-q))}; const {out}info: PInteger{}); stdcall;



//file name zuncsd2by1
procedure zuncsd2by1_(const {in}jobu1: PChar{}; const {in}jobu2: PChar{}; const {in}jobv1t: PChar{}; const {in}m: PInteger{}; const {in}p: PInteger{}; const {in}q: PInteger{}; const {inout}x11: PDComplex{ dimension (ldx11q)}; const {in}ldx11: PInteger{}; const {inout}x21: PDComplex{ dimension (ldx21q)}; const {in}ldx21: PInteger{}; const {out}theta: PDouble{ dimension (r) in which r =}; const {out}u1: PDComplex{ dimension (p)}; const {in}ldu1: PInteger{}; const {out}u2: PDComplex{ dimension (m-p)}; const {in}ldu2: PInteger{}; const {out}v1t: PDComplex{ dimension (q)}; const {in}ldv1t: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}rwork: PDouble{ dimension (max(1lrwork))}; const {in}lrwork: PInteger{}; const {out}iwork: PInteger{ dimension (m-min(pm-pqm-q))}; const {out}info: PInteger{}); stdcall;



//file name zung2l
procedure zung2l_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {out}work: PDComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zung2r
procedure zung2r_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {out}work: PDComplex{ dimension (n)}; const {out}info: PInteger{}); stdcall;



//file name zungbr
procedure zungbr_(const {in}vect: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zunghr
procedure zunghr_(const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (n-1)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zungl2
procedure zungl2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {out}work: PDComplex{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name zunglq
procedure zunglq_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zungql
procedure zungql_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zungqr
procedure zungqr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zungr2
procedure zungr2_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {out}work: PDComplex{ dimension (m)}; const {out}info: PInteger{}); stdcall;



//file name zungrq
procedure zungrq_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zungtr
procedure zungtr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (n-1)}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zungtsqr
procedure zungtsqr_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}t: PDComplex{}; const {in}ldt: PInteger{}; const {out}work: PDComplex{ dimension (max(2lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zungtsqr_row
procedure zungtsqr_row_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}mb: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {in}t: PDComplex{}; const {in}ldt: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zunhr_col
procedure zunhr_col_(const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}nb: PInteger{}; const {inout}a: PDComplex{ dimension (ldan)}; const {in}lda: PInteger{}; const {out}t: PDComplex{}; const {in}ldt: PInteger{}; const {out}d: PDComplex{ dimension min(mn)}; const {out}info: PInteger{}); stdcall;



//file name zunm2l
procedure zunm2l_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDComplex{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension}; const {out}info: PInteger{}); stdcall;



//file name zunm2r
procedure zunm2r_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDComplex{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension}; const {out}info: PInteger{}); stdcall;



//file name zunm22
procedure zunm22_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}n1: PInteger{}; const {in}n2: PInteger{}; const {in}q: PDComplex{ dimension}; const {in}ldq: PInteger{}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zunmbr
procedure zunmbr_(const {in}vect: PChar{*1}; const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDComplex{ dimension}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (min(nqk))}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zunmhr
procedure zunmhr_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}ilo: PInteger{}; const {in}ihi: PInteger{}; const {in}a: PDComplex{ dimension}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zunml2
procedure zunml2_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDComplex{ dimension}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension}; const {out}info: PInteger{}); stdcall;



//file name zunmlq
procedure zunmlq_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDComplex{ dimension}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zunmql
procedure zunmql_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDComplex{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zunmqr
procedure zunmqr_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDComplex{ dimension (ldak)}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zunmr2
procedure zunmr2_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDComplex{ dimension}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension}; const {out}info: PInteger{}); stdcall;



//file name zunmr3
procedure zunmr3_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}a: PDComplex{ dimension}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension}; const {out}info: PInteger{}); stdcall;



//file name zunmrq
procedure zunmrq_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}a: PDComplex{ dimension}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zunmrz
procedure zunmrz_(const {in}side: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}k: PInteger{}; const {in}l: PInteger{}; const {in}a: PDComplex{ dimension}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension (k)}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zunmtr
procedure zunmtr_(const {in}side: PChar{*1}; const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}a: PDComplex{ dimension}; const {in}lda: PInteger{}; const {in}tau: PDComplex{ dimension}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension (max(1lwork))}; const {in}lwork: PInteger{}; const {out}info: PInteger{}); stdcall;



//file name zupgtr
procedure zupgtr_(const {in}uplo: PChar{*1}; const {in}n: PInteger{}; const {in}ap: PDComplex{ dimension (n*(n+1)/2)}; const {in}tau: PDComplex{ dimension (n-1)}; const {out}q: PDComplex{ dimension (ldqn)}; const {in}ldq: PInteger{}; const {out}work: PDComplex{ dimension (n-1)}; const {out}info: PInteger{}); stdcall;



//file name zupmtr
procedure zupmtr_(const {in}side: PChar{*1}; const {in}uplo: PChar{*1}; const {in}trans: PChar{*1}; const {in}m: PInteger{}; const {in}n: PInteger{}; const {in}ap: PDComplex{ dimension}; const {in}tau: PDComplex{ dimension (m-1) if side = 'l'}; const {inout}c: PDComplex{ dimension (ldcn)}; const {in}ldc: PInteger{}; const {out}work: PDComplex{ dimension}; const {out}info: PInteger{}); stdcall;

implementation


//file name cbbcsd
procedure cbbcsd_; external LibDllPath;
//file name cbdsqr
procedure cbdsqr_; external LibDllPath;
//file name cgbbrd
procedure cgbbrd_; external LibDllPath;
//file name cgbcon
procedure cgbcon_; external LibDllPath;
//file name cgbequ
procedure cgbequ_; external LibDllPath;
//file name cgbequb
procedure cgbequb_; external LibDllPath;
//file name cgbrfs
procedure cgbrfs_; external LibDllPath;
//file name cgbrfsx
procedure cgbrfsx_; external LibDllPath;
//file name cgbsv
procedure cgbsv_; external LibDllPath;
//file name cgbsvx
procedure cgbsvx_; external LibDllPath;
//file name cgbsvxx
procedure cgbsvxx_; external LibDllPath;
//file name cgbtf2
procedure cgbtf2_; external LibDllPath;
//file name cgbtrf
procedure cgbtrf_; external LibDllPath;
//file name cgbtrs
procedure cgbtrs_; external LibDllPath;
//file name cgebak
procedure cgebak_; external LibDllPath;
//file name cgebal
procedure cgebal_; external LibDllPath;
//file name cgebd2
procedure cgebd2_; external LibDllPath;
//file name cgebrd
procedure cgebrd_; external LibDllPath;
//file name cgecon
procedure cgecon_; external LibDllPath;
//file name cgeequ
procedure cgeequ_; external LibDllPath;
//file name cgeequb
procedure cgeequb_; external LibDllPath;
//file name cgees
procedure cgees_; external LibDllPath;
//file name cgeesx
procedure cgeesx_; external LibDllPath;
//file name cgeev
procedure cgeev_; external LibDllPath;
//file name cgeevx
procedure cgeevx_; external LibDllPath;
//file name cgehd2
procedure cgehd2_; external LibDllPath;
//file name cgehrd
procedure cgehrd_; external LibDllPath;
//file name cgejsv
procedure cgejsv_; external LibDllPath;
//file name cgelq
procedure cgelq_; external LibDllPath;
//file name cgelq2
procedure cgelq2_; external LibDllPath;
//file name cgelqf
procedure cgelqf_; external LibDllPath;
//file name cgelqt
procedure cgelqt_; external LibDllPath;
//file name cgelqt3
procedure cgelqt3_; external LibDllPath;
//file name cgels
procedure cgels_; external LibDllPath;
//file name cgelsd
procedure cgelsd_; external LibDllPath;
//file name cgelss
procedure cgelss_; external LibDllPath;
//file name cgelsy
procedure cgelsy_; external LibDllPath;
//file name cgemlq
procedure cgemlq_; external LibDllPath;
//file name cgemlqt
procedure cgemlqt_; external LibDllPath;
//file name cgemqr
procedure cgemqr_; external LibDllPath;
//file name cgemqrt
procedure cgemqrt_; external LibDllPath;
//file name cgeql2
procedure cgeql2_; external LibDllPath;
//file name cgeqlf
procedure cgeqlf_; external LibDllPath;
//file name cgeqp3
procedure cgeqp3_; external LibDllPath;
//file name cgeqr
procedure cgeqr_; external LibDllPath;
//file name cgeqr2
procedure cgeqr2_; external LibDllPath;
//file name cgeqr2p
procedure cgeqr2p_; external LibDllPath;
//file name cgeqrf
procedure cgeqrf_; external LibDllPath;
//file name cgeqrfp
procedure cgeqrfp_; external LibDllPath;
//file name cgeqrt
procedure cgeqrt_; external LibDllPath;
//file name cgeqrt2
procedure cgeqrt2_; external LibDllPath;
//file name cgeqrt3
procedure cgeqrt3_; external LibDllPath;
//file name cgerfs
procedure cgerfs_; external LibDllPath;
//file name cgerfsx
procedure cgerfsx_; external LibDllPath;
//file name cgerq2
procedure cgerq2_; external LibDllPath;
//file name cgerqf
procedure cgerqf_; external LibDllPath;
//file name cgesc2
procedure cgesc2_; external LibDllPath;
//file name cgesdd
procedure cgesdd_; external LibDllPath;
//file name cgesv
procedure cgesv_; external LibDllPath;
//file name cgesvd
procedure cgesvd_; external LibDllPath;
//file name cgesvdq
procedure cgesvdq_; external LibDllPath;
//file name cgesvdx
procedure cgesvdx_; external LibDllPath;
//file name cgesvj
procedure cgesvj_; external LibDllPath;
//file name cgesvx
procedure cgesvx_; external LibDllPath;
//file name cgesvxx
procedure cgesvxx_; external LibDllPath;
//file name cgetc2
procedure cgetc2_; external LibDllPath;
//file name cgetf2
procedure cgetf2_; external LibDllPath;
//file name cgetrf
procedure cgetrf_; external LibDllPath;
//file name cgetrf2
procedure cgetrf2_; external LibDllPath;
//file name cgetri
procedure cgetri_; external LibDllPath;
//file name cgetrs
procedure cgetrs_; external LibDllPath;
//file name cgetsls
procedure cgetsls_; external LibDllPath;
//file name cgetsqrhrt
procedure cgetsqrhrt_; external LibDllPath;
//file name cggbak
procedure cggbak_; external LibDllPath;
//file name cggbal
procedure cggbal_; external LibDllPath;
//file name cgges
procedure cgges_; external LibDllPath;
//file name cgges3
procedure cgges3_; external LibDllPath;
//file name cggesx
procedure cggesx_; external LibDllPath;
//file name cggev
procedure cggev_; external LibDllPath;
//file name cggev3
procedure cggev3_; external LibDllPath;
//file name cggevx
procedure cggevx_; external LibDllPath;
//file name cggglm
procedure cggglm_; external LibDllPath;
//file name cgghd3
procedure cgghd3_; external LibDllPath;
//file name cgghrd
procedure cgghrd_; external LibDllPath;
//file name cgglse
procedure cgglse_; external LibDllPath;
//file name cggqrf
procedure cggqrf_; external LibDllPath;
//file name cggrqf
procedure cggrqf_; external LibDllPath;
//file name cggsvd3
procedure cggsvd3_; external LibDllPath;
//file name cggsvp3
procedure cggsvp3_; external LibDllPath;
//file name cgsvj0
procedure cgsvj0_; external LibDllPath;
//file name cgsvj1
procedure cgsvj1_; external LibDllPath;
//file name cgtcon
procedure cgtcon_; external LibDllPath;
//file name cgtrfs
procedure cgtrfs_; external LibDllPath;
//file name cgtsv
procedure cgtsv_; external LibDllPath;
//file name cgtsvx
procedure cgtsvx_; external LibDllPath;
//file name cgttrf
procedure cgttrf_; external LibDllPath;
//file name cgttrs
procedure cgttrs_; external LibDllPath;
//file name cgtts2
procedure cgtts2_; external LibDllPath;
//file name chb2st_kernels
procedure chb2st_kernels_; external LibDllPath;
//file name chbev
procedure chbev_; external LibDllPath;
//file name chbev_2stage
procedure chbev_2stage_; external LibDllPath;
//file name chbevd
procedure chbevd_; external LibDllPath;
//file name chbevd_2stage
procedure chbevd_2stage_; external LibDllPath;
//file name chbevx
procedure chbevx_; external LibDllPath;
//file name chbevx_2stage
procedure chbevx_2stage_; external LibDllPath;
//file name chbgst
procedure chbgst_; external LibDllPath;
//file name chbgv
procedure chbgv_; external LibDllPath;
//file name chbgvd
procedure chbgvd_; external LibDllPath;
//file name chbgvx
procedure chbgvx_; external LibDllPath;
//file name chbtrd
procedure chbtrd_; external LibDllPath;
//file name checon
procedure checon_; external LibDllPath;
//file name checon_3
procedure checon_3_; external LibDllPath;
//file name checon_rook
procedure checon_rook_; external LibDllPath;
//file name cheequb
procedure cheequb_; external LibDllPath;
//file name cheev
procedure cheev_; external LibDllPath;
//file name cheev_2stage
procedure cheev_2stage_; external LibDllPath;
//file name cheevd
procedure cheevd_; external LibDllPath;
//file name cheevd_2stage
procedure cheevd_2stage_; external LibDllPath;
//file name cheevr
procedure cheevr_; external LibDllPath;
//file name cheevr_2stage
procedure cheevr_2stage_; external LibDllPath;
//file name cheevx
procedure cheevx_; external LibDllPath;
//file name cheevx_2stage
procedure cheevx_2stage_; external LibDllPath;
//file name chegs2
procedure chegs2_; external LibDllPath;
//file name chegst
procedure chegst_; external LibDllPath;
//file name chegv
procedure chegv_; external LibDllPath;
//file name chegv_2stage
procedure chegv_2stage_; external LibDllPath;
//file name chegvd
procedure chegvd_; external LibDllPath;
//file name chegvx
procedure chegvx_; external LibDllPath;
//file name cherfs
procedure cherfs_; external LibDllPath;
//file name cherfsx
procedure cherfsx_; external LibDllPath;
//file name chesv
procedure chesv_; external LibDllPath;
//file name chesv_aa
procedure chesv_aa_; external LibDllPath;
//file name chesv_aa_2stage
procedure chesv_aa_2stage_; external LibDllPath;
//file name chesv_rk
procedure chesv_rk_; external LibDllPath;
//file name chesv_rook
procedure chesv_rook_; external LibDllPath;
//file name chesvx
procedure chesvx_; external LibDllPath;
//file name chesvxx
procedure chesvxx_; external LibDllPath;
//file name cheswapr
procedure cheswapr_; external LibDllPath;
//file name chetd2
procedure chetd2_; external LibDllPath;
//file name chetf2
procedure chetf2_; external LibDllPath;
//file name chetf2_rk
procedure chetf2_rk_; external LibDllPath;
//file name chetf2_rook
procedure chetf2_rook_; external LibDllPath;
//file name chetrd
procedure chetrd_; external LibDllPath;
//file name chetrd_2stage
procedure chetrd_2stage_; external LibDllPath;
//file name chetrd_hb2st
procedure chetrd_hb2st_; external LibDllPath;
//file name chetrd_he2hb
procedure chetrd_he2hb_; external LibDllPath;
//file name chetrf
procedure chetrf_; external LibDllPath;
//file name chetrf_aa
procedure chetrf_aa_; external LibDllPath;
//file name chetrf_aa_2stage
procedure chetrf_aa_2stage_; external LibDllPath;
//file name chetrf_rk
procedure chetrf_rk_; external LibDllPath;
//file name chetrf_rook
procedure chetrf_rook_; external LibDllPath;
//file name chetri
procedure chetri_; external LibDllPath;
//file name chetri_3
procedure chetri_3_; external LibDllPath;
//file name chetri_3x
procedure chetri_3x_; external LibDllPath;
//file name chetri_rook
procedure chetri_rook_; external LibDllPath;
//file name chetri2
procedure chetri2_; external LibDllPath;
//file name chetri2x
procedure chetri2x_; external LibDllPath;
//file name chetrs
procedure chetrs_; external LibDllPath;
//file name chetrs_3
procedure chetrs_3_; external LibDllPath;
//file name chetrs_aa
procedure chetrs_aa_; external LibDllPath;
//file name chetrs_aa_2stage
procedure chetrs_aa_2stage_; external LibDllPath;
//file name chetrs_rook
procedure chetrs_rook_; external LibDllPath;
//file name chetrs2
procedure chetrs2_; external LibDllPath;
//file name chfrk
procedure chfrk_; external LibDllPath;
//file name chgeqz
procedure chgeqz_; external LibDllPath;
//file name chla_transtype
function chla_transtype_; external LibDllPath;
//file name chpcon
procedure chpcon_; external LibDllPath;
//file name chpev
procedure chpev_; external LibDllPath;
//file name chpevd
procedure chpevd_; external LibDllPath;
//file name chpevx
procedure chpevx_; external LibDllPath;
//file name chpgst
procedure chpgst_; external LibDllPath;
//file name chpgv
procedure chpgv_; external LibDllPath;
//file name chpgvd
procedure chpgvd_; external LibDllPath;
//file name chpgvx
procedure chpgvx_; external LibDllPath;
//file name chprfs
procedure chprfs_; external LibDllPath;
//file name chpsv
procedure chpsv_; external LibDllPath;
//file name chpsvx
procedure chpsvx_; external LibDllPath;
//file name chptrd
procedure chptrd_; external LibDllPath;
//file name chptrf
procedure chptrf_; external LibDllPath;
//file name chptri
procedure chptri_; external LibDllPath;
//file name chptrs
procedure chptrs_; external LibDllPath;
//file name chsein
procedure chsein_; external LibDllPath;
//file name chseqr
procedure chseqr_; external LibDllPath;
//file name cla_gbamv
procedure cla_gbamv_; external LibDllPath;
//file name cla_gbrcond_c
function cla_gbrcond_c_; external LibDllPath;
//file name cla_gbrcond_x
function cla_gbrcond_x_; external LibDllPath;
//file name cla_gbrfsx_extended
procedure cla_gbrfsx_extended_; external LibDllPath;
//file name cla_gbrpvgrw
function cla_gbrpvgrw_; external LibDllPath;
//file name cla_geamv
procedure cla_geamv_; external LibDllPath;
//file name cla_gercond_c
function cla_gercond_c_; external LibDllPath;
//file name cla_gercond_x
function cla_gercond_x_; external LibDllPath;
//file name cla_gerfsx_extended
procedure cla_gerfsx_extended_; external LibDllPath;
//file name cla_gerpvgrw
function cla_gerpvgrw_; external LibDllPath;
//file name cla_heamv
procedure cla_heamv_; external LibDllPath;
//file name cla_hercond_c
function cla_hercond_c_; external LibDllPath;
//file name cla_hercond_x
function cla_hercond_x_; external LibDllPath;
//file name cla_herfsx_extended
procedure cla_herfsx_extended_; external LibDllPath;
//file name cla_herpvgrw
function cla_herpvgrw_; external LibDllPath;
//file name cla_lin_berr
procedure cla_lin_berr_; external LibDllPath;
//file name cla_porcond_c
function cla_porcond_c_; external LibDllPath;
//file name cla_porcond_x
function cla_porcond_x_; external LibDllPath;
//file name cla_porfsx_extended
procedure cla_porfsx_extended_; external LibDllPath;
//file name cla_porpvgrw
function cla_porpvgrw_; external LibDllPath;
//file name cla_syamv
procedure cla_syamv_; external LibDllPath;
//file name cla_syrcond_c
function cla_syrcond_c_; external LibDllPath;
//file name cla_syrcond_x
function cla_syrcond_x_; external LibDllPath;
//file name cla_syrfsx_extended
procedure cla_syrfsx_extended_; external LibDllPath;
//file name cla_syrpvgrw
function cla_syrpvgrw_; external LibDllPath;
//file name cla_wwaddw
procedure cla_wwaddw_; external LibDllPath;
//file name clabrd
procedure clabrd_; external LibDllPath;
//file name clacgv
procedure clacgv_; external LibDllPath;
//file name clacn2
procedure clacn2_; external LibDllPath;
//file name clacon
procedure clacon_; external LibDllPath;
//file name clacp2
procedure clacp2_; external LibDllPath;
//file name clacpy
procedure clacpy_; external LibDllPath;
//file name clacrm
procedure clacrm_; external LibDllPath;
//file name clacrt
procedure clacrt_; external LibDllPath;
//file name cladiv
function cladiv_; external LibDllPath;
//file name claed0
procedure claed0_; external LibDllPath;
//file name claed7
procedure claed7_; external LibDllPath;
//file name claed8
procedure claed8_; external LibDllPath;
//file name claein
procedure claein_; external LibDllPath;
//file name claesy
procedure claesy_; external LibDllPath;
//file name claev2
procedure claev2_; external LibDllPath;
//file name clag2z
procedure clag2z_; external LibDllPath;
//file name clags2
procedure clags2_; external LibDllPath;
//file name clagtm
procedure clagtm_; external LibDllPath;
//file name clahef
procedure clahef_; external LibDllPath;
//file name clahef_aa
procedure clahef_aa_; external LibDllPath;
//file name clahef_rk
procedure clahef_rk_; external LibDllPath;
//file name clahef_rook
procedure clahef_rook_; external LibDllPath;
//file name clahqr
procedure clahqr_; external LibDllPath;
//file name clahr2
procedure clahr2_; external LibDllPath;
//file name claic1
procedure claic1_; external LibDllPath;
//file name clals0
procedure clals0_; external LibDllPath;
//file name clalsa
procedure clalsa_; external LibDllPath;
//file name clalsd
procedure clalsd_; external LibDllPath;
//file name clamswlq
procedure clamswlq_; external LibDllPath;
//file name clamtsqr
procedure clamtsqr_; external LibDllPath;
//file name clangb
function clangb_; external LibDllPath;
//file name clange
function clange_; external LibDllPath;
//file name clangt
function clangt_; external LibDllPath;
//file name clanhb
function clanhb_; external LibDllPath;
//file name clanhe
function clanhe_; external LibDllPath;
//file name clanhf
function clanhf_; external LibDllPath;
//file name clanhp
function clanhp_; external LibDllPath;
//file name clanhs
function clanhs_; external LibDllPath;
//file name clanht
function clanht_; external LibDllPath;
//file name clansb
function clansb_; external LibDllPath;
//file name clansp
function clansp_; external LibDllPath;
//file name clansy
function clansy_; external LibDllPath;
//file name clantb
function clantb_; external LibDllPath;
//file name clantp
function clantp_; external LibDllPath;
//file name clantr
function clantr_; external LibDllPath;
//file name clapll
procedure clapll_; external LibDllPath;
//file name clapmr
procedure clapmr_; external LibDllPath;
//file name clapmt
procedure clapmt_; external LibDllPath;
//file name claqgb
procedure claqgb_; external LibDllPath;
//file name claqge
procedure claqge_; external LibDllPath;
//file name claqhb
procedure claqhb_; external LibDllPath;
//file name claqhe
procedure claqhe_; external LibDllPath;
//file name claqhp
procedure claqhp_; external LibDllPath;
//file name claqp2
procedure claqp2_; external LibDllPath;
//file name claqps
procedure claqps_; external LibDllPath;
//file name claqr0
procedure claqr0_; external LibDllPath;
//file name claqr1
procedure claqr1_; external LibDllPath;
//file name claqr2
procedure claqr2_; external LibDllPath;
//file name claqr3
procedure claqr3_; external LibDllPath;
//file name claqr4
procedure claqr4_; external LibDllPath;
//file name claqr5
procedure claqr5_; external LibDllPath;
//file name claqsb
procedure claqsb_; external LibDllPath;
//file name claqsp
procedure claqsp_; external LibDllPath;
//file name claqsy
procedure claqsy_; external LibDllPath;
//file name clar1v
procedure clar1v_; external LibDllPath;
//file name clar2v
procedure clar2v_; external LibDllPath;
//file name clarcm
procedure clarcm_; external LibDllPath;
//file name clarf
procedure clarf_; external LibDllPath;
//file name clarfb
procedure clarfb_; external LibDllPath;
//file name clarfb_gett
procedure clarfb_gett_; external LibDllPath;
//file name clarfg
procedure clarfg_; external LibDllPath;
//file name clarfgp
procedure clarfgp_; external LibDllPath;
//file name clarft
procedure clarft_; external LibDllPath;
//file name clarfx
procedure clarfx_; external LibDllPath;
//file name clarfy
procedure clarfy_; external LibDllPath;
//file name clargv
procedure clargv_; external LibDllPath;
//file name clarnv
procedure clarnv_; external LibDllPath;
//file name clarrv
procedure clarrv_; external LibDllPath;
//file name clarscl2
procedure clarscl2_; external LibDllPath;
//file name clartg
procedure clartg_; external LibDllPath;
//file name clartv
procedure clartv_; external LibDllPath;
//file name clarz
procedure clarz_; external LibDllPath;
//file name clarzb
procedure clarzb_; external LibDllPath;
//file name clarzt
procedure clarzt_; external LibDllPath;
//file name clascl
procedure clascl_; external LibDllPath;
//file name clascl2
procedure clascl2_; external LibDllPath;
//file name claset
procedure claset_; external LibDllPath;
//file name clasr
procedure clasr_; external LibDllPath;
//file name classq
procedure classq_; external LibDllPath;
//file name claswlq
procedure claswlq_; external LibDllPath;
//file name claswp
procedure claswp_; external LibDllPath;
//file name clasyf
procedure clasyf_; external LibDllPath;
//file name clasyf_aa
procedure clasyf_aa_; external LibDllPath;
//file name clasyf_rk
procedure clasyf_rk_; external LibDllPath;
//file name clasyf_rook
procedure clasyf_rook_; external LibDllPath;
//file name clatbs
procedure clatbs_; external LibDllPath;
//file name clatdf
procedure clatdf_; external LibDllPath;
//file name clatps
procedure clatps_; external LibDllPath;
//file name clatrd
procedure clatrd_; external LibDllPath;
//file name clatrs
procedure clatrs_; external LibDllPath;
//file name clatrz
procedure clatrz_; external LibDllPath;
//file name clatsqr
procedure clatsqr_; external LibDllPath;
//file name claunhr_col_getrfnp
procedure claunhr_col_getrfnp_; external LibDllPath;
//file name claunhr_col_getrfnp2
procedure claunhr_col_getrfnp2_; external LibDllPath;
//file name clauu2
procedure clauu2_; external LibDllPath;
//file name clauum
procedure clauum_; external LibDllPath;
//file name cpbcon
procedure cpbcon_; external LibDllPath;
//file name cpbequ
procedure cpbequ_; external LibDllPath;
//file name cpbrfs
procedure cpbrfs_; external LibDllPath;
//file name cpbstf
procedure cpbstf_; external LibDllPath;
//file name cpbsv
procedure cpbsv_; external LibDllPath;
//file name cpbsvx
procedure cpbsvx_; external LibDllPath;
//file name cpbtf2
procedure cpbtf2_; external LibDllPath;
//file name cpbtrf
procedure cpbtrf_; external LibDllPath;
//file name cpbtrs
procedure cpbtrs_; external LibDllPath;
//file name cpftrf
procedure cpftrf_; external LibDllPath;
//file name cpftri
procedure cpftri_; external LibDllPath;
//file name cpftrs
procedure cpftrs_; external LibDllPath;
//file name cpocon
procedure cpocon_; external LibDllPath;
//file name cpoequ
procedure cpoequ_; external LibDllPath;
//file name cpoequb
procedure cpoequb_; external LibDllPath;
//file name cporfs
procedure cporfs_; external LibDllPath;
//file name cporfsx
procedure cporfsx_; external LibDllPath;
//file name cposv
procedure cposv_; external LibDllPath;
//file name cposvx
procedure cposvx_; external LibDllPath;
//file name cposvxx
procedure cposvxx_; external LibDllPath;
//file name cpotf2
procedure cpotf2_; external LibDllPath;
//file name cpotrf
procedure cpotrf_; external LibDllPath;
//file name cpotrf2
procedure cpotrf2_; external LibDllPath;
//file name cpotri
procedure cpotri_; external LibDllPath;
//file name cpotrs
procedure cpotrs_; external LibDllPath;
//file name cppcon
procedure cppcon_; external LibDllPath;
//file name cppequ
procedure cppequ_; external LibDllPath;
//file name cpprfs
procedure cpprfs_; external LibDllPath;
//file name cppsv
procedure cppsv_; external LibDllPath;
//file name cppsvx
procedure cppsvx_; external LibDllPath;
//file name cpptrf
procedure cpptrf_; external LibDllPath;
//file name cpptri
procedure cpptri_; external LibDllPath;
//file name cpptrs
procedure cpptrs_; external LibDllPath;
//file name cpstf2
procedure cpstf2_; external LibDllPath;
//file name cpstrf
procedure cpstrf_; external LibDllPath;
//file name cptcon
procedure cptcon_; external LibDllPath;
//file name cpteqr
procedure cpteqr_; external LibDllPath;
//file name cptrfs
procedure cptrfs_; external LibDllPath;
//file name cptsv
procedure cptsv_; external LibDllPath;
//file name cptsvx
procedure cptsvx_; external LibDllPath;
//file name cpttrf
procedure cpttrf_; external LibDllPath;
//file name cpttrs
procedure cpttrs_; external LibDllPath;
//file name cptts2
procedure cptts2_; external LibDllPath;
//file name crot
procedure crot_; external LibDllPath;
//file name cspcon
procedure cspcon_; external LibDllPath;
//file name cspmv
procedure cspmv_; external LibDllPath;
//file name cspr
procedure cspr_; external LibDllPath;
//file name csprfs
procedure csprfs_; external LibDllPath;
//file name cspsv
procedure cspsv_; external LibDllPath;
//file name cspsvx
procedure cspsvx_; external LibDllPath;
//file name csptrf
procedure csptrf_; external LibDllPath;
//file name csptri
procedure csptri_; external LibDllPath;
//file name csptrs
procedure csptrs_; external LibDllPath;
//file name csrscl
procedure csrscl_; external LibDllPath;
//file name cstedc
procedure cstedc_; external LibDllPath;
//file name cstegr
procedure cstegr_; external LibDllPath;
//file name cstein
procedure cstein_; external LibDllPath;
//file name cstemr
procedure cstemr_; external LibDllPath;
//file name csteqr
procedure csteqr_; external LibDllPath;
//file name csycon
procedure csycon_; external LibDllPath;
//file name csycon_3
procedure csycon_3_; external LibDllPath;
//file name csycon_rook
procedure csycon_rook_; external LibDllPath;
//file name csyconv
procedure csyconv_; external LibDllPath;
//file name csyconvf
procedure csyconvf_; external LibDllPath;
//file name csyconvf_rook
procedure csyconvf_rook_; external LibDllPath;
//file name csyequb
procedure csyequb_; external LibDllPath;
//file name csymv
procedure csymv_; external LibDllPath;
//file name csyr
procedure csyr_; external LibDllPath;
//file name csyrfs
procedure csyrfs_; external LibDllPath;
//file name csyrfsx
procedure csyrfsx_; external LibDllPath;
//file name csysv
procedure csysv_; external LibDllPath;
//file name csysv_aa
procedure csysv_aa_; external LibDllPath;
//file name csysv_aa_2stage
procedure csysv_aa_2stage_; external LibDllPath;
//file name csysv_rk
procedure csysv_rk_; external LibDllPath;
//file name csysv_rook
procedure csysv_rook_; external LibDllPath;
//file name csysvx
procedure csysvx_; external LibDllPath;
//file name csysvxx
procedure csysvxx_; external LibDllPath;
//file name csyswapr
procedure csyswapr_; external LibDllPath;
//file name csytf2
procedure csytf2_; external LibDllPath;
//file name csytf2_rk
procedure csytf2_rk_; external LibDllPath;
//file name csytf2_rook
procedure csytf2_rook_; external LibDllPath;
//file name csytrf
procedure csytrf_; external LibDllPath;
//file name csytrf_aa
procedure csytrf_aa_; external LibDllPath;
//file name csytrf_aa_2stage
procedure csytrf_aa_2stage_; external LibDllPath;
//file name csytrf_rk
procedure csytrf_rk_; external LibDllPath;
//file name csytrf_rook
procedure csytrf_rook_; external LibDllPath;
//file name csytri
procedure csytri_; external LibDllPath;
//file name csytri_3
procedure csytri_3_; external LibDllPath;
//file name csytri_3x
procedure csytri_3x_; external LibDllPath;
//file name csytri_rook
procedure csytri_rook_; external LibDllPath;
//file name csytri2
procedure csytri2_; external LibDllPath;
//file name csytri2x
procedure csytri2x_; external LibDllPath;
//file name csytrs
procedure csytrs_; external LibDllPath;
//file name csytrs_3
procedure csytrs_3_; external LibDllPath;
//file name csytrs_aa
procedure csytrs_aa_; external LibDllPath;
//file name csytrs_aa_2stage
procedure csytrs_aa_2stage_; external LibDllPath;
//file name csytrs_rook
procedure csytrs_rook_; external LibDllPath;
//file name csytrs2
procedure csytrs2_; external LibDllPath;
//file name ctbcon
procedure ctbcon_; external LibDllPath;
//file name ctbrfs
procedure ctbrfs_; external LibDllPath;
//file name ctbtrs
procedure ctbtrs_; external LibDllPath;
//file name ctfsm
procedure ctfsm_; external LibDllPath;
//file name ctftri
procedure ctftri_; external LibDllPath;
//file name ctfttp
procedure ctfttp_; external LibDllPath;
//file name ctfttr
procedure ctfttr_; external LibDllPath;
//file name ctgevc
procedure ctgevc_; external LibDllPath;
//file name ctgex2
procedure ctgex2_; external LibDllPath;
//file name ctgexc
procedure ctgexc_; external LibDllPath;
//file name ctgsen
procedure ctgsen_; external LibDllPath;
//file name ctgsja
procedure ctgsja_; external LibDllPath;
//file name ctgsna
procedure ctgsna_; external LibDllPath;
//file name ctgsy2
procedure ctgsy2_; external LibDllPath;
//file name ctgsyl
procedure ctgsyl_; external LibDllPath;
//file name ctpcon
procedure ctpcon_; external LibDllPath;
//file name ctplqt
procedure ctplqt_; external LibDllPath;
//file name ctplqt2
procedure ctplqt2_; external LibDllPath;
//file name ctpmlqt
procedure ctpmlqt_; external LibDllPath;
//file name ctpmqrt
procedure ctpmqrt_; external LibDllPath;
//file name ctpqrt
procedure ctpqrt_; external LibDllPath;
//file name ctpqrt2
procedure ctpqrt2_; external LibDllPath;
//file name ctprfb
procedure ctprfb_; external LibDllPath;
//file name ctprfs
procedure ctprfs_; external LibDllPath;
//file name ctptri
procedure ctptri_; external LibDllPath;
//file name ctptrs
procedure ctptrs_; external LibDllPath;
//file name ctpttf
procedure ctpttf_; external LibDllPath;
//file name ctpttr
procedure ctpttr_; external LibDllPath;
//file name ctrcon
procedure ctrcon_; external LibDllPath;
//file name ctrevc
procedure ctrevc_; external LibDllPath;
//file name ctrevc3
procedure ctrevc3_; external LibDllPath;
//file name ctrexc
procedure ctrexc_; external LibDllPath;
//file name ctrrfs
procedure ctrrfs_; external LibDllPath;
//file name ctrsen
procedure ctrsen_; external LibDllPath;
//file name ctrsna
procedure ctrsna_; external LibDllPath;
//file name ctrsyl
procedure ctrsyl_; external LibDllPath;
//file name ctrti2
procedure ctrti2_; external LibDllPath;
//file name ctrtri
procedure ctrtri_; external LibDllPath;
//file name ctrtrs
procedure ctrtrs_; external LibDllPath;
//file name ctrttf
procedure ctrttf_; external LibDllPath;
//file name ctrttp
procedure ctrttp_; external LibDllPath;
//file name ctzrzf
procedure ctzrzf_; external LibDllPath;
//file name cunbdb
procedure cunbdb_; external LibDllPath;
//file name cunbdb1
procedure cunbdb1_; external LibDllPath;
//file name cunbdb2
procedure cunbdb2_; external LibDllPath;
//file name cunbdb3
procedure cunbdb3_; external LibDllPath;
//file name cunbdb4
procedure cunbdb4_; external LibDllPath;
//file name cunbdb5
procedure cunbdb5_; external LibDllPath;
//file name cunbdb6
procedure cunbdb6_; external LibDllPath;
//file name cuncsd
procedure cuncsd_; external LibDllPath;
//file name cuncsd2by1
procedure cuncsd2by1_; external LibDllPath;
//file name cung2l
procedure cung2l_; external LibDllPath;
//file name cung2r
procedure cung2r_; external LibDllPath;
//file name cungbr
procedure cungbr_; external LibDllPath;
//file name cunghr
procedure cunghr_; external LibDllPath;
//file name cungl2
procedure cungl2_; external LibDllPath;
//file name cunglq
procedure cunglq_; external LibDllPath;
//file name cungql
procedure cungql_; external LibDllPath;
//file name cungqr
procedure cungqr_; external LibDllPath;
//file name cungr2
procedure cungr2_; external LibDllPath;
//file name cungrq
procedure cungrq_; external LibDllPath;
//file name cungtr
procedure cungtr_; external LibDllPath;
//file name cungtsqr
procedure cungtsqr_; external LibDllPath;
//file name cungtsqr_row
procedure cungtsqr_row_; external LibDllPath;
//file name cunhr_col
procedure cunhr_col_; external LibDllPath;
//file name cunm2l
procedure cunm2l_; external LibDllPath;
//file name cunm2r
procedure cunm2r_; external LibDllPath;
//file name cunm22
procedure cunm22_; external LibDllPath;
//file name cunmbr
procedure cunmbr_; external LibDllPath;
//file name cunmhr
procedure cunmhr_; external LibDllPath;
//file name cunml2
procedure cunml2_; external LibDllPath;
//file name cunmlq
procedure cunmlq_; external LibDllPath;
//file name cunmql
procedure cunmql_; external LibDllPath;
//file name cunmqr
procedure cunmqr_; external LibDllPath;
//file name cunmr2
procedure cunmr2_; external LibDllPath;
//file name cunmr3
procedure cunmr3_; external LibDllPath;
//file name cunmrq
procedure cunmrq_; external LibDllPath;
//file name cunmrz
procedure cunmrz_; external LibDllPath;
//file name cunmtr
procedure cunmtr_; external LibDllPath;
//file name cupgtr
procedure cupgtr_; external LibDllPath;
//file name cupmtr
procedure cupmtr_; external LibDllPath;
//file name dbbcsd
procedure dbbcsd_; external LibDllPath;
//file name dbdsdc
procedure dbdsdc_; external LibDllPath;
//file name dbdsqr
procedure dbdsqr_; external LibDllPath;
//file name dbdsvdx
procedure dbdsvdx_; external LibDllPath;
//file name dcombssq
procedure dcombssq_; external LibDllPath;
//file name ddisna
procedure ddisna_; external LibDllPath;
//file name dgbbrd
procedure dgbbrd_; external LibDllPath;
//file name dgbcon
procedure dgbcon_; external LibDllPath;
//file name dgbequ
procedure dgbequ_; external LibDllPath;
//file name dgbequb
procedure dgbequb_; external LibDllPath;
//file name dgbrfs
procedure dgbrfs_; external LibDllPath;
//file name dgbrfsx
procedure dgbrfsx_; external LibDllPath;
//file name dgbsv
procedure dgbsv_; external LibDllPath;
//file name dgbsvx
procedure dgbsvx_; external LibDllPath;
//file name dgbsvxx
procedure dgbsvxx_; external LibDllPath;
//file name dgbtf2
procedure dgbtf2_; external LibDllPath;
//file name dgbtrf
procedure dgbtrf_; external LibDllPath;
//file name dgbtrs
procedure dgbtrs_; external LibDllPath;
//file name dgebak
procedure dgebak_; external LibDllPath;
//file name dgebal
procedure dgebal_; external LibDllPath;
//file name dgebd2
procedure dgebd2_; external LibDllPath;
//file name dgebrd
procedure dgebrd_; external LibDllPath;
//file name dgecon
procedure dgecon_; external LibDllPath;
//file name dgeequ
procedure dgeequ_; external LibDllPath;
//file name dgeequb
procedure dgeequb_; external LibDllPath;
//file name dgees
procedure dgees_; external LibDllPath;
//file name dgeesx
procedure dgeesx_; external LibDllPath;
//file name dgeev
procedure dgeev_; external LibDllPath;
//file name dgeevx
procedure dgeevx_; external LibDllPath;
//file name dgehd2
procedure dgehd2_; external LibDllPath;
//file name dgehrd
procedure dgehrd_; external LibDllPath;
//file name dgejsv
procedure dgejsv_; external LibDllPath;
//file name dgelq
procedure dgelq_; external LibDllPath;
//file name dgelq2
procedure dgelq2_; external LibDllPath;
//file name dgelqf
procedure dgelqf_; external LibDllPath;
//file name dgelqt
procedure dgelqt_; external LibDllPath;
//file name dgelqt3
procedure dgelqt3_; external LibDllPath;
//file name dgels
procedure dgels_; external LibDllPath;
//file name dgelsd
procedure dgelsd_; external LibDllPath;
//file name dgelss
procedure dgelss_; external LibDllPath;
//file name dgelsy
procedure dgelsy_; external LibDllPath;
//file name dgemlq
procedure dgemlq_; external LibDllPath;
//file name dgemlqt
procedure dgemlqt_; external LibDllPath;
//file name dgemqr
procedure dgemqr_; external LibDllPath;
//file name dgemqrt
procedure dgemqrt_; external LibDllPath;
//file name dgeql2
procedure dgeql2_; external LibDllPath;
//file name dgeqlf
procedure dgeqlf_; external LibDllPath;
//file name dgeqp3
procedure dgeqp3_; external LibDllPath;
//file name dgeqr
procedure dgeqr_; external LibDllPath;
//file name dgeqr2
procedure dgeqr2_; external LibDllPath;
//file name dgeqr2p
procedure dgeqr2p_; external LibDllPath;
//file name dgeqrf
procedure dgeqrf_; external LibDllPath;
//file name dgeqrfp
procedure dgeqrfp_; external LibDllPath;
//file name dgeqrt
procedure dgeqrt_; external LibDllPath;
//file name dgeqrt2
procedure dgeqrt2_; external LibDllPath;
//file name dgeqrt3
procedure dgeqrt3_; external LibDllPath;
//file name dgerfs
procedure dgerfs_; external LibDllPath;
//file name dgerfsx
procedure dgerfsx_; external LibDllPath;
//file name dgerq2
procedure dgerq2_; external LibDllPath;
//file name dgerqf
procedure dgerqf_; external LibDllPath;
//file name dgesc2
procedure dgesc2_; external LibDllPath;
//file name dgesdd
procedure dgesdd_; external LibDllPath;
//file name dgesv
procedure dgesv_; external LibDllPath;
//file name dgesvd
procedure dgesvd_; external LibDllPath;
//file name dgesvdq
procedure dgesvdq_; external LibDllPath;
//file name dgesvdx
procedure dgesvdx_; external LibDllPath;
//file name dgesvj
procedure dgesvj_; external LibDllPath;
//file name dgesvx
procedure dgesvx_; external LibDllPath;
//file name dgesvxx
procedure dgesvxx_; external LibDllPath;
//file name dgetc2
procedure dgetc2_; external LibDllPath;
//file name dgetf2
procedure dgetf2_; external LibDllPath;
//file name dgetrf
procedure dgetrf_; external LibDllPath;
//file name dgetrf2
procedure dgetrf2_; external LibDllPath;
//file name dgetri
procedure dgetri_; external LibDllPath;
//file name dgetrs
procedure dgetrs_; external LibDllPath;
//file name dgetsls
procedure dgetsls_; external LibDllPath;
//file name dgetsqrhrt
procedure dgetsqrhrt_; external LibDllPath;
//file name dggbak
procedure dggbak_; external LibDllPath;
//file name dggbal
procedure dggbal_; external LibDllPath;
//file name dgges
procedure dgges_; external LibDllPath;
//file name dgges3
procedure dgges3_; external LibDllPath;
//file name dggesx
procedure dggesx_; external LibDllPath;
//file name dggev
procedure dggev_; external LibDllPath;
//file name dggev3
procedure dggev3_; external LibDllPath;
//file name dggevx
procedure dggevx_; external LibDllPath;
//file name dggglm
procedure dggglm_; external LibDllPath;
//file name dgghd3
procedure dgghd3_; external LibDllPath;
//file name dgghrd
procedure dgghrd_; external LibDllPath;
//file name dgglse
procedure dgglse_; external LibDllPath;
//file name dggqrf
procedure dggqrf_; external LibDllPath;
//file name dggrqf
procedure dggrqf_; external LibDllPath;
//file name dggsvd3
procedure dggsvd3_; external LibDllPath;
//file name dggsvp3
procedure dggsvp3_; external LibDllPath;
//file name dgsvj0
procedure dgsvj0_; external LibDllPath;
//file name dgsvj1
procedure dgsvj1_; external LibDllPath;
//file name dgtcon
procedure dgtcon_; external LibDllPath;
//file name dgtrfs
procedure dgtrfs_; external LibDllPath;
//file name dgtsv
procedure dgtsv_; external LibDllPath;
//file name dgtsvx
procedure dgtsvx_; external LibDllPath;
//file name dgttrf
procedure dgttrf_; external LibDllPath;
//file name dgttrs
procedure dgttrs_; external LibDllPath;
//file name dgtts2
procedure dgtts2_; external LibDllPath;
//file name dhgeqz
procedure dhgeqz_; external LibDllPath;
//file name dhsein
procedure dhsein_; external LibDllPath;
//file name dhseqr
procedure dhseqr_; external LibDllPath;
//file name disnan
function disnan_; external LibDllPath;
//file name dla_gbamv
procedure dla_gbamv_; external LibDllPath;
//file name dla_gbrcond
function dla_gbrcond_; external LibDllPath;
//file name dla_gbrfsx_extended
procedure dla_gbrfsx_extended_; external LibDllPath;
//file name dla_gbrpvgrw
function dla_gbrpvgrw_; external LibDllPath;
//file name dla_geamv
procedure dla_geamv_; external LibDllPath;
//file name dla_gercond
function dla_gercond_; external LibDllPath;
//file name dla_gerfsx_extended
procedure dla_gerfsx_extended_; external LibDllPath;
//file name dla_gerpvgrw
function dla_gerpvgrw_; external LibDllPath;
//file name dla_lin_berr
procedure dla_lin_berr_; external LibDllPath;
//file name dla_porcond
function dla_porcond_; external LibDllPath;
//file name dla_porfsx_extended
procedure dla_porfsx_extended_; external LibDllPath;
//file name dla_porpvgrw
function dla_porpvgrw_; external LibDllPath;
//file name dla_syamv
procedure dla_syamv_; external LibDllPath;
//file name dla_syrcond
function dla_syrcond_; external LibDllPath;
//file name dla_syrfsx_extended
procedure dla_syrfsx_extended_; external LibDllPath;
//file name dla_syrpvgrw
function dla_syrpvgrw_; external LibDllPath;
//file name dla_wwaddw
procedure dla_wwaddw_; external LibDllPath;
//file name dlabad
procedure dlabad_; external LibDllPath;
//file name dlabrd
procedure dlabrd_; external LibDllPath;
//file name dlacn2
procedure dlacn2_; external LibDllPath;
//file name dlacon
procedure dlacon_; external LibDllPath;
//file name dlacpy
procedure dlacpy_; external LibDllPath;
//file name dladiv
procedure dladiv_; external LibDllPath;
//file name dlae2
procedure dlae2_; external LibDllPath;
//file name dlaebz
procedure dlaebz_; external LibDllPath;
//file name dlaed0
procedure dlaed0_; external LibDllPath;
//file name dlaed1
procedure dlaed1_; external LibDllPath;
//file name dlaed2
procedure dlaed2_; external LibDllPath;
//file name dlaed3
procedure dlaed3_; external LibDllPath;
//file name dlaed4
procedure dlaed4_; external LibDllPath;
//file name dlaed5
procedure dlaed5_; external LibDllPath;
//file name dlaed6
procedure dlaed6_; external LibDllPath;
//file name dlaed7
procedure dlaed7_; external LibDllPath;
//file name dlaed8
procedure dlaed8_; external LibDllPath;
//file name dlaed9
procedure dlaed9_; external LibDllPath;
//file name dlaeda
procedure dlaeda_; external LibDllPath;
//file name dlaein
procedure dlaein_; external LibDllPath;
//file name dlaev2
procedure dlaev2_; external LibDllPath;
//file name dlaexc
procedure dlaexc_; external LibDllPath;
//file name dlag2
procedure dlag2_; external LibDllPath;
//file name dlag2s
procedure dlag2s_; external LibDllPath;
//file name dlags2
procedure dlags2_; external LibDllPath;
//file name dlagtf
procedure dlagtf_; external LibDllPath;
//file name dlagtm
procedure dlagtm_; external LibDllPath;
//file name dlagts
procedure dlagts_; external LibDllPath;
//file name dlagv2
procedure dlagv2_; external LibDllPath;
//file name dlahqr
procedure dlahqr_; external LibDllPath;
//file name dlahr2
procedure dlahr2_; external LibDllPath;
//file name dlaic1
procedure dlaic1_; external LibDllPath;
//file name dlaisnan
function dlaisnan_; external LibDllPath;
//file name dlaln2
procedure dlaln2_; external LibDllPath;
//file name dlals0
procedure dlals0_; external LibDllPath;
//file name dlalsa
procedure dlalsa_; external LibDllPath;
//file name dlalsd
procedure dlalsd_; external LibDllPath;
//file name dlamrg
procedure dlamrg_; external LibDllPath;
//file name dlamswlq
procedure dlamswlq_; external LibDllPath;
//file name dlamtsqr
procedure dlamtsqr_; external LibDllPath;
//file name dlaneg
function dlaneg_; external LibDllPath;
//file name dlangb
function dlangb_; external LibDllPath;
//file name dlange
function dlange_; external LibDllPath;
//file name dlangt
function dlangt_; external LibDllPath;
//file name dlanhs
function dlanhs_; external LibDllPath;
//file name dlansb
function dlansb_; external LibDllPath;
//file name dlansf
function dlansf_; external LibDllPath;
//file name dlansp
function dlansp_; external LibDllPath;
//file name dlanst
function dlanst_; external LibDllPath;
//file name dlansy
function dlansy_; external LibDllPath;
//file name dlantb
function dlantb_; external LibDllPath;
//file name dlantp
function dlantp_; external LibDllPath;
//file name dlantr
function dlantr_; external LibDllPath;
//file name dlanv2
procedure dlanv2_; external LibDllPath;
//file name dlaorhr_col_getrfnp
procedure dlaorhr_col_getrfnp_; external LibDllPath;
//file name dlaorhr_col_getrfnp2
procedure dlaorhr_col_getrfnp2_; external LibDllPath;
//file name dlapll
procedure dlapll_; external LibDllPath;
//file name dlapmr
procedure dlapmr_; external LibDllPath;
//file name dlapmt
procedure dlapmt_; external LibDllPath;
//file name dlapy2
function dlapy2_; external LibDllPath;
//file name dlapy3
function dlapy3_; external LibDllPath;
//file name dlaqgb
procedure dlaqgb_; external LibDllPath;
//file name dlaqge
procedure dlaqge_; external LibDllPath;
//file name dlaqp2
procedure dlaqp2_; external LibDllPath;
//file name dlaqps
procedure dlaqps_; external LibDllPath;
//file name dlaqr0
procedure dlaqr0_; external LibDllPath;
//file name dlaqr1
procedure dlaqr1_; external LibDllPath;
//file name dlaqr2
procedure dlaqr2_; external LibDllPath;
//file name dlaqr3
procedure dlaqr3_; external LibDllPath;
//file name dlaqr4
procedure dlaqr4_; external LibDllPath;
//file name dlaqr5
procedure dlaqr5_; external LibDllPath;
//file name dlaqsb
procedure dlaqsb_; external LibDllPath;
//file name dlaqsp
procedure dlaqsp_; external LibDllPath;
//file name dlaqsy
procedure dlaqsy_; external LibDllPath;
//file name dlaqtr
procedure dlaqtr_; external LibDllPath;
//file name dlar1v
procedure dlar1v_; external LibDllPath;
//file name dlar2v
procedure dlar2v_; external LibDllPath;
//file name dlarf
procedure dlarf_; external LibDllPath;
//file name dlarfb
procedure dlarfb_; external LibDllPath;
//file name dlarfb_gett
procedure dlarfb_gett_; external LibDllPath;
//file name dlarfg
procedure dlarfg_; external LibDllPath;
//file name dlarfgp
procedure dlarfgp_; external LibDllPath;
//file name dlarft
procedure dlarft_; external LibDllPath;
//file name dlarfx
procedure dlarfx_; external LibDllPath;
//file name dlarfy
procedure dlarfy_; external LibDllPath;
//file name dlargv
procedure dlargv_; external LibDllPath;
//file name dlarnv
procedure dlarnv_; external LibDllPath;
//file name dlarra
procedure dlarra_; external LibDllPath;
//file name dlarrb
procedure dlarrb_; external LibDllPath;
//file name dlarrc
procedure dlarrc_; external LibDllPath;
//file name dlarrd
procedure dlarrd_; external LibDllPath;
//file name dlarre
procedure dlarre_; external LibDllPath;
//file name dlarrf
procedure dlarrf_; external LibDllPath;
//file name dlarrj
procedure dlarrj_; external LibDllPath;
//file name dlarrk
procedure dlarrk_; external LibDllPath;
//file name dlarrr
procedure dlarrr_; external LibDllPath;
//file name dlarrv
procedure dlarrv_; external LibDllPath;
//file name dlarscl2
procedure dlarscl2_; external LibDllPath;
//file name dlartg
procedure dlartg_; external LibDllPath;
//file name dlartgp
procedure dlartgp_; external LibDllPath;
//file name dlartgs
procedure dlartgs_; external LibDllPath;
//file name dlartv
procedure dlartv_; external LibDllPath;
//file name dlaruv
procedure dlaruv_; external LibDllPath;
//file name dlarz
procedure dlarz_; external LibDllPath;
//file name dlarzb
procedure dlarzb_; external LibDllPath;
//file name dlarzt
procedure dlarzt_; external LibDllPath;
//file name dlas2
procedure dlas2_; external LibDllPath;
//file name dlascl
procedure dlascl_; external LibDllPath;
//file name dlascl2
procedure dlascl2_; external LibDllPath;
//file name dlasd0
procedure dlasd0_; external LibDllPath;
//file name dlasd1
procedure dlasd1_; external LibDllPath;
//file name dlasd2
procedure dlasd2_; external LibDllPath;
//file name dlasd3
procedure dlasd3_; external LibDllPath;
//file name dlasd4
procedure dlasd4_; external LibDllPath;
//file name dlasd5
procedure dlasd5_; external LibDllPath;
//file name dlasd6
procedure dlasd6_; external LibDllPath;
//file name dlasd7
procedure dlasd7_; external LibDllPath;
//file name dlasd8
procedure dlasd8_; external LibDllPath;
//file name dlasda
procedure dlasda_; external LibDllPath;
//file name dlasdq
procedure dlasdq_; external LibDllPath;
//file name dlasdt
procedure dlasdt_; external LibDllPath;
//file name dlaset
procedure dlaset_; external LibDllPath;
//file name dlasq1
procedure dlasq1_; external LibDllPath;
//file name dlasq2
procedure dlasq2_; external LibDllPath;
//file name dlasq3
procedure dlasq3_; external LibDllPath;
//file name dlasq4
procedure dlasq4_; external LibDllPath;
//file name dlasq5
procedure dlasq5_; external LibDllPath;
//file name dlasq6
procedure dlasq6_; external LibDllPath;
//file name dlasr
procedure dlasr_; external LibDllPath;
//file name dlasrt
procedure dlasrt_; external LibDllPath;
//file name dlassq
procedure dlassq_; external LibDllPath;
//file name dlasv2
procedure dlasv2_; external LibDllPath;
//file name dlaswlq
procedure dlaswlq_; external LibDllPath;
//file name dlaswp
procedure dlaswp_; external LibDllPath;
//file name dlasy2
procedure dlasy2_; external LibDllPath;
//file name dlasyf
procedure dlasyf_; external LibDllPath;
//file name dlasyf_aa
procedure dlasyf_aa_; external LibDllPath;
//file name dlasyf_rk
procedure dlasyf_rk_; external LibDllPath;
//file name dlasyf_rook
procedure dlasyf_rook_; external LibDllPath;
//file name dlat2s
procedure dlat2s_; external LibDllPath;
//file name dlatbs
procedure dlatbs_; external LibDllPath;
//file name dlatdf
procedure dlatdf_; external LibDllPath;
//file name dlatps
procedure dlatps_; external LibDllPath;
//file name dlatrd
procedure dlatrd_; external LibDllPath;
//file name dlatrs
procedure dlatrs_; external LibDllPath;
//file name dlatrz
procedure dlatrz_; external LibDllPath;
//file name dlatsqr
procedure dlatsqr_; external LibDllPath;
//file name dlauu2
procedure dlauu2_; external LibDllPath;
//file name dlauum
procedure dlauum_; external LibDllPath;
//file name dopgtr
procedure dopgtr_; external LibDllPath;
//file name dopmtr
procedure dopmtr_; external LibDllPath;
//file name dorbdb
procedure dorbdb_; external LibDllPath;
//file name dorbdb1
procedure dorbdb1_; external LibDllPath;
//file name dorbdb2
procedure dorbdb2_; external LibDllPath;
//file name dorbdb3
procedure dorbdb3_; external LibDllPath;
//file name dorbdb4
procedure dorbdb4_; external LibDllPath;
//file name dorbdb5
procedure dorbdb5_; external LibDllPath;
//file name dorbdb6
procedure dorbdb6_; external LibDllPath;
//file name dorcsd
procedure dorcsd_; external LibDllPath;
//file name dorcsd2by1
procedure dorcsd2by1_; external LibDllPath;
//file name dorg2l
procedure dorg2l_; external LibDllPath;
//file name dorg2r
procedure dorg2r_; external LibDllPath;
//file name dorgbr
procedure dorgbr_; external LibDllPath;
//file name dorghr
procedure dorghr_; external LibDllPath;
//file name dorgl2
procedure dorgl2_; external LibDllPath;
//file name dorglq
procedure dorglq_; external LibDllPath;
//file name dorgql
procedure dorgql_; external LibDllPath;
//file name dorgqr
procedure dorgqr_; external LibDllPath;
//file name dorgr2
procedure dorgr2_; external LibDllPath;
//file name dorgrq
procedure dorgrq_; external LibDllPath;
//file name dorgtr
procedure dorgtr_; external LibDllPath;
//file name dorgtsqr
procedure dorgtsqr_; external LibDllPath;
//file name dorgtsqr_row
procedure dorgtsqr_row_; external LibDllPath;
//file name dorhr_col
procedure dorhr_col_; external LibDllPath;
//file name dorm2l
procedure dorm2l_; external LibDllPath;
//file name dorm2r
procedure dorm2r_; external LibDllPath;
//file name dorm22
procedure dorm22_; external LibDllPath;
//file name dormbr
procedure dormbr_; external LibDllPath;
//file name dormhr
procedure dormhr_; external LibDllPath;
//file name dorml2
procedure dorml2_; external LibDllPath;
//file name dormlq
procedure dormlq_; external LibDllPath;
//file name dormql
procedure dormql_; external LibDllPath;
//file name dormqr
procedure dormqr_; external LibDllPath;
//file name dormr2
procedure dormr2_; external LibDllPath;
//file name dormr3
procedure dormr3_; external LibDllPath;
//file name dormrq
procedure dormrq_; external LibDllPath;
//file name dormrz
procedure dormrz_; external LibDllPath;
//file name dormtr
procedure dormtr_; external LibDllPath;
//file name dpbcon
procedure dpbcon_; external LibDllPath;
//file name dpbequ
procedure dpbequ_; external LibDllPath;
//file name dpbrfs
procedure dpbrfs_; external LibDllPath;
//file name dpbstf
procedure dpbstf_; external LibDllPath;
//file name dpbsv
procedure dpbsv_; external LibDllPath;
//file name dpbsvx
procedure dpbsvx_; external LibDllPath;
//file name dpbtf2
procedure dpbtf2_; external LibDllPath;
//file name dpbtrf
procedure dpbtrf_; external LibDllPath;
//file name dpbtrs
procedure dpbtrs_; external LibDllPath;
//file name dpftrf
procedure dpftrf_; external LibDllPath;
//file name dpftri
procedure dpftri_; external LibDllPath;
//file name dpftrs
procedure dpftrs_; external LibDllPath;
//file name dpocon
procedure dpocon_; external LibDllPath;
//file name dpoequ
procedure dpoequ_; external LibDllPath;
//file name dpoequb
procedure dpoequb_; external LibDllPath;
//file name dporfs
procedure dporfs_; external LibDllPath;
//file name dporfsx
procedure dporfsx_; external LibDllPath;
//file name dposv
procedure dposv_; external LibDllPath;
//file name dposvx
procedure dposvx_; external LibDllPath;
//file name dposvxx
procedure dposvxx_; external LibDllPath;
//file name dpotf2
procedure dpotf2_; external LibDllPath;
//file name dpotrf
procedure dpotrf_; external LibDllPath;
//file name dpotrf2
procedure dpotrf2_; external LibDllPath;
//file name dpotri
procedure dpotri_; external LibDllPath;
//file name dpotrs
procedure dpotrs_; external LibDllPath;
//file name dppcon
procedure dppcon_; external LibDllPath;
//file name dppequ
procedure dppequ_; external LibDllPath;
//file name dpprfs
procedure dpprfs_; external LibDllPath;
//file name dppsv
procedure dppsv_; external LibDllPath;
//file name dppsvx
procedure dppsvx_; external LibDllPath;
//file name dpptrf
procedure dpptrf_; external LibDllPath;
//file name dpptri
procedure dpptri_; external LibDllPath;
//file name dpptrs
procedure dpptrs_; external LibDllPath;
//file name dpstf2
procedure dpstf2_; external LibDllPath;
//file name dpstrf
procedure dpstrf_; external LibDllPath;
//file name dptcon
procedure dptcon_; external LibDllPath;
//file name dpteqr
procedure dpteqr_; external LibDllPath;
//file name dptrfs
procedure dptrfs_; external LibDllPath;
//file name dptsv
procedure dptsv_; external LibDllPath;
//file name dptsvx
procedure dptsvx_; external LibDllPath;
//file name dpttrf
procedure dpttrf_; external LibDllPath;
//file name dpttrs
procedure dpttrs_; external LibDllPath;
//file name dptts2
procedure dptts2_; external LibDllPath;
//file name drscl
procedure drscl_; external LibDllPath;
//file name dsb2st_kernels
procedure  dsb2st_kernels; external LibDllPath;
//file name dsbev
procedure dsbev_; external LibDllPath;
//file name dsbev_2stage
procedure dsbev_2stage_; external LibDllPath;
//file name dsbevd
procedure dsbevd_; external LibDllPath;
//file name dsbevd_2stage
procedure dsbevd_2stage_; external LibDllPath;
//file name dsbevx
procedure dsbevx_; external LibDllPath;
//file name dsbevx_2stage
procedure dsbevx_2stage_; external LibDllPath;
//file name dsbgst
procedure dsbgst_; external LibDllPath;
//file name dsbgv
procedure dsbgv_; external LibDllPath;
//file name dsbgvd
procedure dsbgvd_; external LibDllPath;
//file name dsbgvx
procedure dsbgvx_; external LibDllPath;
//file name dsbtrd
procedure dsbtrd_; external LibDllPath;
//file name dsfrk
procedure dsfrk_; external LibDllPath;
//file name dsgesv
procedure dsgesv_; external LibDllPath;
//file name dspcon
procedure dspcon_; external LibDllPath;
//file name dspev
procedure dspev_; external LibDllPath;
//file name dspevd
procedure dspevd_; external LibDllPath;
//file name dspevx
procedure dspevx_; external LibDllPath;
//file name dspgst
procedure dspgst_; external LibDllPath;
//file name dspgv
procedure dspgv_; external LibDllPath;
//file name dspgvd
procedure dspgvd_; external LibDllPath;
//file name dspgvx
procedure dspgvx_; external LibDllPath;
//file name dsposv
procedure dsposv_; external LibDllPath;
//file name dsprfs
procedure dsprfs_; external LibDllPath;
//file name dspsv
procedure dspsv_; external LibDllPath;
//file name dspsvx
procedure dspsvx_; external LibDllPath;
//file name dsptrd
procedure dsptrd_; external LibDllPath;
//file name dsptrf
procedure dsptrf_; external LibDllPath;
//file name dsptri
procedure dsptri_; external LibDllPath;
//file name dsptrs
procedure dsptrs_; external LibDllPath;
//file name dstebz
procedure dstebz_; external LibDllPath;
//file name dstedc
procedure dstedc_; external LibDllPath;
//file name dstegr
procedure dstegr_; external LibDllPath;
//file name dstein
procedure dstein_; external LibDllPath;
//file name dstemr
procedure dstemr_; external LibDllPath;
//file name dsteqr
procedure dsteqr_; external LibDllPath;
//file name dsterf
procedure dsterf_; external LibDllPath;
//file name dstev
procedure dstev_; external LibDllPath;
//file name dstevd
procedure dstevd_; external LibDllPath;
//file name dstevr
procedure dstevr_; external LibDllPath;
//file name dstevx
procedure dstevx_; external LibDllPath;
//file name dsycon
procedure dsycon_; external LibDllPath;
//file name dsycon_3
procedure dsycon_3_; external LibDllPath;
//file name dsycon_rook
procedure dsycon_rook_; external LibDllPath;
//file name dsyconv
procedure dsyconv_; external LibDllPath;
//file name dsyconvf
procedure dsyconvf_; external LibDllPath;
//file name dsyconvf_rook
procedure dsyconvf_rook_; external LibDllPath;
//file name dsyequb
procedure dsyequb_; external LibDllPath;
//file name dsyev
procedure dsyev_; external LibDllPath;
//file name dsyev_2stage
procedure dsyev_2stage_; external LibDllPath;
//file name dsyevd
procedure dsyevd_; external LibDllPath;
//file name dsyevd_2stage
procedure dsyevd_2stage_; external LibDllPath;
//file name dsyevr
procedure dsyevr_; external LibDllPath;
//file name dsyevr_2stage
procedure dsyevr_2stage_; external LibDllPath;
//file name dsyevx
procedure dsyevx_; external LibDllPath;
//file name dsyevx_2stage
procedure dsyevx_2stage_; external LibDllPath;
//file name dsygs2
procedure dsygs2_; external LibDllPath;
//file name dsygst
procedure dsygst_; external LibDllPath;
//file name dsygv
procedure dsygv_; external LibDllPath;
//file name dsygv_2stage
procedure dsygv_2stage_; external LibDllPath;
//file name dsygvd
procedure dsygvd_; external LibDllPath;
//file name dsygvx
procedure dsygvx_; external LibDllPath;
//file name dsyrfs
procedure dsyrfs_; external LibDllPath;
//file name dsyrfsx
procedure dsyrfsx_; external LibDllPath;
//file name dsysv
procedure dsysv_; external LibDllPath;
//file name dsysv_aa
procedure dsysv_aa_; external LibDllPath;
//file name dsysv_aa_2stage
procedure dsysv_aa_2stage_; external LibDllPath;
//file name dsysv_rk
procedure dsysv_rk_; external LibDllPath;
//file name dsysv_rook
procedure dsysv_rook_; external LibDllPath;
//file name dsysvx
procedure dsysvx_; external LibDllPath;
//file name dsysvxx
procedure dsysvxx_; external LibDllPath;
//file name dsyswapr
procedure dsyswapr_; external LibDllPath;
//file name dsytd2
procedure dsytd2_; external LibDllPath;
//file name dsytf2
procedure dsytf2_; external LibDllPath;
//file name dsytf2_rk
procedure dsytf2_rk_; external LibDllPath;
//file name dsytf2_rook
procedure dsytf2_rook_; external LibDllPath;
//file name dsytrd
procedure dsytrd_; external LibDllPath;
//file name dsytrd_2stage
procedure dsytrd_2stage_; external LibDllPath;
//file name dsytrd_sb2st
procedure dsytrd_sb2st_; external LibDllPath;
//file name dsytrd_sy2sb
procedure dsytrd_sy2sb_; external LibDllPath;
//file name dsytrf
procedure dsytrf_; external LibDllPath;
//file name dsytrf_aa
procedure dsytrf_aa_; external LibDllPath;
//file name dsytrf_aa_2stage
procedure dsytrf_aa_2stage_; external LibDllPath;
//file name dsytrf_rk
procedure dsytrf_rk_; external LibDllPath;
//file name dsytrf_rook
procedure dsytrf_rook_; external LibDllPath;
//file name dsytri
procedure dsytri_; external LibDllPath;
//file name dsytri_3
procedure dsytri_3_; external LibDllPath;
//file name dsytri_3x
procedure dsytri_3x_; external LibDllPath;
//file name dsytri_rook
procedure dsytri_rook_; external LibDllPath;
//file name dsytri2
procedure dsytri2_; external LibDllPath;
//file name dsytri2x
procedure dsytri2x_; external LibDllPath;
//file name dsytrs
procedure dsytrs_; external LibDllPath;
//file name dsytrs_3
procedure dsytrs_3_; external LibDllPath;
//file name dsytrs_aa
procedure dsytrs_aa_; external LibDllPath;
//file name dsytrs_aa_2stage
procedure dsytrs_aa_2stage_; external LibDllPath;
//file name dsytrs_rook
procedure dsytrs_rook_; external LibDllPath;
//file name dsytrs2
procedure dsytrs2_; external LibDllPath;
//file name dtbcon
procedure dtbcon_; external LibDllPath;
//file name dtbrfs
procedure dtbrfs_; external LibDllPath;
//file name dtbtrs
procedure dtbtrs_; external LibDllPath;
//file name dtfsm
procedure dtfsm_; external LibDllPath;
//file name dtftri
procedure dtftri_; external LibDllPath;
//file name dtfttp
procedure dtfttp_; external LibDllPath;
//file name dtfttr
procedure dtfttr_; external LibDllPath;
//file name dtgevc
procedure dtgevc_; external LibDllPath;
//file name dtgex2
procedure dtgex2_; external LibDllPath;
//file name dtgexc
procedure dtgexc_; external LibDllPath;
//file name dtgsen
procedure dtgsen_; external LibDllPath;
//file name dtgsja
procedure dtgsja_; external LibDllPath;
//file name dtgsna
procedure dtgsna_; external LibDllPath;
//file name dtgsy2
procedure dtgsy2_; external LibDllPath;
//file name dtgsyl
procedure dtgsyl_; external LibDllPath;
//file name dtpcon
procedure dtpcon_; external LibDllPath;
//file name dtplqt
procedure dtplqt_; external LibDllPath;
//file name dtplqt2
procedure dtplqt2_; external LibDllPath;
//file name dtpmlqt
procedure dtpmlqt_; external LibDllPath;
//file name dtpmqrt
procedure dtpmqrt_; external LibDllPath;
//file name dtpqrt
procedure dtpqrt_; external LibDllPath;
//file name dtpqrt2
procedure dtpqrt2_; external LibDllPath;
//file name dtprfb
procedure dtprfb_; external LibDllPath;
//file name dtprfs
procedure dtprfs_; external LibDllPath;
//file name dtptri
procedure dtptri_; external LibDllPath;
//file name dtptrs
procedure dtptrs_; external LibDllPath;
//file name dtpttf
procedure dtpttf_; external LibDllPath;
//file name dtpttr
procedure dtpttr_; external LibDllPath;
//file name dtrcon
procedure dtrcon_; external LibDllPath;
//file name dtrevc
procedure dtrevc_; external LibDllPath;
//file name dtrevc3
procedure dtrevc3_; external LibDllPath;
//file name dtrexc
procedure dtrexc_; external LibDllPath;
//file name dtrrfs
procedure dtrrfs_; external LibDllPath;
//file name dtrsen
procedure dtrsen_; external LibDllPath;
//file name dtrsna
procedure dtrsna_; external LibDllPath;
//file name dtrsyl
procedure dtrsyl_; external LibDllPath;
//file name dtrti2
procedure dtrti2_; external LibDllPath;
//file name dtrtri
procedure dtrtri_; external LibDllPath;
//file name dtrtrs
procedure dtrtrs_; external LibDllPath;
//file name dtrttf
procedure dtrttf_; external LibDllPath;
//file name dtrttp
procedure dtrttp_; external LibDllPath;
//file name dtzrzf
procedure dtzrzf_; external LibDllPath;
//file name dzsum1
function dzsum1_; external LibDllPath;
//file name icmax1
function icmax1_; external LibDllPath;
//file name ieeeck
function ieeeck_; external LibDllPath;
//file name ilaclc
function ilaclc_; external LibDllPath;
//file name ilaclr
function ilaclr_; external LibDllPath;
//file name iladiag
function iladiag_; external LibDllPath;
//file name iladlc
function iladlc_; external LibDllPath;
//file name iladlr
function iladlr_; external LibDllPath;
//file name ilaenv
function ilaenv_; external LibDllPath;
//file name ilaenv2stage
function ilaenv2stage_; external LibDllPath;
//file name ilaprec
function ilaprec_; external LibDllPath;
//file name ilaslc
function ilaslc_; external LibDllPath;
//file name ilaslr
function ilaslr_; external LibDllPath;
//file name ilatrans
function ilatrans_; external LibDllPath;
//file name ilauplo
function ilauplo_; external LibDllPath;
//file name ilazlc
function ilazlc_; external LibDllPath;
//file name ilazlr
function ilazlr_; external LibDllPath;
//file name iparam2stage
function iparam2stage_; external LibDllPath;
//file name iparmq
function iparmq_; external LibDllPath;
//file name izmax1
function izmax1_; external LibDllPath;
//file name lsamen
function lsamen_; external LibDllPath;
//file name sbbcsd
procedure sbbcsd_; external LibDllPath;
//file name sbdsdc
procedure sbdsdc_; external LibDllPath;
//file name sbdsqr
procedure sbdsqr_; external LibDllPath;
//file name sbdsvdx
procedure sbdsvdx_; external LibDllPath;
//file name scombssq
procedure scombssq_; external LibDllPath;
//file name scsum1
function scsum1_; external LibDllPath;
//file name sdisna
procedure sdisna_; external LibDllPath;
//file name sgbbrd
procedure sgbbrd_; external LibDllPath;
//file name sgbcon
procedure sgbcon_; external LibDllPath;
//file name sgbequ
procedure sgbequ_; external LibDllPath;
//file name sgbequb
procedure sgbequb_; external LibDllPath;
//file name sgbrfs
procedure sgbrfs_; external LibDllPath;
//file name sgbrfsx
procedure sgbrfsx_; external LibDllPath;
//file name sgbsv
procedure sgbsv_; external LibDllPath;
//file name sgbsvx
procedure sgbsvx_; external LibDllPath;
//file name sgbsvxx
procedure sgbsvxx_; external LibDllPath;
//file name sgbtf2
procedure sgbtf2_; external LibDllPath;
//file name sgbtrf
procedure sgbtrf_; external LibDllPath;
//file name sgbtrs
procedure sgbtrs_; external LibDllPath;
//file name sgebak
procedure sgebak_; external LibDllPath;
//file name sgebal
procedure sgebal_; external LibDllPath;
//file name sgebd2
procedure sgebd2_; external LibDllPath;
//file name sgebrd
procedure sgebrd_; external LibDllPath;
//file name sgecon
procedure sgecon_; external LibDllPath;
//file name sgeequ
procedure sgeequ_; external LibDllPath;
//file name sgeequb
procedure sgeequb_; external LibDllPath;
//file name sgees
procedure sgees_; external LibDllPath;
//file name sgeesx
procedure sgeesx_; external LibDllPath;
//file name sgeev
procedure sgeev_; external LibDllPath;
//file name sgeevx
procedure sgeevx_; external LibDllPath;
//file name sgehd2
procedure sgehd2_; external LibDllPath;
//file name sgehrd
procedure sgehrd_; external LibDllPath;
//file name sgejsv
procedure sgejsv_; external LibDllPath;
//file name sgelq
procedure sgelq_; external LibDllPath;
//file name sgelq2
procedure sgelq2_; external LibDllPath;
//file name sgelqf
procedure sgelqf_; external LibDllPath;
//file name sgelqt
procedure sgelqt_; external LibDllPath;
//file name sgelqt3
procedure sgelqt3_; external LibDllPath;
//file name sgels
procedure sgels_; external LibDllPath;
//file name sgelsd
procedure sgelsd_; external LibDllPath;
//file name sgelss
procedure sgelss_; external LibDllPath;
//file name sgelsy
procedure sgelsy_; external LibDllPath;
//file name sgemlq
procedure sgemlq_; external LibDllPath;
//file name sgemlqt
procedure sgemlqt_; external LibDllPath;
//file name sgemqr
procedure sgemqr_; external LibDllPath;
//file name sgemqrt
procedure sgemqrt_; external LibDllPath;
//file name sgeql2
procedure sgeql2_; external LibDllPath;
//file name sgeqlf
procedure sgeqlf_; external LibDllPath;
//file name sgeqp3
procedure sgeqp3_; external LibDllPath;
//file name sgeqr
procedure sgeqr_; external LibDllPath;
//file name sgeqr2
procedure sgeqr2_; external LibDllPath;
//file name sgeqr2p
procedure sgeqr2p_; external LibDllPath;
//file name sgeqrf
procedure sgeqrf_; external LibDllPath;
//file name sgeqrfp
procedure sgeqrfp_; external LibDllPath;
//file name sgeqrt
procedure sgeqrt_; external LibDllPath;
//file name sgeqrt2
procedure sgeqrt2_; external LibDllPath;
//file name sgeqrt3
procedure sgeqrt3_; external LibDllPath;
//file name sgerfs
procedure sgerfs_; external LibDllPath;
//file name sgerfsx
procedure sgerfsx_; external LibDllPath;
//file name sgerq2
procedure sgerq2_; external LibDllPath;
//file name sgerqf
procedure sgerqf_; external LibDllPath;
//file name sgesc2
procedure sgesc2_; external LibDllPath;
//file name sgesdd
procedure sgesdd_; external LibDllPath;
//file name sgesv
procedure sgesv_; external LibDllPath;
//file name sgesvd
procedure sgesvd_; external LibDllPath;
//file name sgesvdq
procedure sgesvdq_; external LibDllPath;
//file name sgesvdx
procedure sgesvdx_; external LibDllPath;
//file name sgesvj
procedure sgesvj_; external LibDllPath;
//file name sgesvx
procedure sgesvx_; external LibDllPath;
//file name sgesvxx
procedure sgesvxx_; external LibDllPath;
//file name sgetc2
procedure sgetc2_; external LibDllPath;
//file name sgetf2
procedure sgetf2_; external LibDllPath;
//file name sgetrf
procedure sgetrf_; external LibDllPath;
//file name sgetrf2
procedure sgetrf2_; external LibDllPath;
//file name sgetri
procedure sgetri_; external LibDllPath;
//file name sgetrs
procedure sgetrs_; external LibDllPath;
//file name sgetsls
procedure sgetsls_; external LibDllPath;
//file name sgetsqrhrt
procedure sgetsqrhrt_; external LibDllPath;
//file name sggbak
procedure sggbak_; external LibDllPath;
//file name sggbal
procedure sggbal_; external LibDllPath;
//file name sgges
procedure sgges_; external LibDllPath;
//file name sgges3
procedure sgges3_; external LibDllPath;
//file name sggesx
procedure sggesx_; external LibDllPath;
//file name sggev
procedure sggev_; external LibDllPath;
//file name sggev3
procedure sggev3_; external LibDllPath;
//file name sggevx
procedure sggevx_; external LibDllPath;
//file name sggglm
procedure sggglm_; external LibDllPath;
//file name sgghd3
procedure sgghd3_; external LibDllPath;
//file name sgghrd
procedure sgghrd_; external LibDllPath;
//file name sgglse
procedure sgglse_; external LibDllPath;
//file name sggqrf
procedure sggqrf_; external LibDllPath;
//file name sggrqf
procedure sggrqf_; external LibDllPath;
//file name sggsvd3
procedure sggsvd3_; external LibDllPath;
//file name sggsvp3
procedure sggsvp3_; external LibDllPath;
//file name sgsvj0
procedure sgsvj0_; external LibDllPath;
//file name sgsvj1
procedure sgsvj1_; external LibDllPath;
//file name sgtcon
procedure sgtcon_; external LibDllPath;
//file name sgtrfs
procedure sgtrfs_; external LibDllPath;
//file name sgtsv
procedure sgtsv_; external LibDllPath;
//file name sgtsvx
procedure sgtsvx_; external LibDllPath;
//file name sgttrf
procedure sgttrf_; external LibDllPath;
//file name sgttrs
procedure sgttrs_; external LibDllPath;
//file name sgtts2
procedure sgtts2_; external LibDllPath;
//file name shgeqz
procedure shgeqz_; external LibDllPath;
//file name shsein
procedure shsein_; external LibDllPath;
//file name shseqr
procedure shseqr_; external LibDllPath;
//file name sisnan
function sisnan_; external LibDllPath;
//file name sla_gbamv
procedure sla_gbamv_; external LibDllPath;
//file name sla_gbrcond
function sla_gbrcond_; external LibDllPath;
//file name sla_gbrfsx_extended
procedure sla_gbrfsx_extended_; external LibDllPath;
//file name sla_gbrpvgrw
function sla_gbrpvgrw_; external LibDllPath;
//file name sla_geamv
procedure sla_geamv_; external LibDllPath;
//file name sla_gercond
function sla_gercond_; external LibDllPath;
//file name sla_gerfsx_extended
procedure sla_gerfsx_extended_; external LibDllPath;
//file name sla_gerpvgrw
function sla_gerpvgrw_; external LibDllPath;
//file name sla_lin_berr
procedure sla_lin_berr_; external LibDllPath;
//file name sla_porcond
function sla_porcond_; external LibDllPath;
//file name sla_porfsx_extended
procedure sla_porfsx_extended_; external LibDllPath;
//file name sla_porpvgrw
function sla_porpvgrw_; external LibDllPath;
//file name sla_syamv
procedure sla_syamv_; external LibDllPath;
//file name sla_syrcond
function sla_syrcond_; external LibDllPath;
//file name sla_syrfsx_extended
procedure sla_syrfsx_extended_; external LibDllPath;
//file name sla_syrpvgrw
function sla_syrpvgrw_; external LibDllPath;
//file name sla_wwaddw
procedure sla_wwaddw_; external LibDllPath;
//file name slabad
procedure slabad_; external LibDllPath;
//file name slabrd
procedure slabrd_; external LibDllPath;
//file name slacn2
procedure slacn2_; external LibDllPath;
//file name slacon
procedure slacon_; external LibDllPath;
//file name slacpy
procedure slacpy_; external LibDllPath;
//file name sladiv
procedure sladiv_; external LibDllPath;
//file name slae2
procedure slae2_; external LibDllPath;
//file name slaebz
procedure slaebz_; external LibDllPath;
//file name slaed0
procedure slaed0_; external LibDllPath;
//file name slaed1
procedure slaed1_; external LibDllPath;
//file name slaed2
procedure slaed2_; external LibDllPath;
//file name slaed3
procedure slaed3_; external LibDllPath;
//file name slaed4
procedure slaed4_; external LibDllPath;
//file name slaed5
procedure slaed5_; external LibDllPath;
//file name slaed6
procedure slaed6_; external LibDllPath;
//file name slaed7
procedure slaed7_; external LibDllPath;
//file name slaed8
procedure slaed8_; external LibDllPath;
//file name slaed9
procedure slaed9_; external LibDllPath;
//file name slaeda
procedure slaeda_; external LibDllPath;
//file name slaein
procedure slaein_; external LibDllPath;
//file name slaev2
procedure slaev2_; external LibDllPath;
//file name slaexc
procedure slaexc_; external LibDllPath;
//file name slag2
procedure slag2_; external LibDllPath;
//file name slag2d
procedure slag2d_; external LibDllPath;
//file name slags2
procedure slags2_; external LibDllPath;
//file name slagtf
procedure slagtf_; external LibDllPath;
//file name slagtm
procedure slagtm_; external LibDllPath;
//file name slagts
procedure slagts_; external LibDllPath;
//file name slagv2
procedure slagv2_; external LibDllPath;
//file name slahqr
procedure slahqr_; external LibDllPath;
//file name slahr2
procedure slahr2_; external LibDllPath;
//file name slaic1
procedure slaic1_; external LibDllPath;
//file name slaisnan
function slaisnan_; external LibDllPath;
//file name slaln2
procedure slaln2_; external LibDllPath;
//file name slals0
procedure slals0_; external LibDllPath;
//file name slalsa
procedure slalsa_; external LibDllPath;
//file name slalsd
procedure slalsd_; external LibDllPath;
//file name slamrg
procedure slamrg_; external LibDllPath;
//file name slamswlq
procedure slamswlq_; external LibDllPath;
//file name slamtsqr
procedure slamtsqr_; external LibDllPath;
//file name slaneg
function slaneg_; external LibDllPath;
//file name slangb
function slangb_; external LibDllPath;
//file name slange
function slange_; external LibDllPath;
//file name slangt
function slangt_; external LibDllPath;
//file name slanhs
function slanhs_; external LibDllPath;
//file name slansb
function slansb_; external LibDllPath;
//file name slansf
function slansf_; external LibDllPath;
//file name slansp
function slansp_; external LibDllPath;
//file name slanst
function slanst_; external LibDllPath;
//file name slansy
function slansy_; external LibDllPath;
//file name slantb
function slantb_; external LibDllPath;
//file name slantp
function slantp_; external LibDllPath;
//file name slantr
function slantr_; external LibDllPath;
//file name slanv2
procedure slanv2_; external LibDllPath;
//file name slaorhr_col_getrfnp
procedure slaorhr_col_getrfnp_; external LibDllPath;
//file name slaorhr_col_getrfnp2
procedure slaorhr_col_getrfnp2_; external LibDllPath;
//file name slapll
procedure slapll_; external LibDllPath;
//file name slapmr
procedure slapmr_; external LibDllPath;
//file name slapmt
procedure slapmt_; external LibDllPath;
//file name slapy2
function slapy2_; external LibDllPath;
//file name slapy3
function slapy3_; external LibDllPath;
//file name slaqgb
procedure slaqgb_; external LibDllPath;
//file name slaqge
procedure slaqge_; external LibDllPath;
//file name slaqp2
procedure slaqp2_; external LibDllPath;
//file name slaqps
procedure slaqps_; external LibDllPath;
//file name slaqr0
procedure slaqr0_; external LibDllPath;
//file name slaqr1
procedure slaqr1_; external LibDllPath;
//file name slaqr2
procedure slaqr2_; external LibDllPath;
//file name slaqr3
procedure slaqr3_; external LibDllPath;
//file name slaqr4
procedure slaqr4_; external LibDllPath;
//file name slaqr5
procedure slaqr5_; external LibDllPath;
//file name slaqsb
procedure slaqsb_; external LibDllPath;
//file name slaqsp
procedure slaqsp_; external LibDllPath;
//file name slaqsy
procedure slaqsy_; external LibDllPath;
//file name slaqtr
procedure slaqtr_; external LibDllPath;
//file name slar1v
procedure slar1v_; external LibDllPath;
//file name slar2v
procedure slar2v_; external LibDllPath;
//file name slarf
procedure slarf_; external LibDllPath;
//file name slarfb
procedure slarfb_; external LibDllPath;
//file name slarfb_gett
procedure slarfb_gett_; external LibDllPath;
//file name slarfg
procedure slarfg_; external LibDllPath;
//file name slarfgp
procedure slarfgp_; external LibDllPath;
//file name slarft
procedure slarft_; external LibDllPath;
//file name slarfx
procedure slarfx_; external LibDllPath;
//file name slarfy
procedure slarfy_; external LibDllPath;
//file name slargv
procedure slargv_; external LibDllPath;
//file name slarnv
procedure slarnv_; external LibDllPath;
//file name slarra
procedure slarra_; external LibDllPath;
//file name slarrb
procedure slarrb_; external LibDllPath;
//file name slarrc
procedure slarrc_; external LibDllPath;
//file name slarrd
procedure slarrd_; external LibDllPath;
//file name slarre
procedure slarre_; external LibDllPath;
//file name slarrf
procedure slarrf_; external LibDllPath;
//file name slarrj
procedure slarrj_; external LibDllPath;
//file name slarrk
procedure slarrk_; external LibDllPath;
//file name slarrr
procedure slarrr_; external LibDllPath;
//file name slarrv
procedure slarrv_; external LibDllPath;
//file name slarscl2
procedure slarscl2_; external LibDllPath;
//file name slartg
procedure slartg_; external LibDllPath;
//file name slartgp
procedure slartgp_; external LibDllPath;
//file name slartgs
procedure slartgs_; external LibDllPath;
//file name slartv
procedure slartv_; external LibDllPath;
//file name slaruv
procedure slaruv_; external LibDllPath;
//file name slarz
procedure slarz_; external LibDllPath;
//file name slarzb
procedure slarzb_; external LibDllPath;
//file name slarzt
procedure slarzt_; external LibDllPath;
//file name slas2
procedure slas2_; external LibDllPath;
//file name slascl
procedure slascl_; external LibDllPath;
//file name slascl2
procedure slascl2_; external LibDllPath;
//file name slasd0
procedure slasd0_; external LibDllPath;
//file name slasd1
procedure slasd1_; external LibDllPath;
//file name slasd2
procedure slasd2_; external LibDllPath;
//file name slasd3
procedure slasd3_; external LibDllPath;
//file name slasd4
procedure slasd4_; external LibDllPath;
//file name slasd5
procedure slasd5_; external LibDllPath;
//file name slasd6
procedure slasd6_; external LibDllPath;
//file name slasd7
procedure slasd7_; external LibDllPath;
//file name slasd8
procedure slasd8_; external LibDllPath;
//file name slasda
procedure slasda_; external LibDllPath;
//file name slasdq
procedure slasdq_; external LibDllPath;
//file name slasdt
procedure slasdt_; external LibDllPath;
//file name slaset
procedure slaset_; external LibDllPath;
//file name slasq1
procedure slasq1_; external LibDllPath;
//file name slasq2
procedure slasq2_; external LibDllPath;
//file name slasq3
procedure slasq3_; external LibDllPath;
//file name slasq4
procedure slasq4_; external LibDllPath;
//file name slasq5
procedure slasq5_; external LibDllPath;
//file name slasq6
procedure slasq6_; external LibDllPath;
//file name slasr
procedure slasr_; external LibDllPath;
//file name slasrt
procedure slasrt_; external LibDllPath;
//file name slassq
procedure slassq_; external LibDllPath;
//file name slasv2
procedure slasv2_; external LibDllPath;
//file name slaswlq
procedure slaswlq_; external LibDllPath;
//file name slaswp
procedure slaswp_; external LibDllPath;
//file name slasy2
procedure slasy2_; external LibDllPath;
//file name slasyf
procedure slasyf_; external LibDllPath;
//file name slasyf_aa
procedure slasyf_aa_; external LibDllPath;
//file name slasyf_rk
procedure slasyf_rk_; external LibDllPath;
//file name slasyf_rook
procedure slasyf_rook_; external LibDllPath;
//file name slatbs
procedure slatbs_; external LibDllPath;
//file name slatdf
procedure slatdf_; external LibDllPath;
//file name slatps
procedure slatps_; external LibDllPath;
//file name slatrd
procedure slatrd_; external LibDllPath;
//file name slatrs
procedure slatrs_; external LibDllPath;
//file name slatrz
procedure slatrz_; external LibDllPath;
//file name slatsqr
procedure slatsqr_; external LibDllPath;
//file name slauu2
procedure slauu2_; external LibDllPath;
//file name slauum
procedure slauum_; external LibDllPath;
//file name sopgtr
procedure sopgtr_; external LibDllPath;
//file name sopmtr
procedure sopmtr_; external LibDllPath;
//file name sorbdb
procedure sorbdb_; external LibDllPath;
//file name sorbdb1
procedure sorbdb1_; external LibDllPath;
//file name sorbdb2
procedure sorbdb2_; external LibDllPath;
//file name sorbdb3
procedure sorbdb3_; external LibDllPath;
//file name sorbdb4
procedure sorbdb4_; external LibDllPath;
//file name sorbdb5
procedure sorbdb5_; external LibDllPath;
//file name sorbdb6
procedure sorbdb6_; external LibDllPath;
//file name sorcsd
procedure sorcsd_; external LibDllPath;
//file name sorcsd2by1
procedure sorcsd2by1_; external LibDllPath;
//file name sorg2l
procedure sorg2l_; external LibDllPath;
//file name sorg2r
procedure sorg2r_; external LibDllPath;
//file name sorgbr
procedure sorgbr_; external LibDllPath;
//file name sorghr
procedure sorghr_; external LibDllPath;
//file name sorgl2
procedure sorgl2_; external LibDllPath;
//file name sorglq
procedure sorglq_; external LibDllPath;
//file name sorgql
procedure sorgql_; external LibDllPath;
//file name sorgqr
procedure sorgqr_; external LibDllPath;
//file name sorgr2
procedure sorgr2_; external LibDllPath;
//file name sorgrq
procedure sorgrq_; external LibDllPath;
//file name sorgtr
procedure sorgtr_; external LibDllPath;
//file name sorgtsqr
procedure sorgtsqr_; external LibDllPath;
//file name sorgtsqr_row
procedure sorgtsqr_row_; external LibDllPath;
//file name sorhr_col
procedure sorhr_col_; external LibDllPath;
//file name sorm2l
procedure sorm2l_; external LibDllPath;
//file name sorm2r
procedure sorm2r_; external LibDllPath;
//file name sorm22
procedure sorm22_; external LibDllPath;
//file name sormbr
procedure sormbr_; external LibDllPath;
//file name sormhr
procedure sormhr_; external LibDllPath;
//file name sorml2
procedure sorml2_; external LibDllPath;
//file name sormlq
procedure sormlq_; external LibDllPath;
//file name sormql
procedure sormql_; external LibDllPath;
//file name sormqr
procedure sormqr_; external LibDllPath;
//file name sormr2
procedure sormr2_; external LibDllPath;
//file name sormr3
procedure sormr3_; external LibDllPath;
//file name sormrq
procedure sormrq_; external LibDllPath;
//file name sormrz
procedure sormrz_; external LibDllPath;
//file name sormtr
procedure sormtr_; external LibDllPath;
//file name spbcon
procedure spbcon_; external LibDllPath;
//file name spbequ
procedure spbequ_; external LibDllPath;
//file name spbrfs
procedure spbrfs_; external LibDllPath;
//file name spbstf
procedure spbstf_; external LibDllPath;
//file name spbsv
procedure spbsv_; external LibDllPath;
//file name spbsvx
procedure spbsvx_; external LibDllPath;
//file name spbtf2
procedure spbtf2_; external LibDllPath;
//file name spbtrf
procedure spbtrf_; external LibDllPath;
//file name spbtrs
procedure spbtrs_; external LibDllPath;
//file name spftrf
procedure spftrf_; external LibDllPath;
//file name spftri
procedure spftri_; external LibDllPath;
//file name spftrs
procedure spftrs_; external LibDllPath;
//file name spocon
procedure spocon_; external LibDllPath;
//file name spoequ
procedure spoequ_; external LibDllPath;
//file name spoequb
procedure spoequb_; external LibDllPath;
//file name sporfs
procedure sporfs_; external LibDllPath;
//file name sporfsx
procedure sporfsx_; external LibDllPath;
//file name sposv
procedure sposv_; external LibDllPath;
//file name sposvx
procedure sposvx_; external LibDllPath;
//file name sposvxx
procedure sposvxx_; external LibDllPath;
//file name spotf2
procedure spotf2_; external LibDllPath;
//file name spotrf
procedure spotrf_; external LibDllPath;
//file name spotrf2
procedure spotrf2_; external LibDllPath;
//file name spotri
procedure spotri_; external LibDllPath;
//file name spotrs
procedure spotrs_; external LibDllPath;
//file name sppcon
procedure sppcon_; external LibDllPath;
//file name sppequ
procedure sppequ_; external LibDllPath;
//file name spprfs
procedure spprfs_; external LibDllPath;
//file name sppsv
procedure sppsv_; external LibDllPath;
//file name sppsvx
procedure sppsvx_; external LibDllPath;
//file name spptrf
procedure spptrf_; external LibDllPath;
//file name spptri
procedure spptri_; external LibDllPath;
//file name spptrs
procedure spptrs_; external LibDllPath;
//file name spstf2
procedure spstf2_; external LibDllPath;
//file name spstrf
procedure spstrf_; external LibDllPath;
//file name sptcon
procedure sptcon_; external LibDllPath;
//file name spteqr
procedure spteqr_; external LibDllPath;
//file name sptrfs
procedure sptrfs_; external LibDllPath;
//file name sptsv
procedure sptsv_; external LibDllPath;
//file name sptsvx
procedure sptsvx_; external LibDllPath;
//file name spttrf
procedure spttrf_; external LibDllPath;
//file name spttrs
procedure spttrs_; external LibDllPath;
//file name sptts2
procedure sptts2_; external LibDllPath;
//file name srscl
procedure srscl_; external LibDllPath;
//file name ssb2st_kernels
procedure  ssb2st_kernels; external LibDllPath;
//file name ssbev
procedure ssbev_; external LibDllPath;
//file name ssbev_2stage
procedure ssbev_2stage_; external LibDllPath;
//file name ssbevd
procedure ssbevd_; external LibDllPath;
//file name ssbevd_2stage
procedure ssbevd_2stage_; external LibDllPath;
//file name ssbevx
procedure ssbevx_; external LibDllPath;
//file name ssbevx_2stage
procedure ssbevx_2stage_; external LibDllPath;
//file name ssbgst
procedure ssbgst_; external LibDllPath;
//file name ssbgv
procedure ssbgv_; external LibDllPath;
//file name ssbgvd
procedure ssbgvd_; external LibDllPath;
//file name ssbgvx
procedure ssbgvx_; external LibDllPath;
//file name ssbtrd
procedure ssbtrd_; external LibDllPath;
//file name ssfrk
procedure ssfrk_; external LibDllPath;
//file name sspcon
procedure sspcon_; external LibDllPath;
//file name sspev
procedure sspev_; external LibDllPath;
//file name sspevd
procedure sspevd_; external LibDllPath;
//file name sspevx
procedure sspevx_; external LibDllPath;
//file name sspgst
procedure sspgst_; external LibDllPath;
//file name sspgv
procedure sspgv_; external LibDllPath;
//file name sspgvd
procedure sspgvd_; external LibDllPath;
//file name sspgvx
procedure sspgvx_; external LibDllPath;
//file name ssprfs
procedure ssprfs_; external LibDllPath;
//file name sspsv
procedure sspsv_; external LibDllPath;
//file name sspsvx
procedure sspsvx_; external LibDllPath;
//file name ssptrd
procedure ssptrd_; external LibDllPath;
//file name ssptrf
procedure ssptrf_; external LibDllPath;
//file name ssptri
procedure ssptri_; external LibDllPath;
//file name ssptrs
procedure ssptrs_; external LibDllPath;
//file name sstebz
procedure sstebz_; external LibDllPath;
//file name sstedc
procedure sstedc_; external LibDllPath;
//file name sstegr
procedure sstegr_; external LibDllPath;
//file name sstein
procedure sstein_; external LibDllPath;
//file name sstemr
procedure sstemr_; external LibDllPath;
//file name ssteqr
procedure ssteqr_; external LibDllPath;
//file name ssterf
procedure ssterf_; external LibDllPath;
//file name sstev
procedure sstev_; external LibDllPath;
//file name sstevd
procedure sstevd_; external LibDllPath;
//file name sstevr
procedure sstevr_; external LibDllPath;
//file name sstevx
procedure sstevx_; external LibDllPath;
//file name ssycon
procedure ssycon_; external LibDllPath;
//file name ssycon_3
procedure ssycon_3_; external LibDllPath;
//file name ssycon_rook
procedure ssycon_rook_; external LibDllPath;
//file name ssyconv
procedure ssyconv_; external LibDllPath;
//file name ssyconvf
procedure ssyconvf_; external LibDllPath;
//file name ssyconvf_rook
procedure ssyconvf_rook_; external LibDllPath;
//file name ssyequb
procedure ssyequb_; external LibDllPath;
//file name ssyev
procedure ssyev_; external LibDllPath;
//file name ssyev_2stage
procedure ssyev_2stage_; external LibDllPath;
//file name ssyevd
procedure ssyevd_; external LibDllPath;
//file name ssyevd_2stage
procedure ssyevd_2stage_; external LibDllPath;
//file name ssyevr
procedure ssyevr_; external LibDllPath;
//file name ssyevr_2stage
procedure ssyevr_2stage_; external LibDllPath;
//file name ssyevx
procedure ssyevx_; external LibDllPath;
//file name ssyevx_2stage
procedure ssyevx_2stage_; external LibDllPath;
//file name ssygs2
procedure ssygs2_; external LibDllPath;
//file name ssygst
procedure ssygst_; external LibDllPath;
//file name ssygv
procedure ssygv_; external LibDllPath;
//file name ssygv_2stage
procedure ssygv_2stage_; external LibDllPath;
//file name ssygvd
procedure ssygvd_; external LibDllPath;
//file name ssygvx
procedure ssygvx_; external LibDllPath;
//file name ssyrfs
procedure ssyrfs_; external LibDllPath;
//file name ssyrfsx
procedure ssyrfsx_; external LibDllPath;
//file name ssysv
procedure ssysv_; external LibDllPath;
//file name ssysv_aa
procedure ssysv_aa_; external LibDllPath;
//file name ssysv_aa_2stage
procedure ssysv_aa_2stage_; external LibDllPath;
//file name ssysv_rk
procedure ssysv_rk_; external LibDllPath;
//file name ssysv_rook
procedure ssysv_rook_; external LibDllPath;
//file name ssysvx
procedure ssysvx_; external LibDllPath;
//file name ssysvxx
procedure ssysvxx_; external LibDllPath;
//file name ssyswapr
procedure ssyswapr_; external LibDllPath;
//file name ssytd2
procedure ssytd2_; external LibDllPath;
//file name ssytf2
procedure ssytf2_; external LibDllPath;
//file name ssytf2_rk
procedure ssytf2_rk_; external LibDllPath;
//file name ssytf2_rook
procedure ssytf2_rook_; external LibDllPath;
//file name ssytrd
procedure ssytrd_; external LibDllPath;
//file name ssytrd_2stage
procedure ssytrd_2stage_; external LibDllPath;
//file name ssytrd_sb2st
procedure ssytrd_sb2st_; external LibDllPath;
//file name ssytrd_sy2sb
procedure ssytrd_sy2sb_; external LibDllPath;
//file name ssytrf
procedure ssytrf_; external LibDllPath;
//file name ssytrf_aa
procedure ssytrf_aa_; external LibDllPath;
//file name ssytrf_aa_2stage
procedure ssytrf_aa_2stage_; external LibDllPath;
//file name ssytrf_rk
procedure ssytrf_rk_; external LibDllPath;
//file name ssytrf_rook
procedure ssytrf_rook_; external LibDllPath;
//file name ssytri
procedure ssytri_; external LibDllPath;
//file name ssytri_3
procedure ssytri_3_; external LibDllPath;
//file name ssytri_3x
procedure ssytri_3x_; external LibDllPath;
//file name ssytri_rook
procedure ssytri_rook_; external LibDllPath;
//file name ssytri2
procedure ssytri2_; external LibDllPath;
//file name ssytri2x
procedure ssytri2x_; external LibDllPath;
//file name ssytrs
procedure ssytrs_; external LibDllPath;
//file name ssytrs_3
procedure ssytrs_3_; external LibDllPath;
//file name ssytrs_aa
procedure ssytrs_aa_; external LibDllPath;
//file name ssytrs_aa_2stage
procedure ssytrs_aa_2stage_; external LibDllPath;
//file name ssytrs_rook
procedure ssytrs_rook_; external LibDllPath;
//file name ssytrs2
procedure ssytrs2_; external LibDllPath;
//file name stbcon
procedure stbcon_; external LibDllPath;
//file name stbrfs
procedure stbrfs_; external LibDllPath;
//file name stbtrs
procedure stbtrs_; external LibDllPath;
//file name stfsm
procedure stfsm_; external LibDllPath;
//file name stftri
procedure stftri_; external LibDllPath;
//file name stfttp
procedure stfttp_; external LibDllPath;
//file name stfttr
procedure stfttr_; external LibDllPath;
//file name stgevc
procedure stgevc_; external LibDllPath;
//file name stgex2
procedure stgex2_; external LibDllPath;
//file name stgexc
procedure stgexc_; external LibDllPath;
//file name stgsen
procedure stgsen_; external LibDllPath;
//file name stgsja
procedure stgsja_; external LibDllPath;
//file name stgsna
procedure stgsna_; external LibDllPath;
//file name stgsy2
procedure stgsy2_; external LibDllPath;
//file name stgsyl
procedure stgsyl_; external LibDllPath;
//file name stpcon
procedure stpcon_; external LibDllPath;
//file name stplqt
procedure stplqt_; external LibDllPath;
//file name stplqt2
procedure stplqt2_; external LibDllPath;
//file name stpmlqt
procedure stpmlqt_; external LibDllPath;
//file name stpmqrt
procedure stpmqrt_; external LibDllPath;
//file name stpqrt
procedure stpqrt_; external LibDllPath;
//file name stpqrt2
procedure stpqrt2_; external LibDllPath;
//file name stprfb
procedure stprfb_; external LibDllPath;
//file name stprfs
procedure stprfs_; external LibDllPath;
//file name stptri
procedure stptri_; external LibDllPath;
//file name stptrs
procedure stptrs_; external LibDllPath;
//file name stpttf
procedure stpttf_; external LibDllPath;
//file name stpttr
procedure stpttr_; external LibDllPath;
//file name strcon
procedure strcon_; external LibDllPath;
//file name strevc
procedure strevc_; external LibDllPath;
//file name strevc3
procedure strevc3_; external LibDllPath;
//file name strexc
procedure strexc_; external LibDllPath;
//file name strrfs
procedure strrfs_; external LibDllPath;
//file name strsen
procedure strsen_; external LibDllPath;
//file name strsna
procedure strsna_; external LibDllPath;
//file name strsyl
procedure strsyl_; external LibDllPath;
//file name strti2
procedure strti2_; external LibDllPath;
//file name strtri
procedure strtri_; external LibDllPath;
//file name strtrs
procedure strtrs_; external LibDllPath;
//file name strttf
procedure strttf_; external LibDllPath;
//file name strttp
procedure strttp_; external LibDllPath;
//file name stzrzf
procedure stzrzf_; external LibDllPath;
//file name xerbla
procedure xerbla_; external LibDllPath;
//file name xerbla_array
procedure xerbla_array_; external LibDllPath;
//file name zbbcsd
procedure zbbcsd_; external LibDllPath;
//file name zbdsqr
procedure zbdsqr_; external LibDllPath;
//file name zcgesv
procedure zcgesv_; external LibDllPath;
//file name zcposv
procedure zcposv_; external LibDllPath;
//file name zdrscl
procedure zdrscl_; external LibDllPath;
//file name zgbbrd
procedure zgbbrd_; external LibDllPath;
//file name zgbcon
procedure zgbcon_; external LibDllPath;
//file name zgbequ
procedure zgbequ_; external LibDllPath;
//file name zgbequb
procedure zgbequb_; external LibDllPath;
//file name zgbrfs
procedure zgbrfs_; external LibDllPath;
//file name zgbrfsx
procedure zgbrfsx_; external LibDllPath;
//file name zgbsv
procedure zgbsv_; external LibDllPath;
//file name zgbsvx
procedure zgbsvx_; external LibDllPath;
//file name zgbsvxx
procedure zgbsvxx_; external LibDllPath;
//file name zgbtf2
procedure zgbtf2_; external LibDllPath;
//file name zgbtrf
procedure zgbtrf_; external LibDllPath;
//file name zgbtrs
procedure zgbtrs_; external LibDllPath;
//file name zgebak
procedure zgebak_; external LibDllPath;
//file name zgebal
procedure zgebal_; external LibDllPath;
//file name zgebd2
procedure zgebd2_; external LibDllPath;
//file name zgebrd
procedure zgebrd_; external LibDllPath;
//file name zgecon
procedure zgecon_; external LibDllPath;
//file name zgeequ
procedure zgeequ_; external LibDllPath;
//file name zgeequb
procedure zgeequb_; external LibDllPath;
//file name zgees
procedure zgees_; external LibDllPath;
//file name zgeesx
procedure zgeesx_; external LibDllPath;
//file name zgeev
procedure zgeev_; external LibDllPath;
//file name zgeevx
procedure zgeevx_; external LibDllPath;
//file name zgehd2
procedure zgehd2_; external LibDllPath;
//file name zgehrd
procedure zgehrd_; external LibDllPath;
//file name zgejsv
procedure zgejsv_; external LibDllPath;
//file name zgelq
procedure zgelq_; external LibDllPath;
//file name zgelq2
procedure zgelq2_; external LibDllPath;
//file name zgelqf
procedure zgelqf_; external LibDllPath;
//file name zgelqt
procedure zgelqt_; external LibDllPath;
//file name zgelqt3
procedure zgelqt3_; external LibDllPath;
//file name zgels
procedure zgels_; external LibDllPath;
//file name zgelsd
procedure zgelsd_; external LibDllPath;
//file name zgelss
procedure zgelss_; external LibDllPath;
//file name zgelsy
procedure zgelsy_; external LibDllPath;
//file name zgemlq
procedure zgemlq_; external LibDllPath;
//file name zgemlqt
procedure zgemlqt_; external LibDllPath;
//file name zgemqr
procedure zgemqr_; external LibDllPath;
//file name zgemqrt
procedure zgemqrt_; external LibDllPath;
//file name zgeql2
procedure zgeql2_; external LibDllPath;
//file name zgeqlf
procedure zgeqlf_; external LibDllPath;
//file name zgeqp3
procedure zgeqp3_; external LibDllPath;
//file name zgeqr
procedure zgeqr_; external LibDllPath;
//file name zgeqr2
procedure zgeqr2_; external LibDllPath;
//file name zgeqr2p
procedure zgeqr2p_; external LibDllPath;
//file name zgeqrf
procedure zgeqrf_; external LibDllPath;
//file name zgeqrfp
procedure zgeqrfp_; external LibDllPath;
//file name zgeqrt
procedure zgeqrt_; external LibDllPath;
//file name zgeqrt2
procedure zgeqrt2_; external LibDllPath;
//file name zgeqrt3
procedure zgeqrt3_; external LibDllPath;
//file name zgerfs
procedure zgerfs_; external LibDllPath;
//file name zgerfsx
procedure zgerfsx_; external LibDllPath;
//file name zgerq2
procedure zgerq2_; external LibDllPath;
//file name zgerqf
procedure zgerqf_; external LibDllPath;
//file name zgesc2
procedure zgesc2_; external LibDllPath;
//file name zgesdd
procedure zgesdd_; external LibDllPath;
//file name zgesv
procedure zgesv_; external LibDllPath;
//file name zgesvd
procedure zgesvd_; external LibDllPath;
//file name zgesvdq
procedure zgesvdq_; external LibDllPath;
//file name zgesvdx
procedure zgesvdx_; external LibDllPath;
//file name zgesvj
procedure zgesvj_; external LibDllPath;
//file name zgesvx
procedure zgesvx_; external LibDllPath;
//file name zgesvxx
procedure zgesvxx_; external LibDllPath;
//file name zgetc2
procedure zgetc2_; external LibDllPath;
//file name zgetf2
procedure zgetf2_; external LibDllPath;
//file name zgetrf
procedure zgetrf_; external LibDllPath;
//file name zgetrf2
procedure zgetrf2_; external LibDllPath;
//file name zgetri
procedure zgetri_; external LibDllPath;
//file name zgetrs
procedure zgetrs_; external LibDllPath;
//file name zgetsls
procedure zgetsls_; external LibDllPath;
//file name zgetsqrhrt
procedure zgetsqrhrt_; external LibDllPath;
//file name zggbak
procedure zggbak_; external LibDllPath;
//file name zggbal
procedure zggbal_; external LibDllPath;
//file name zgges
procedure zgges_; external LibDllPath;
//file name zgges3
procedure zgges3_; external LibDllPath;
//file name zggesx
procedure zggesx_; external LibDllPath;
//file name zggev
procedure zggev_; external LibDllPath;
//file name zggev3
procedure zggev3_; external LibDllPath;
//file name zggevx
procedure zggevx_; external LibDllPath;
//file name zggglm
procedure zggglm_; external LibDllPath;
//file name zgghd3
procedure zgghd3_; external LibDllPath;
//file name zgghrd
procedure zgghrd_; external LibDllPath;
//file name zgglse
procedure zgglse_; external LibDllPath;
//file name zggqrf
procedure zggqrf_; external LibDllPath;
//file name zggrqf
procedure zggrqf_; external LibDllPath;
//file name zggsvd3
procedure zggsvd3_; external LibDllPath;
//file name zggsvp3
procedure zggsvp3_; external LibDllPath;
//file name zgsvj0
procedure zgsvj0_; external LibDllPath;
//file name zgsvj1
procedure zgsvj1_; external LibDllPath;
//file name zgtcon
procedure zgtcon_; external LibDllPath;
//file name zgtrfs
procedure zgtrfs_; external LibDllPath;
//file name zgtsv
procedure zgtsv_; external LibDllPath;
//file name zgtsvx
procedure zgtsvx_; external LibDllPath;
//file name zgttrf
procedure zgttrf_; external LibDllPath;
//file name zgttrs
procedure zgttrs_; external LibDllPath;
//file name zgtts2
procedure zgtts2_; external LibDllPath;
//file name zhb2st_kernels
procedure  zhb2st_kernels; external LibDllPath;
//file name zhbev
procedure zhbev_; external LibDllPath;
//file name zhbev_2stage
procedure zhbev_2stage_; external LibDllPath;
//file name zhbevd
procedure zhbevd_; external LibDllPath;
//file name zhbevd_2stage
procedure zhbevd_2stage_; external LibDllPath;
//file name zhbevx
procedure zhbevx_; external LibDllPath;
//file name zhbevx_2stage
procedure zhbevx_2stage_; external LibDllPath;
//file name zhbgst
procedure zhbgst_; external LibDllPath;
//file name zhbgv
procedure zhbgv_; external LibDllPath;
//file name zhbgvd
procedure zhbgvd_; external LibDllPath;
//file name zhbgvx
procedure zhbgvx_; external LibDllPath;
//file name zhbtrd
procedure zhbtrd_; external LibDllPath;
//file name zhecon
procedure zhecon_; external LibDllPath;
//file name zhecon_3
procedure zhecon_3_; external LibDllPath;
//file name zhecon_rook
procedure zhecon_rook_; external LibDllPath;
//file name zheequb
procedure zheequb_; external LibDllPath;
//file name zheev
procedure zheev_; external LibDllPath;
//file name zheev_2stage
procedure zheev_2stage_; external LibDllPath;
//file name zheevd
procedure zheevd_; external LibDllPath;
//file name zheevd_2stage
procedure zheevd_2stage_; external LibDllPath;
//file name zheevr
procedure zheevr_; external LibDllPath;
//file name zheevr_2stage
procedure zheevr_2stage_; external LibDllPath;
//file name zheevx
procedure zheevx_; external LibDllPath;
//file name zheevx_2stage
procedure zheevx_2stage_; external LibDllPath;
//file name zhegs2
procedure zhegs2_; external LibDllPath;
//file name zhegst
procedure zhegst_; external LibDllPath;
//file name zhegv
procedure zhegv_; external LibDllPath;
//file name zhegv_2stage
procedure zhegv_2stage_; external LibDllPath;
//file name zhegvd
procedure zhegvd_; external LibDllPath;
//file name zhegvx
procedure zhegvx_; external LibDllPath;
//file name zherfs
procedure zherfs_; external LibDllPath;
//file name zherfsx
procedure zherfsx_; external LibDllPath;
//file name zhesv
procedure zhesv_; external LibDllPath;
//file name zhesv_aa
procedure zhesv_aa_; external LibDllPath;
//file name zhesv_aa_2stage
procedure zhesv_aa_2stage_; external LibDllPath;
//file name zhesv_rk
procedure zhesv_rk_; external LibDllPath;
//file name zhesv_rook
procedure zhesv_rook_; external LibDllPath;
//file name zhesvx
procedure zhesvx_; external LibDllPath;
//file name zhesvxx
procedure zhesvxx_; external LibDllPath;
//file name zheswapr
procedure zheswapr_; external LibDllPath;
//file name zhetd2
procedure zhetd2_; external LibDllPath;
//file name zhetf2
procedure zhetf2_; external LibDllPath;
//file name zhetf2_rk
procedure zhetf2_rk_; external LibDllPath;
//file name zhetf2_rook
procedure zhetf2_rook_; external LibDllPath;
//file name zhetrd
procedure zhetrd_; external LibDllPath;
//file name zhetrd_2stage
procedure zhetrd_2stage_; external LibDllPath;
//file name zhetrd_hb2st
procedure zhetrd_hb2st_; external LibDllPath;
//file name zhetrd_he2hb
procedure zhetrd_he2hb_; external LibDllPath;
//file name zhetrf
procedure zhetrf_; external LibDllPath;
//file name zhetrf_aa
procedure zhetrf_aa_; external LibDllPath;
//file name zhetrf_aa_2stage
procedure zhetrf_aa_2stage_; external LibDllPath;
//file name zhetrf_rk
procedure zhetrf_rk_; external LibDllPath;
//file name zhetrf_rook
procedure zhetrf_rook_; external LibDllPath;
//file name zhetri
procedure zhetri_; external LibDllPath;
//file name zhetri_3
procedure zhetri_3_; external LibDllPath;
//file name zhetri_3x
procedure zhetri_3x_; external LibDllPath;
//file name zhetri_rook
procedure zhetri_rook_; external LibDllPath;
//file name zhetri2
procedure zhetri2_; external LibDllPath;
//file name zhetri2x
procedure zhetri2x_; external LibDllPath;
//file name zhetrs
procedure zhetrs_; external LibDllPath;
//file name zhetrs_3
procedure zhetrs_3_; external LibDllPath;
//file name zhetrs_aa
procedure zhetrs_aa_; external LibDllPath;
//file name zhetrs_aa_2stage
procedure zhetrs_aa_2stage_; external LibDllPath;
//file name zhetrs_rook
procedure zhetrs_rook_; external LibDllPath;
//file name zhetrs2
procedure zhetrs2_; external LibDllPath;
//file name zhfrk
procedure zhfrk_; external LibDllPath;
//file name zhgeqz
procedure zhgeqz_; external LibDllPath;
//file name zhpcon
procedure zhpcon_; external LibDllPath;
//file name zhpev
procedure zhpev_; external LibDllPath;
//file name zhpevd
procedure zhpevd_; external LibDllPath;
//file name zhpevx
procedure zhpevx_; external LibDllPath;
//file name zhpgst
procedure zhpgst_; external LibDllPath;
//file name zhpgv
procedure zhpgv_; external LibDllPath;
//file name zhpgvd
procedure zhpgvd_; external LibDllPath;
//file name zhpgvx
procedure zhpgvx_; external LibDllPath;
//file name zhprfs
procedure zhprfs_; external LibDllPath;
//file name zhpsv
procedure zhpsv_; external LibDllPath;
//file name zhpsvx
procedure zhpsvx_; external LibDllPath;
//file name zhptrd
procedure zhptrd_; external LibDllPath;
//file name zhptrf
procedure zhptrf_; external LibDllPath;
//file name zhptri
procedure zhptri_; external LibDllPath;
//file name zhptrs
procedure zhptrs_; external LibDllPath;
//file name zhsein
procedure zhsein_; external LibDllPath;
//file name zhseqr
procedure zhseqr_; external LibDllPath;
//file name zla_gbamv
procedure zla_gbamv_; external LibDllPath;
//file name zla_gbrcond_c
function zla_gbrcond_c_; external LibDllPath;
//file name zla_gbrcond_x
function zla_gbrcond_x_; external LibDllPath;
//file name zla_gbrfsx_extended
procedure zla_gbrfsx_extended_; external LibDllPath;
//file name zla_gbrpvgrw
function zla_gbrpvgrw_; external LibDllPath;
//file name zla_geamv
procedure zla_geamv_; external LibDllPath;
//file name zla_gercond_c
function zla_gercond_c_; external LibDllPath;
//file name zla_gercond_x
function zla_gercond_x_; external LibDllPath;
//file name zla_gerfsx_extended
procedure zla_gerfsx_extended_; external LibDllPath;
//file name zla_gerpvgrw
function zla_gerpvgrw_; external LibDllPath;
//file name zla_heamv
procedure zla_heamv_; external LibDllPath;
//file name zla_hercond_c
function zla_hercond_c_; external LibDllPath;
//file name zla_hercond_x
function zla_hercond_x_; external LibDllPath;
//file name zla_herfsx_extended
procedure zla_herfsx_extended_; external LibDllPath;
//file name zla_herpvgrw
function zla_herpvgrw_; external LibDllPath;
//file name zla_lin_berr
procedure zla_lin_berr_; external LibDllPath;
//file name zla_porcond_c
function zla_porcond_c_; external LibDllPath;
//file name zla_porcond_x
function zla_porcond_x_; external LibDllPath;
//file name zla_porfsx_extended
procedure zla_porfsx_extended_; external LibDllPath;
//file name zla_porpvgrw
function zla_porpvgrw_; external LibDllPath;
//file name zla_syamv
procedure zla_syamv_; external LibDllPath;
//file name zla_syrcond_c
function zla_syrcond_c_; external LibDllPath;
//file name zla_syrcond_x
function zla_syrcond_x_; external LibDllPath;
//file name zla_syrfsx_extended
procedure zla_syrfsx_extended_; external LibDllPath;
//file name zla_syrpvgrw
function zla_syrpvgrw_; external LibDllPath;
//file name zla_wwaddw
procedure zla_wwaddw_; external LibDllPath;
//file name zlabrd
procedure zlabrd_; external LibDllPath;
//file name zlacgv
procedure zlacgv_; external LibDllPath;
//file name zlacn2
procedure zlacn2_; external LibDllPath;
//file name zlacon
procedure zlacon_; external LibDllPath;
//file name zlacp2
procedure zlacp2_; external LibDllPath;
//file name zlacpy
procedure zlacpy_; external LibDllPath;
//file name zlacrm
procedure zlacrm_; external LibDllPath;
//file name zlacrt
procedure zlacrt_; external LibDllPath;
//file name zladiv
function zladiv_; external LibDllPath;
//file name zlaed0
procedure zlaed0_; external LibDllPath;
//file name zlaed7
procedure zlaed7_; external LibDllPath;
//file name zlaed8
procedure zlaed8_; external LibDllPath;
//file name zlaein
procedure zlaein_; external LibDllPath;
//file name zlaesy
procedure zlaesy_; external LibDllPath;
//file name zlaev2
procedure zlaev2_; external LibDllPath;
//file name zlag2c
procedure zlag2c_; external LibDllPath;
//file name zlags2
procedure zlags2_; external LibDllPath;
//file name zlagtm
procedure zlagtm_; external LibDllPath;
//file name zlahef
procedure zlahef_; external LibDllPath;
//file name zlahef_aa
procedure zlahef_aa_; external LibDllPath;
//file name zlahef_rk
procedure zlahef_rk_; external LibDllPath;
//file name zlahef_rook
procedure zlahef_rook_; external LibDllPath;
//file name zlahqr
procedure zlahqr_; external LibDllPath;
//file name zlahr2
procedure zlahr2_; external LibDllPath;
//file name zlaic1
procedure zlaic1_; external LibDllPath;
//file name zlals0
procedure zlals0_; external LibDllPath;
//file name zlalsa
procedure zlalsa_; external LibDllPath;
//file name zlalsd
procedure zlalsd_; external LibDllPath;
//file name zlamswlq
procedure zlamswlq_; external LibDllPath;
//file name zlamtsqr
procedure zlamtsqr_; external LibDllPath;
//file name zlangb
function zlangb_; external LibDllPath;
//file name zlange
function zlange_; external LibDllPath;
//file name zlangt
function zlangt_; external LibDllPath;
//file name zlanhb
function zlanhb_; external LibDllPath;
//file name zlanhe
function zlanhe_; external LibDllPath;
//file name zlanhf
function zlanhf_; external LibDllPath;
//file name zlanhp
function zlanhp_; external LibDllPath;
//file name zlanhs
function zlanhs_; external LibDllPath;
//file name zlanht
function zlanht_; external LibDllPath;
//file name zlansb
function zlansb_; external LibDllPath;
//file name zlansp
function zlansp_; external LibDllPath;
//file name zlansy
function zlansy_; external LibDllPath;
//file name zlantb
function zlantb_; external LibDllPath;
//file name zlantp
function zlantp_; external LibDllPath;
//file name zlantr
function zlantr_; external LibDllPath;
//file name zlapll
procedure zlapll_; external LibDllPath;
//file name zlapmr
procedure zlapmr_; external LibDllPath;
//file name zlapmt
procedure zlapmt_; external LibDllPath;
//file name zlaqgb
procedure zlaqgb_; external LibDllPath;
//file name zlaqge
procedure zlaqge_; external LibDllPath;
//file name zlaqhb
procedure zlaqhb_; external LibDllPath;
//file name zlaqhe
procedure zlaqhe_; external LibDllPath;
//file name zlaqhp
procedure zlaqhp_; external LibDllPath;
//file name zlaqp2
procedure zlaqp2_; external LibDllPath;
//file name zlaqps
procedure zlaqps_; external LibDllPath;
//file name zlaqr0
procedure zlaqr0_; external LibDllPath;
//file name zlaqr1
procedure zlaqr1_; external LibDllPath;
//file name zlaqr2
procedure zlaqr2_; external LibDllPath;
//file name zlaqr3
procedure zlaqr3_; external LibDllPath;
//file name zlaqr4
procedure zlaqr4_; external LibDllPath;
//file name zlaqr5
procedure zlaqr5_; external LibDllPath;
//file name zlaqsb
procedure zlaqsb_; external LibDllPath;
//file name zlaqsp
procedure zlaqsp_; external LibDllPath;
//file name zlaqsy
procedure zlaqsy_; external LibDllPath;
//file name zlar1v
procedure zlar1v_; external LibDllPath;
//file name zlar2v
procedure zlar2v_; external LibDllPath;
//file name zlarcm
procedure zlarcm_; external LibDllPath;
//file name zlarf
procedure zlarf_; external LibDllPath;
//file name zlarfb
procedure zlarfb_; external LibDllPath;
//file name zlarfb_gett
procedure zlarfb_gett_; external LibDllPath;
//file name zlarfg
procedure zlarfg_; external LibDllPath;
//file name zlarfgp
procedure zlarfgp_; external LibDllPath;
//file name zlarft
procedure zlarft_; external LibDllPath;
//file name zlarfx
procedure zlarfx_; external LibDllPath;
//file name zlarfy
procedure zlarfy_; external LibDllPath;
//file name zlargv
procedure zlargv_; external LibDllPath;
//file name zlarnv
procedure zlarnv_; external LibDllPath;
//file name zlarrv
procedure zlarrv_; external LibDllPath;
//file name zlarscl2
procedure zlarscl2_; external LibDllPath;
//file name zlartg
procedure zlartg_; external LibDllPath;
//file name zlartv
procedure zlartv_; external LibDllPath;
//file name zlarz
procedure zlarz_; external LibDllPath;
//file name zlarzb
procedure zlarzb_; external LibDllPath;
//file name zlarzt
procedure zlarzt_; external LibDllPath;
//file name zlascl
procedure zlascl_; external LibDllPath;
//file name zlascl2
procedure zlascl2_; external LibDllPath;
//file name zlaset
procedure zlaset_; external LibDllPath;
//file name zlasr
procedure zlasr_; external LibDllPath;
//file name zlassq
procedure zlassq_; external LibDllPath;
//file name zlaswlq
procedure zlaswlq_; external LibDllPath;
//file name zlaswp
procedure zlaswp_; external LibDllPath;
//file name zlasyf
procedure zlasyf_; external LibDllPath;
//file name zlasyf_aa
procedure zlasyf_aa_; external LibDllPath;
//file name zlasyf_rk
procedure zlasyf_rk_; external LibDllPath;
//file name zlasyf_rook
procedure zlasyf_rook_; external LibDllPath;
//file name zlat2c
procedure zlat2c_; external LibDllPath;
//file name zlatbs
procedure zlatbs_; external LibDllPath;
//file name zlatdf
procedure zlatdf_; external LibDllPath;
//file name zlatps
procedure zlatps_; external LibDllPath;
//file name zlatrd
procedure zlatrd_; external LibDllPath;
//file name zlatrs
procedure zlatrs_; external LibDllPath;
//file name zlatrz
procedure zlatrz_; external LibDllPath;
//file name zlatsqr
procedure zlatsqr_; external LibDllPath;
//file name zlaunhr_col_getrfnp
procedure zlaunhr_col_getrfnp_; external LibDllPath;
//file name zlaunhr_col_getrfnp2
procedure zlaunhr_col_getrfnp2_; external LibDllPath;
//file name zlauu2
procedure zlauu2_; external LibDllPath;
//file name zlauum
procedure zlauum_; external LibDllPath;
//file name zpbcon
procedure zpbcon_; external LibDllPath;
//file name zpbequ
procedure zpbequ_; external LibDllPath;
//file name zpbrfs
procedure zpbrfs_; external LibDllPath;
//file name zpbstf
procedure zpbstf_; external LibDllPath;
//file name zpbsv
procedure zpbsv_; external LibDllPath;
//file name zpbsvx
procedure zpbsvx_; external LibDllPath;
//file name zpbtf2
procedure zpbtf2_; external LibDllPath;
//file name zpbtrf
procedure zpbtrf_; external LibDllPath;
//file name zpbtrs
procedure zpbtrs_; external LibDllPath;
//file name zpftrf
procedure zpftrf_; external LibDllPath;
//file name zpftri
procedure zpftri_; external LibDllPath;
//file name zpftrs
procedure zpftrs_; external LibDllPath;
//file name zpocon
procedure zpocon_; external LibDllPath;
//file name zpoequ
procedure zpoequ_; external LibDllPath;
//file name zpoequb
procedure zpoequb_; external LibDllPath;
//file name zporfs
procedure zporfs_; external LibDllPath;
//file name zporfsx
procedure zporfsx_; external LibDllPath;
//file name zposv
procedure zposv_; external LibDllPath;
//file name zposvx
procedure zposvx_; external LibDllPath;
//file name zposvxx
procedure zposvxx_; external LibDllPath;
//file name zpotf2
procedure zpotf2_; external LibDllPath;
//file name zpotrf
procedure zpotrf_; external LibDllPath;
//file name zpotrf2
procedure zpotrf2_; external LibDllPath;
//file name zpotri
procedure zpotri_; external LibDllPath;
//file name zpotrs
procedure zpotrs_; external LibDllPath;
//file name zppcon
procedure zppcon_; external LibDllPath;
//file name zppequ
procedure zppequ_; external LibDllPath;
//file name zpprfs
procedure zpprfs_; external LibDllPath;
//file name zppsv
procedure zppsv_; external LibDllPath;
//file name zppsvx
procedure zppsvx_; external LibDllPath;
//file name zpptrf
procedure zpptrf_; external LibDllPath;
//file name zpptri
procedure zpptri_; external LibDllPath;
//file name zpptrs
procedure zpptrs_; external LibDllPath;
//file name zpstf2
procedure zpstf2_; external LibDllPath;
//file name zpstrf
procedure zpstrf_; external LibDllPath;
//file name zptcon
procedure zptcon_; external LibDllPath;
//file name zpteqr
procedure zpteqr_; external LibDllPath;
//file name zptrfs
procedure zptrfs_; external LibDllPath;
//file name zptsv
procedure zptsv_; external LibDllPath;
//file name zptsvx
procedure zptsvx_; external LibDllPath;
//file name zpttrf
procedure zpttrf_; external LibDllPath;
//file name zpttrs
procedure zpttrs_; external LibDllPath;
//file name zptts2
procedure zptts2_; external LibDllPath;
//file name zrot
procedure zrot_; external LibDllPath;
//file name zspcon
procedure zspcon_; external LibDllPath;
//file name zspmv
procedure zspmv_; external LibDllPath;
//file name zspr
procedure zspr_; external LibDllPath;
//file name zsprfs
procedure zsprfs_; external LibDllPath;
//file name zspsv
procedure zspsv_; external LibDllPath;
//file name zspsvx
procedure zspsvx_; external LibDllPath;
//file name zsptrf
procedure zsptrf_; external LibDllPath;
//file name zsptri
procedure zsptri_; external LibDllPath;
//file name zsptrs
procedure zsptrs_; external LibDllPath;
//file name zstedc
procedure zstedc_; external LibDllPath;
//file name zstegr
procedure zstegr_; external LibDllPath;
//file name zstein
procedure zstein_; external LibDllPath;
//file name zstemr
procedure zstemr_; external LibDllPath;
//file name zsteqr
procedure zsteqr_; external LibDllPath;
//file name zsycon
procedure zsycon_; external LibDllPath;
//file name zsycon_3
procedure zsycon_3_; external LibDllPath;
//file name zsycon_rook
procedure zsycon_rook_; external LibDllPath;
//file name zsyconv
procedure zsyconv_; external LibDllPath;
//file name zsyconvf
procedure zsyconvf_; external LibDllPath;
//file name zsyconvf_rook
procedure zsyconvf_rook_; external LibDllPath;
//file name zsyequb
procedure zsyequb_; external LibDllPath;
//file name zsymv
procedure zsymv_; external LibDllPath;
//file name zsyr
procedure zsyr_; external LibDllPath;
//file name zsyrfs
procedure zsyrfs_; external LibDllPath;
//file name zsyrfsx
procedure zsyrfsx_; external LibDllPath;
//file name zsysv
procedure zsysv_; external LibDllPath;
//file name zsysv_aa
procedure zsysv_aa_; external LibDllPath;
//file name zsysv_aa_2stage
procedure zsysv_aa_2stage_; external LibDllPath;
//file name zsysv_rk
procedure zsysv_rk_; external LibDllPath;
//file name zsysv_rook
procedure zsysv_rook_; external LibDllPath;
//file name zsysvx
procedure zsysvx_; external LibDllPath;
//file name zsysvxx
procedure zsysvxx_; external LibDllPath;
//file name zsyswapr
procedure zsyswapr_; external LibDllPath;
//file name zsytf2
procedure zsytf2_; external LibDllPath;
//file name zsytf2_rk
procedure zsytf2_rk_; external LibDllPath;
//file name zsytf2_rook
procedure zsytf2_rook_; external LibDllPath;
//file name zsytrf
procedure zsytrf_; external LibDllPath;
//file name zsytrf_aa
procedure zsytrf_aa_; external LibDllPath;
//file name zsytrf_aa_2stage
procedure zsytrf_aa_2stage_; external LibDllPath;
//file name zsytrf_rk
procedure zsytrf_rk_; external LibDllPath;
//file name zsytrf_rook
procedure zsytrf_rook_; external LibDllPath;
//file name zsytri
procedure zsytri_; external LibDllPath;
//file name zsytri_3
procedure zsytri_3_; external LibDllPath;
//file name zsytri_3x
procedure zsytri_3x_; external LibDllPath;
//file name zsytri_rook
procedure zsytri_rook_; external LibDllPath;
//file name zsytri2
procedure zsytri2_; external LibDllPath;
//file name zsytri2x
procedure zsytri2x_; external LibDllPath;
//file name zsytrs
procedure zsytrs_; external LibDllPath;
//file name zsytrs_3
procedure zsytrs_3_; external LibDllPath;
//file name zsytrs_aa
procedure zsytrs_aa_; external LibDllPath;
//file name zsytrs_aa_2stage
procedure zsytrs_aa_2stage_; external LibDllPath;
//file name zsytrs_rook
procedure zsytrs_rook_; external LibDllPath;
//file name zsytrs2
procedure zsytrs2_; external LibDllPath;
//file name ztbcon
procedure ztbcon_; external LibDllPath;
//file name ztbrfs
procedure ztbrfs_; external LibDllPath;
//file name ztbtrs
procedure ztbtrs_; external LibDllPath;
//file name ztfsm
procedure ztfsm_; external LibDllPath;
//file name ztftri
procedure ztftri_; external LibDllPath;
//file name ztfttp
procedure ztfttp_; external LibDllPath;
//file name ztfttr
procedure ztfttr_; external LibDllPath;
//file name ztgevc
procedure ztgevc_; external LibDllPath;
//file name ztgex2
procedure ztgex2_; external LibDllPath;
//file name ztgexc
procedure ztgexc_; external LibDllPath;
//file name ztgsen
procedure ztgsen_; external LibDllPath;
//file name ztgsja
procedure ztgsja_; external LibDllPath;
//file name ztgsna
procedure ztgsna_; external LibDllPath;
//file name ztgsy2
procedure ztgsy2_; external LibDllPath;
//file name ztgsyl
procedure ztgsyl_; external LibDllPath;
//file name ztpcon
procedure ztpcon_; external LibDllPath;
//file name ztplqt
procedure ztplqt_; external LibDllPath;
//file name ztplqt2
procedure ztplqt2_; external LibDllPath;
//file name ztpmlqt
procedure ztpmlqt_; external LibDllPath;
//file name ztpmqrt
procedure ztpmqrt_; external LibDllPath;
//file name ztpqrt
procedure ztpqrt_; external LibDllPath;
//file name ztpqrt2
procedure ztpqrt2_; external LibDllPath;
//file name ztprfb
procedure ztprfb_; external LibDllPath;
//file name ztprfs
procedure ztprfs_; external LibDllPath;
//file name ztptri
procedure ztptri_; external LibDllPath;
//file name ztptrs
procedure ztptrs_; external LibDllPath;
//file name ztpttf
procedure ztpttf_; external LibDllPath;
//file name ztpttr
procedure ztpttr_; external LibDllPath;
//file name ztrcon
procedure ztrcon_; external LibDllPath;
//file name ztrevc
procedure ztrevc_; external LibDllPath;
//file name ztrevc3
procedure ztrevc3_; external LibDllPath;
//file name ztrexc
procedure ztrexc_; external LibDllPath;
//file name ztrrfs
procedure ztrrfs_; external LibDllPath;
//file name ztrsen
procedure ztrsen_; external LibDllPath;
//file name ztrsna
procedure ztrsna_; external LibDllPath;
//file name ztrsyl
procedure ztrsyl_; external LibDllPath;
//file name ztrti2
procedure ztrti2_; external LibDllPath;
//file name ztrtri
procedure ztrtri_; external LibDllPath;
//file name ztrtrs
procedure ztrtrs_; external LibDllPath;
//file name ztrttf
procedure ztrttf_; external LibDllPath;
//file name ztrttp
procedure ztrttp_; external LibDllPath;
//file name ztzrzf
procedure ztzrzf_; external LibDllPath;
//file name zunbdb
procedure zunbdb_; external LibDllPath;
//file name zunbdb1
procedure zunbdb1_; external LibDllPath;
//file name zunbdb2
procedure zunbdb2_; external LibDllPath;
//file name zunbdb3
procedure zunbdb3_; external LibDllPath;
//file name zunbdb4
procedure zunbdb4_; external LibDllPath;
//file name zunbdb5
procedure zunbdb5_; external LibDllPath;
//file name zunbdb6
procedure zunbdb6_; external LibDllPath;
//file name zuncsd
procedure zuncsd_; external LibDllPath;
//file name zuncsd2by1
procedure zuncsd2by1_; external LibDllPath;
//file name zung2l
procedure zung2l_; external LibDllPath;
//file name zung2r
procedure zung2r_; external LibDllPath;
//file name zungbr
procedure zungbr_; external LibDllPath;
//file name zunghr
procedure zunghr_; external LibDllPath;
//file name zungl2
procedure zungl2_; external LibDllPath;
//file name zunglq
procedure zunglq_; external LibDllPath;
//file name zungql
procedure zungql_; external LibDllPath;
//file name zungqr
procedure zungqr_; external LibDllPath;
//file name zungr2
procedure zungr2_; external LibDllPath;
//file name zungrq
procedure zungrq_; external LibDllPath;
//file name zungtr
procedure zungtr_; external LibDllPath;
//file name zungtsqr
procedure zungtsqr_; external LibDllPath;
//file name zungtsqr_row
procedure zungtsqr_row_; external LibDllPath;
//file name zunhr_col
procedure zunhr_col_; external LibDllPath;
//file name zunm2l
procedure zunm2l_; external LibDllPath;
//file name zunm2r
procedure zunm2r_; external LibDllPath;
//file name zunm22
procedure zunm22_; external LibDllPath;
//file name zunmbr
procedure zunmbr_; external LibDllPath;
//file name zunmhr
procedure zunmhr_; external LibDllPath;
//file name zunml2
procedure zunml2_; external LibDllPath;
//file name zunmlq
procedure zunmlq_; external LibDllPath;
//file name zunmql
procedure zunmql_; external LibDllPath;
//file name zunmqr
procedure zunmqr_; external LibDllPath;
//file name zunmr2
procedure zunmr2_; external LibDllPath;
//file name zunmr3
procedure zunmr3_; external LibDllPath;
//file name zunmrq
procedure zunmrq_; external LibDllPath;
//file name zunmrz
procedure zunmrz_; external LibDllPath;
//file name zunmtr
procedure zunmtr_; external LibDllPath;
//file name zupgtr
procedure zupgtr_; external LibDllPath;
//file name zupmtr
procedure zupmtr_; external LibDllPath;


end.
